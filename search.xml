<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>clickHouse 基本特性及在Centos 安装部署</title>
    <url>/2021/11/03/ClickHouse%E5%9C%A8Centos%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="ClickHouse在Centos安装部署"><a href="#ClickHouse在Centos安装部署" class="headerlink" title="ClickHouse在Centos安装部署"></a>ClickHouse在Centos安装部署</h1><h2 id="ClickHouse特性"><a href="#ClickHouse特性" class="headerlink" title="ClickHouse特性"></a>ClickHouse特性</h2><h3 id="真正的列式数据库管理系统"><a href="#真正的列式数据库管理系统" class="headerlink" title="真正的列式数据库管理系统"></a>真正的列式数据库管理系统</h3><p>在一个真正的列式数据库管理系统中，除了数据本身外不应该存在其他额外的数据。这意味着为了避免在值旁边存储它们的长度«number»，你必须支持固定长度数值类型。例如，10亿个UInt8类型的数据在未压缩的情况下大约消耗1GB左右的空间，如果不是这样的话，这将对CPU的使用产生强烈影响。即使是在未压缩的情况下，紧凑的存储数据也是非常重要的，因为解压缩的速度主要取决于未压缩数据的大小。</p>
<p>这是非常值得注意的，因为在一些其他系统中也可以将不同的列分别进行存储，但由于对其他场景进行的优化，使其无法有效的处理分析查询。例如： HBase，BigTable，Cassandra，HyperTable。在这些系统中，你可以得到每秒数十万的吞吐能力，但是无法得到每秒几亿行的吞吐能力。</p>
<p>需要说明的是，ClickHouse不单单是一个数据库， 它是一个数据库管理系统。因为它允许在运行时创建表和数据库、加载数据和运行查询，而无需重新配置或重启服务。</p>
<h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><p>在一些列式数据库管理系统中(例如：InfiniDB CE 和 MonetDB) 并没有使用数据压缩。但是, 若想达到比较优异的性能，数据压缩确实起到了至关重要的作用。</p>
<p>除了在磁盘空间和CPU消耗之间进行不同权衡的高效通用压缩编解码器之外，ClickHouse还提供针对特定类型数据的<a href="https://clickhouse.com/docs/zh/sql-reference/statements/create/#create-query-specialized-codecs">专用编解码器</a>，这使得ClickHouse能够与更小的数据库(如时间序列数据库)竞争并超越它们。</p>
<h3 id="数据的磁盘存储"><a href="#数据的磁盘存储" class="headerlink" title="数据的磁盘存储"></a>数据的磁盘存储</h3><p>许多的列式数据库(如 SAP HANA, Google PowerDrill)只能在内存中工作，这种方式会造成比实际更多的设备预算。</p>
<p>ClickHouse被设计用于工作在传统磁盘上的系统，它提供每GB更低的存储成本，但如果可以使用SSD和内存，它也会合理的利用这些资源。</p>
<h3 id="多核心并行处理"><a href="#多核心并行处理" class="headerlink" title="多核心并行处理"></a>多核心并行处理</h3><p>ClickHouse会使用服务器上一切可用的资源，从而以最自然的方式并行处理大型查询。</p>
<h3 id="多服务器分布式处理"><a href="#多服务器分布式处理" class="headerlink" title="多服务器分布式处理"></a>多服务器分布式处理</h3><p>上面提到的列式数据库管理系统中，几乎没有一个支持分布式的查询处理。<br>在ClickHouse中，数据可以保存在不同的shard上，每一个shard都由一组用于容错的replica组成，查询可以并行地在所有shard上进行处理。这些对用户来说是透明的</p>
<h3 id="支持SQL"><a href="#支持SQL" class="headerlink" title="支持SQL"></a>支持SQL</h3><p>ClickHouse支持一种<a href="https://clickhouse.com/docs/zh/sql-reference/">基于SQL的声明式查询语言</a>，它在许多情况下与<a href="https://clickhouse.com/docs/zh/sql-reference/ansi/">ANSI SQL标准</a>相同。</p>
<p>支持的查询<a href="https://clickhouse.com/docs/zh/sql-reference/statements/select/group-by/">GROUP BY</a>, <a href="https://clickhouse.com/docs/zh/sql-reference/statements/select/order-by/">ORDER BY</a>, <a href="https://clickhouse.com/docs/zh/sql-reference/statements/select/from/">FROM</a>, <a href="https://clickhouse.com/docs/zh/sql-reference/statements/select/join/">JOIN</a>, <a href="https://clickhouse.com/docs/zh/sql-reference/operators/in/">IN</a>以及非相关子查询。</p>
<p>相关(依赖性)子查询和窗口函数暂不受支持，但将来会被实现。</p>
<h3 id="向量引擎"><a href="#向量引擎" class="headerlink" title="向量引擎"></a>向量引擎</h3><p>为了高效的使用CPU，数据不仅仅按列存储，同时还按向量(列的一部分)进行处理，这样可以更加高效地使用CPU。</p>
<h3 id="实时的数据更新"><a href="#实时的数据更新" class="headerlink" title="实时的数据更新"></a>实时的数据更新</h3><p>ClickHouse支持在表中定义主键。为了使查询能够快速在主键中进行范围查找，数据总是以增量的方式有序的存储在MergeTree中。因此，数据可以持续不断地高效的写入到表中，并且写入的过程中不会存在任何加锁的行为。</p>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>按照主键对数据进行排序，这将帮助ClickHouse在几十毫秒以内完成对数据特定值或范围的查找。</p>
<h3 id="适合在线查询"><a href="#适合在线查询" class="headerlink" title="适合在线查询"></a>适合在线查询</h3><p>在线查询意味着在没有对数据做任何预处理的情况下以极低的延迟处理查询并将结果加载到用户的页面中。</p>
<h3 id="支持近似计算"><a href="#支持近似计算" class="headerlink" title="支持近似计算"></a>支持近似计算</h3><p>ClickHouse提供各种各样在允许牺牲数据精度的情况下对查询进行加速的方法：</p>
<ol>
<li>用于近似计算的各类聚合函数，如：distinct values, medians, quantiles</li>
<li>基于数据的部分样本进行近似查询。这时，仅会从磁盘检索少部分比例的数据。</li>
<li>不使用全部的聚合条件，通过随机选择有限个数据聚合条件进行聚合。这在数据聚合条件满足某些分布条件下，在提供相当准确的聚合结果的同时降低了计算资源的使用。</li>
</ol>
<h3 id="Adaptive-Join-Algorithm"><a href="#Adaptive-Join-Algorithm" class="headerlink" title="Adaptive Join Algorithm"></a>Adaptive Join Algorithm</h3><p>ClickHouse支持自定义<a href="https://clickhouse.com/docs/zh/sql-reference/statements/select/join/">JOIN</a>多个表，它更倾向于散列连接算法，如果有多个大表，则使用合并-连接算法</p>
<h3 id="支持数据复制和数据完整性"><a href="#支持数据复制和数据完整性" class="headerlink" title="支持数据复制和数据完整性"></a>支持数据复制和数据完整性</h3><p>ClickHouse使用异步的多主复制技术。当数据被写入任何一个可用副本后，系统会在后台将数据分发给其他副本，以保证系统在不同副本上保持相同的数据。在大多数情况下ClickHouse能在故障后自动恢复，在一些少数的复杂情况下需要手动恢复。</p>
<p>更多信息，参见 <a href="https://clickhouse.com/docs/zh/engines/table-engines/mergetree-family/replication/">数据复制</a>。</p>
<h3 id="角色的访问控制"><a href="#角色的访问控制" class="headerlink" title="角色的访问控制"></a>角色的访问控制</h3><p>ClickHouse使用SQL查询实现用户帐户管理，并允许<a href="https://clickhouse.com/docs/zh/operations/access-rights/">角色的访问控制</a>，类似于ANSI SQL标准和流行的关系数据库管理系统。</p>
<h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ol>
<li>没有完整的事务支持。</li>
<li>缺少高频率，低延迟的修改或删除已存在数据的能力。仅能用于批量删除或修改数据，但这符合 <a href="https://gdpr-info.eu/">GDPR</a>。</li>
<li>稀疏索引使得ClickHouse不适合通过其键检索单行的点查询。</li>
</ol>
<h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><p>推荐使用CentOS、RedHat和所有其他基于rpm的Linux发行版的官方预编译<code>rpm</code>包。</p>
<p>首先，添加官方存储库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install yum-utils</span><br><span class="line">sudo rpm --import https://repo.clickhouse.com/CLICKHOUSE-KEY.GPG</span><br><span class="line">sudo yum-config-manager --add-repo https://repo.clickhouse.com/rpm/stable/x86_64</span><br></pre></td></tr></table></figure>

<p>如果想使用最新的版本，请用<code>testing</code>替代<code>stable</code>(推荐用于测试环境)。<code>prestable</code>有时也可用。</p>
<p>然后运行命令安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install clickhouse-server clickhouse-client</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>如果没有<code>service</code>，可以运行如下命令在后台启动服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo /etc/init.d/clickhouse-server start</span><br></pre></td></tr></table></figure>

<p>日志文件将输出在<code>/var/log/clickhouse-server/</code>文件夹。</p>
<p>如果服务器没有启动，检查<code>/etc/clickhouse-server/config.xml</code>中的配置。</p>
<p>也可以手动从控制台启动服务器:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ clickhouse-server --config-file=/etc/clickhouse-server/config.xml</span><br></pre></td></tr></table></figure>

<p>在这种情况下，日志将被打印到控制台，这在开发过程中很方便。</p>
<p>如果配置文件在当前目录中，则不需要指定<code>——config-file</code>参数。默认情况下，它的路径为<code>./config.xml</code>。</p>
<p>启动服务后，您可以使用命令行客户端连接到它:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ clickhouse-client</span><br></pre></td></tr></table></figure>



<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><h4 id="操作"><a href="#操作" class="headerlink" title="操作:"></a>操作:</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ clickhouse-server --config-file=/etc/clickhouse-server/config.xml</span><br></pre></td></tr></table></figure>

<h4 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Include <span class="keyword">not</span> <span class="symbol">found:</span> clickhouse_remote_servers</span><br><span class="line">Include <span class="keyword">not</span> <span class="symbol">found:</span> clickhouse_compression</span><br><span class="line">Logging trace to /var/log/clickhouse-server/clickhouse-server.log</span><br><span class="line">Logging errors to /var/log/clickhouse-server/clickhouse-server.err.log</span><br><span class="line">Logging trace to console</span><br><span class="line"><span class="meta prompt_">2019.02.13 15:15:36.539294 [ 1 ] &#123;&#125; &lt;Information&gt;</span> : Starting ClickHouse <span class="number">19.1</span>.<span class="number">6</span> with revision <span class="number">54413</span></span><br><span class="line"><span class="meta prompt_">2019.02.13 15:15:36.543324 [ 1 ] &#123;&#125; &lt;Information&gt;</span> <span class="symbol">Application:</span> starting up</span><br><span class="line"><span class="meta prompt_">2019.02.13 15:15:36.547676 [ 1 ] &#123;&#125; &lt;Error&gt;</span> <span class="symbol">Application:</span> <span class="variable constant_">DB</span><span class="symbol">:</span><span class="symbol">:Exception</span>: Effective user of the process (root) does <span class="keyword">not</span> match the owner of the data (clickhouse). Run under <span class="string">&#x27;sudo -u clickhouse&#x27;</span>.</span><br><span class="line"><span class="meta prompt_">2019.02.13 15:15:36.547714 [ 1 ] &#123;&#125; &lt;Information&gt;</span> <span class="symbol">Application:</span> shutting down</span><br><span class="line"><span class="meta prompt_">2019.02.13 15:15:36.547729 [ 1 ] &#123;&#125; &lt;Debug&gt;</span> <span class="symbol">Application:</span> Uninitializing <span class="symbol">subsystem:</span> Logging Subsystem</span><br><span class="line"><span class="meta prompt_">2019.02.13 15:15:36.547809 [ 2 ] &#123;&#125; &lt;Information&gt;</span> <span class="symbol">BaseDaemon:</span> Stop SignalListener thread</span><br></pre></td></tr></table></figure>

<h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo -u clickhouse clickhouse-server --config-file=/etc/clickhouse-server/config.xml</span><br></pre></td></tr></table></figure>

<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作:"></a>操作:</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo -u clickhouse clickhouse-server --config-file=/etc/clickhouse-server/config.xml</span><br></pre></td></tr></table></figure>

<h4 id="报错：-1"><a href="#报错：-1" class="headerlink" title="报错："></a>报错：</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Include <span class="keyword">not</span> found: clickhouse_remote_servers</span><br><span class="line">Include <span class="keyword">not</span> found: clickhouse_compression</span><br><span class="line">Couldn<span class="number">&#x27;</span>t save preprocessed config to /var/lib/clickhouse<span class="comment">//preprocessed_configs/config.xml: Access to file denied: /var/lib/clickhouse//preprocessed_configs/config.xml</span></span><br><span class="line">Logging trace to /var/log/clickhouse-server/clickhouse-server.log</span><br><span class="line">Poco::Exception. Code: <span class="number">1000</span>, e.<span class="built_in">code</span>() = <span class="number">13</span>, e.<span class="built_in">displayText</span>() = Access to file denied: /var/log/clickhouse-server/clickhouse-server.log, e.<span class="built_in">what</span>() = Access to file denied</span><br></pre></td></tr></table></figure>

<h4 id="解决：-1"><a href="#解决：-1" class="headerlink" title="解决："></a>解决：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R clickhouse /var/log/clickhouse-server/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>clickHouse</category>
      </categories>
      <tags>
        <tag>clickHouse安装</tag>
      </tags>
  </entry>
  <entry>
    <title>clickHouse基本数据类型</title>
    <url>/2021/11/03/ClickHouse%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="ClickHouse基本数据类型"><a href="#ClickHouse基本数据类型" class="headerlink" title="ClickHouse基本数据类型"></a>ClickHouse基本数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>分为有符号和无符号</p>
<h3 id="有符号"><a href="#有符号" class="headerlink" title="有符号"></a>有符号</h3><ul>
<li>Int8</li>
<li>Int16</li>
<li>Int32</li>
<li>Int64</li>
</ul>
<h3 id="无符号"><a href="#无符号" class="headerlink" title="无符号"></a>无符号</h3><ul>
<li>UInt8</li>
<li>UInt16</li>
<li>UInt32</li>
<li>UInt64</li>
</ul>
<h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><ul>
<li>Float32</li>
<li>Float64</li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>分为可变字符串和定长字符串</p>
<h3 id="变长字符串-String"><a href="#变长字符串-String" class="headerlink" title="变长字符串 String"></a>变长字符串 String</h3><p>字符串可以任意长度的。它可以包含任意的字节集，包含空字节。</p>
<h3 id="定长字符串-FixedString-N"><a href="#定长字符串-FixedString-N" class="headerlink" title="定长字符串 FixedString(N)"></a>定长字符串 FixedString(N)</h3><p>固定长度N的字符串，N必须是严格正数的自然数。当服务器读取包含较少字节的字符串（例如，作为在INSERT查询中传递的输入）时，通过在右侧附加空字节，字符串被填充为N个字节。当服务器读取包含更多字节的字符串时，将返回错误消息。当服务器写入一个字符串（例如，作为SELECT查询的输出）时，空字节不会从字符串末尾删除，而是输出。</p>
<h2 id="日期-Date"><a href="#日期-Date" class="headerlink" title="日期 Date"></a>日期 Date</h2><p>一个Date。以1970-01-01（无符号）以来的天数存储在两个字节中。允许在Unix Epoch刚刚开始之后将值存储到编译阶段（目前，日期到2038年，但可能扩展到2106）由常量定义的上限。最小值输出为0000-00-00。</p>
<p>日期存储没有时区。</p>
<h2 id="时间戳-DateTime"><a href="#时间戳-DateTime" class="headerlink" title="时间戳 DateTime"></a>时间戳 DateTime</h2><p>日期与时间。以四个字节存储为Unix时间戳（无符号）。允许将值存储在与日期类型相同的范围内。最小值输出为0000-00-00 00:00:00。时间储存精度高达1秒（不闰秒）。</p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ul>
<li>Enum8</li>
<li>Enum16</li>
</ul>
<p>Enum8或Enum16。存储为Int8或Int16的一组枚举字符串值。例：</p>
<p>Enum8（’hello’&#x3D; 1，’world’&#x3D; 2）</p>
<h2 id="数组-Array-T"><a href="#数组-Array-T" class="headerlink" title="数组 Array(T)"></a>数组 Array(T)</h2><p>T 类型的数组。T型可以是任何类型，包括数组。我们不推荐使用多维数组，因为它们不被很好的支持（例如，除了内存表之外，你不能在多维数组中存储多维数组）。</p>
<h2 id="元组（T1-T2-…）"><a href="#元组（T1-T2-…）" class="headerlink" title="元组（T1,T2,…）"></a>元组（T1,T2,…）</h2><p>每个元素都有单独的类型</p>
<h2 id="嵌套的数据结构"><a href="#嵌套的数据结构" class="headerlink" title="嵌套的数据结构"></a>嵌套的数据结构</h2>]]></content>
      <categories>
        <category>clickHouse</category>
      </categories>
      <tags>
        <tag>clickHouse</tag>
      </tags>
  </entry>
  <entry>
    <title>dockerFile 文件编写</title>
    <url>/2021/11/06/DockerFile%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><h2 id="使用好处"><a href="#使用好处" class="headerlink" title="使用好处"></a>使用好处</h2><ul>
<li>Dockerfile解放了手工操作很多步骤</li>
<li>Dockerfile保证了环境的统一</li>
</ul>
<h2 id="什么是DockerFile"><a href="#什么是DockerFile" class="headerlink" title="什么是DockerFile"></a>什么是DockerFile</h2><p>​        Dockerfile中文名叫<strong>镜像描述文件</strong>，是一个包含用于组合镜像目录的文本文档，也可以叫“脚本”。他通过读取Dockerfile中的指令安装步骤自动生成镜像。</p>
<h2 id="DockerFile命令"><a href="#DockerFile命令" class="headerlink" title="DockerFile命令"></a>DockerFile命令</h2><h3 id="镜像构建命令"><a href="#镜像构建命令" class="headerlink" title="镜像构建命令"></a>镜像构建命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t 机构/镜像名称&lt;:tags&gt; Dockerfile目录</span><br><span class="line"># tags可以对镜像打版本标签  目录可以使用绝对和相对目录</span><br></pre></td></tr></table></figure>

<h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 制作基准镜像</span><br><span class="line">FROM 镜像</span><br><span class="line"># 比如我们要发布一个应用到tomcat里，那么的第一步就是FROM tomcat</span><br><span class="line">FROM tomcat&lt;:tags&gt;</span><br></pre></td></tr></table></figure>

<h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 类似于Linux中的cd命令，但是他比cd高级的地方在于，我先cd，发现没有这个目录，我就自动创建出来，然后在cd进去</span><br><span class="line">WORKDIR /usr/local/testdir</span><br></pre></td></tr></table></figure>

<h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将1.txt拷贝到根目录下。它不仅仅能拷贝单个文件，还支持Go语言风格的通配符，比如如下：</span><br><span class="line">COPY 1.txt /</span><br><span class="line"># 拷贝所有 abc 开头的文件到testdir目录下</span><br><span class="line">COPY abc* /testdir/</span><br><span class="line"># ? 是单个字符的占位符，比如匹配文件 abc1.log</span><br><span class="line">COPY abc?.log /testdir/</span><br></pre></td></tr></table></figure>

<h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将1.txt拷贝到根目录的abc目录下。若/abc不存在，则会自动创建</span><br><span class="line">ADD 1.txt /abc</span><br><span class="line"># 将test.tar.gz解压缩然后将解压缩的内容拷贝到/home/work/test</span><br><span class="line">ADD test.tar.gz /home/work/test</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>docker官方建议当要从远程复制文件时，尽量用curl&#x2F;wget命令来代替ADD。因为用ADD的时候会创建更多的镜像层。镜像层的size也大。</li>
<li>二者都是只复制目录中的文件，而不包含目录本身。</li>
<li>COPY能干的事ADD都能干，甚至还有附加功能。</li>
<li>ADD可以支持拷贝的时候顺带解压缩文件，以及添加远程文件（不在本宿主机上的文件）。</li>
<li>只是文件拷贝的话可以用COPY，有额外操作可以用ADD代替。</li>
</ul>
</blockquote>
<h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置环境常量，方便下文引用，比如：</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8</span><br><span class="line"># 引用上面的常量，下面的RUN指令可以先不管啥意思，目的是想说明下文可以通过$&#123;xxx&#125;的方式引用</span><br><span class="line">RUN $&#123;JAVA_HOME&#125;/bin/java -jar xxx.jar</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ENV设置的常量，其他地方都可以用${xxx}来引用，将来改的时候只改ENV的变量内容就行。</p>
</blockquote>
<h3 id="运行指令"><a href="#运行指令" class="headerlink" title="运行指令"></a>运行指令</h3><h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><ul>
<li>SHELL命令格式</li>
</ul>
<p>比如</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">RUN yum -y install vim</span><br></pre></td></tr></table></figure>

<ul>
<li>EXEC命令格式</li>
</ul>
<p>比如</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">RUN [&quot;yum&quot;,&quot;-y&quot;,&quot;install&quot;,&quot;vim&quot;]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>也就是说shell会创建子进程执行，EXEC不会创建子进程。</p>
</blockquote>
<h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p>RUN指令是在构建镜像时运行，在构建时能修改镜像内部的文件。</p>
<h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>容器创建时执行，而不是镜像构建时执行。</p>
<p>在容器启动的时候执行此命令，且Dockerfile中只有最后一个ENTRYPOINT会被执行，推荐用EXEC格式。</p>
<h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><ul>
<li>容器启动时执行，而不是镜像构建时执行。</li>
<li>启动时额外添加命令，CMD将失效</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title>clickHouse数据库引擎</title>
    <url>/2021/11/03/ClickHouse%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h1 id="ClickHouse数据库引擎"><a href="#ClickHouse数据库引擎" class="headerlink" title="ClickHouse数据库引擎"></a>ClickHouse数据库引擎</h1><p>数据库引擎用来处理数据表</p>
<p>默认情况下，ClickHouse使用Atomic数据库引擎。它提供了可配置的table engines和SQL dialect。</p>
<p>您还可以使用以下数据库引擎：</p>
<ul>
<li><a href="https://clickhouse.com/docs/zh/engines/database-engines/mysql/">MySQL</a></li>
<li><a href="https://clickhouse.com/docs/zh/engines/database-engines/materialize-mysql/">MaterializeMySQL</a></li>
<li><a href="https://clickhouse.com/docs/zh/engines/database-engines/lazy/">Lazy</a></li>
<li><a href="https://clickhouse.com/docs/zh/engines/database-engines/atomic/">Atomic</a></li>
<li><a href="https://clickhouse.com/docs/zh/engines/database-engines/postgresql/">PostgreSQL</a></li>
<li><a href="https://clickhouse.com/docs/zh/engines/database-engines/materialized-postgresql/">MaterializedPostgreSQL</a></li>
<li><a href="https://clickhouse.com/docs/zh/engines/database-engines/replicated/">Replicated</a></li>
</ul>
<h2 id="Atomic"><a href="#Atomic" class="headerlink" title="Atomic"></a>Atomic</h2><p>它支持非阻塞的DROP TABLE和RENAME TABLE查询和原子的EXCHANGE TABLES t1 AND t2查询。默认情况下使用Atomic数据库引擎。</p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE test[ ENGINE <span class="operator">=</span> <span class="keyword">Atomic</span>];</span><br></pre></td></tr></table></figure>

<h3 id="Table-UUID"><a href="#Table-UUID" class="headerlink" title="Table UUID"></a>Table UUID</h3><p>数据库Atomic中的所有表都有唯一的UUID，并将数据存储在目录&#x2F;clickhouse_path&#x2F;store&#x2F;xxx&#x2F;xxxyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy&#x2F;，其中xxxyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy是该表的UUID。</p>
<p>通常，UUID是自动生成的，但用户也可以在创建表时以相同的方式显式指定UUID(不建议这样做)。可以使用 show_table_uuid_in_table_create_query_if_not_nil设置。显示UUID的使用SHOW CREATE查询。例如:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> name UUID <span class="string">&#x27;28f1c61c-2970-457a-bffe-454156ddcfef&#x27;</span> (n UInt64) ENGINE <span class="operator">=</span> ...;</span><br></pre></td></tr></table></figure>

<h3 id="RENAME-TABLES"><a href="#RENAME-TABLES" class="headerlink" title="RENAME TABLES"></a>RENAME TABLES</h3><p>RENAME查询是在不更改UUID和移动表数据的情况下执行的。这些查询不会等待使用表的查询完成，而是会立即执行。</p>
<h3 id="DROP-x2F-DETACH-TABLES"><a href="#DROP-x2F-DETACH-TABLES" class="headerlink" title="DROP&#x2F;DETACH TABLES"></a>DROP&#x2F;DETACH TABLES</h3><p>在DROP TABLE上，不删除任何数据，数据库Atomic只是通过将元数据移动到&#x2F;clickhouse_path&#x2F;metadata_dropped&#x2F;将表标记为已删除，并通知后台线程。最终表数据删除前的延迟由database_atomic_delay_before_drop_table_sec设置指定。</p>
<p>可以使用SYNC修饰符指定同步模式。使用database_atomic_wait_for_drop_and_detach_synchronously设置执行此操作。在本例中，DROP等待运行 SELECT, INSERT和其他使用表完成的查询。表在不使用时将被实际删除。</p>
<h3 id="EXCHANGE-TABLES"><a href="#EXCHANGE-TABLES" class="headerlink" title="EXCHANGE TABLES"></a>EXCHANGE TABLES</h3><p>EXCHANGE以原子方式交换表。因此，不是这种非原子操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RENAME TABLE new_table TO tmp, old_table TO new_table, tmp TO old_table;</span><br></pre></td></tr></table></figure>


<p>因为中间用到了临时表名，容易出现意外，此时可以使用一个原子查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXCHANGE TABLES new_table AND old_table;</span><br></pre></td></tr></table></figure>



<h2 id="LAZY"><a href="#LAZY" class="headerlink" title="LAZY"></a>LAZY</h2><p>在最后一次访问之后，只在RAM中保存expiration_time_in_seconds秒。只能用于*Log表。</p>
<p>它是为存储许多小的*Log表而优化的，对于这些表，访问之间有很长的时间间隔。</p>
<h3 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE testlazy ENGINE <span class="operator">=</span> Lazy(expiration_time_in_seconds);</span><br></pre></td></tr></table></figure>



<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>MySQL引擎用于将远程的MySQL服务器中的表映射到ClickHouse中，并允许您对表进行INSERT和SELECT查询，以方便您在ClickHouse与MySQL之间进行数据交换</p>
<p>MySQL数据库引擎会将对其的查询转换为MySQL语法并发送到MySQL服务器中，因此您可以执行诸如SHOW TABLES或SHOW CREATE TABLE之类的操作。</p>
<p>但您无法对其执行以下操作：</p>
<ul>
<li>RENAME</li>
<li>CREATE TABLE</li>
<li>ALTER</li>
</ul>
<h3 id="创建数据库-2"><a href="#创建数据库-2" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] db_name [<span class="keyword">ON</span> CLUSTER cluster]</span><br><span class="line">ENGINE <span class="operator">=</span> MySQL(<span class="string">&#x27;host:port&#x27;</span>, [<span class="string">&#x27;database&#x27;</span> <span class="operator">|</span> database], <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="引擎参数"><a href="#引擎参数" class="headerlink" title="引擎参数"></a>引擎参数</h3><ul>
<li>host:port — MySQL服务地址</li>
<li>database — MySQL数据库名称</li>
<li>user — MySQL用户名</li>
<li>password — MySQL用户密码</li>
</ul>
<h3 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h3><table>
<thead>
<tr>
<th>MySQL</th>
<th>ClickHouse</th>
</tr>
</thead>
<tbody><tr>
<td>UNSIGNED TINYINT</td>
<td>UInt8</td>
</tr>
<tr>
<td>TINYINT</td>
<td>Int8</td>
</tr>
<tr>
<td>UNSIGNED SMALLINT</td>
<td>UInt16]</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>Int16</td>
</tr>
<tr>
<td>UNSIGNED INT, UNSIGNED MEDIUMINT</td>
<td>UInt32</td>
</tr>
<tr>
<td>INT, MEDIUMINT</td>
<td>Int32</td>
</tr>
<tr>
<td>UNSIGNED BIGINT</td>
<td>UInt64</td>
</tr>
<tr>
<td>BIGINT</td>
<td>Int64</td>
</tr>
<tr>
<td>FLOAT</td>
<td>Float32</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>Float64</td>
</tr>
<tr>
<td>DATE</td>
<td>Date</td>
</tr>
<tr>
<td>DATETIME, TIMESTAMP</td>
<td>DateTime</td>
</tr>
<tr>
<td>BINARY</td>
<td>FixedString</td>
</tr>
</tbody></table>
<p>其他的MySQL数据类型将全部都转换为String</p>
<h1 id="表引擎"><a href="#表引擎" class="headerlink" title="表引擎"></a>表引擎</h1><p>表引擎（即表的类型）决定了：</p>
<ul>
<li>数据的存储方式和位置，写到哪里以及从哪里读取数据</li>
<li>支持哪些查询以及如何支持。</li>
<li>并发数据访问。</li>
<li>索引的使用（如果存在）。</li>
<li>是否可以执行多线程请求。</li>
<li>数据复制参数。</li>
</ul>
<h2 id="一、MergeTree系列引擎"><a href="#一、MergeTree系列引擎" class="headerlink" title="一、MergeTree系列引擎"></a>一、MergeTree系列引擎</h2><p>MergeTree系列的表引擎支持<strong>主键索引、数据分区、数据副本和数据采样</strong>这些特性，同时也只有此系列的表引擎支持ALTER相关操作</p>
<p>特点：</p>
<ul>
<li>存储按主键排序的数据</li>
<li>如果指定了分区键，则可以使用分区</li>
<li>数据复制支持：ReplacedMergeTree表族提供数据复制。</li>
<li>数据采样支持</li>
</ul>
<h2 id="二、Log系列引擎"><a href="#二、Log系列引擎" class="headerlink" title="二、Log系列引擎"></a>二、Log系列引擎</h2><p>Log家族具有最小功能的<strong>轻量级引擎</strong>。当您需要<strong>快速写入许多小表（最多约100w行）并在以后整体读取它们时</strong>，该类型的引擎是最有效的。</p>
<h3 id="共同属性"><a href="#共同属性" class="headerlink" title="共同属性"></a>共同属性</h3><p>引擎：</p>
<ul>
<li><p>数据存储在磁盘上。</p>
</li>
<li><p>写入时将数据追加在文件末尾。</p>
</li>
<li><p>不支持<a href="https://clickhouse.com/docs/zh/engines/table-engines/log-family/#alter-mutations">突变</a>操作。</p>
</li>
<li><p>不支持索引。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这意味着 `SELECT` 在范围查询时效率不高。</span><br></pre></td></tr></table></figure>
</li>
<li><p>非原子地写入数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果某些事情破坏了写操作，例如服务器的异常关闭，你将会得到一张包含了损坏数据的表。</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1、TinyLog引擎"><a href="#1、TinyLog引擎" class="headerlink" title="1、TinyLog引擎"></a>1、TinyLog引擎</h3><ul>
<li>将数据存储在磁盘上，没有索引，没有标记块</li>
<li>每列都存储在单独的压缩文件中</li>
<li>数据写入时追加写到文件末尾</li>
<li>该引擎没有并发控制，不允许同时读写</li>
</ul>
<h3 id="2、StripeLog引擎-数据分块列在一起"><a href="#2、StripeLog引擎-数据分块列在一起" class="headerlink" title="2、StripeLog引擎(数据分块列在一起)"></a>2、StripeLog引擎(数据分块列在一起)</h3><h3 id="3、Log引擎-数据分块记录偏移量"><a href="#3、Log引擎-数据分块记录偏移量" class="headerlink" title="3、Log引擎(数据分块记录偏移量)"></a>3、Log引擎(数据分块记录偏移量)</h3><ul>
<li>*.bin存储每个字段的数据</li>
<li>mark.mrk数据块标记</li>
<li>支持多线程处理</li>
<li>并发读写</li>
</ul>
<h2 id="三、外部存储引擎"><a href="#三、外部存储引擎" class="headerlink" title="三、外部存储引擎"></a>三、外部存储引擎</h2><h3 id="1、HDFS引擎"><a href="#1、HDFS引擎" class="headerlink" title="1、HDFS引擎"></a>1、HDFS引擎</h3><p>clickhouse可以直接从HDFS中指定的目录下加载数据，自己不存储数据，仅仅读取数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">engine<span class="operator">=</span>HDFS(<span class="string">&#x27;hdfs://linux01:8020/ck/test/*&#x27;</span>,<span class="string">&#x27;csv&#x27;</span>)</span><br><span class="line"><span class="operator">-</span>clickhouse支持的文件格式有CSV、TSV、JSON等</span><br></pre></td></tr></table></figure>

<h3 id="2、mysql引擎"><a href="#2、mysql引擎" class="headerlink" title="2、mysql引擎"></a>2、mysql引擎</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">engine=MYSQL(&#x27;localhost:3306&#x27;,&#x27;test&#x27;,&#x27;test&#x27;,&#x27;root&#x27;,&#x27;123456&#x27;)</span><br></pre></td></tr></table></figure>

<h3 id="3、File引擎"><a href="#3、File引擎" class="headerlink" title="3、File引擎"></a>3、File引擎</h3><h2 id="四、内部引擎"><a href="#四、内部引擎" class="headerlink" title="四、内部引擎"></a>四、内部引擎</h2><h3 id="1、Memory"><a href="#1、Memory" class="headerlink" title="1、Memory"></a>1、Memory</h3><h3 id="2、Set"><a href="#2、Set" class="headerlink" title="2、Set"></a>2、Set</h3><h3 id="3、Buffer"><a href="#3、Buffer" class="headerlink" title="3、Buffer"></a>3、Buffer</h3>]]></content>
      <categories>
        <category>clickHouse</category>
      </categories>
      <tags>
        <tag>clickHouse</tag>
        <tag>引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>docker的安装与使用</title>
    <url>/2011/11/04/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><hr>
<h4 id="环境不一致"><a href="#环境不一致" class="headerlink" title="环境不一致"></a>环境不一致</h4><blockquote>
<p>我本地运行没问题啊：由于环境不一致，导致相同的程序，运行结果却不一致。</p>
</blockquote>
<h4 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h4><blockquote>
<p>哪个哥们又写死循环了，怎么这么卡：在多用户的操作系统下，会因为其他用户的操作失误影响到你自己编些的程序。</p>
</blockquote>
<h4 id="弹性伸缩"><a href="#弹性伸缩" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h4><blockquote>
<p>淘宝在双11的时候，用户量暴增：需要很多很多的运维人员去增加部署的服务器，运维成本过高的问题。</p>
</blockquote>
<h4 id="学习成本"><a href="#学习成本" class="headerlink" title="学习成本"></a>学习成本</h4><blockquote>
<p>学习一门技术，得先安装啊：学习每一门技术都要先安装响应的软件，但是还有他所依赖的各种环境，安装软件成本快高过学习成本啦。</p>
</blockquote>
<h3 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h3><hr>
<h4 id="Docker的由来"><a href="#Docker的由来" class="headerlink" title="Docker的由来"></a>Docker的由来</h4><blockquote>
<p>一帮年轻人创业，创办了一家公司，2010年的专门做PAAS平台。但是到了2013年的时候，像亚马逊，微软，Google都开始做PAAS平台。到了2013年，公司资金链断裂，不得不倒闭，于是将公司内的核心技术对外开源，核心技术就是Docker。由于开源了Docker，到了2014年的时候，得到了C轮的融资 $4000W，2015年的时候，得到了D轮的融资.$9500W。于是公司开始全神贯注的维护Docker。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Docker主要作者-所罗门</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2021/11/04/64EQf79AyaI1Mw8.png" alt="1586340594252"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">Docker的作者已经离开了维护Docker的团队</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2021/11/04/BkrAmDWo9OulvQK.png" alt="1586340639934"></td>
</tr>
</tbody></table>
<h4 id="Docker的思想"><a href="#Docker的思想" class="headerlink" title="Docker的思想"></a>Docker的思想</h4><blockquote>
<ul>
<li><p>集装箱：会将所有需要的内容放到不同的集装箱中，谁需要这些环境就直接拿到这个集装箱就可以了。</p>
</li>
<li><p>标准化：</p>
<ul>
<li>运输的标准化：Docker有一个码头，所有上传的集装箱都放在了这个码头上，当谁需要某一个环境，就直接指派大海豚去搬运这个集装箱就可以了。</li>
<li>命令的标准化：Docker提供了一些列的命令，帮助我们去获取集装箱等等操作。</li>
<li>提供了REST的API：衍生出了很多的图形化界面，Rancher。</li>
</ul>
</li>
<li><p>隔离性：Docker在运行集装箱内的内容时，会在Linux的内核中，单独的开辟一片空间，这片空间不会影响到其他程序。</p>
</li>
<li><p>中央仓库|注册中心：超级码头，上面放的就是集装箱</p>
</li>
<li><p>镜像：就是集装箱</p>
</li>
<li><p>容器：运行起来的镜像</p>
</li>
</ul>
</blockquote>
<h3 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h3><hr>
<h4 id="下载Docker依赖的环境"><a href="#下载Docker依赖的环境" class="headerlink" title="下载Docker依赖的环境"></a>下载Docker依赖的环境</h4><blockquote>
<p>想安装Docker，需要先将依赖的环境全部下载，就像Maven依赖JDK一样</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>yum -y install yum-utils device-mapper-persistent-data lvm2</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://i.loli.net/2021/11/04/Lbq9WYSNTDjIiVE.png" alt="image-20200928113011403"></td>
</tr>
<tr>
<td>成功如下图：<img src="https://i.loli.net/2021/11/04/oOhSHEbkeu5RKvc.png" alt="image-20200928113130713"></td>
</tr>
</tbody></table>
<h4 id="指定Docker镜像源"><a href="#指定Docker镜像源" class="headerlink" title="指定Docker镜像源"></a>指定Docker镜像源</h4><blockquote>
<p>默认下载Docker会去国外服务器下载，速度较慢，我们可以设置为阿里云镜像源，速度更快</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>执行上述命令，结果如下</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://i.loli.net/2021/11/04/NQzATMwChE5ijcp.png" alt="image-20200928113236224"></td>
</tr>
</tbody></table>
<h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><blockquote>
<p>依然采用yum的方式安装</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum makacache fast</span><br><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>依次执行上述命令，结果如下</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://i.loli.net/2021/11/04/6Pf3UbktqAvmOGM.png" alt="image-20200928113408324" style="zoom:80%;" /></td>
</tr>
<tr>
<td>耐心等待下载，需要一定的时间【完全看网速】<br /><img src="https://i.loli.net/2021/11/04/e4afvLBsNkuYE6H.png" alt="image-20200928113543523"></td>
</tr>
</tbody></table>
<h4 id="启动Docker并测试"><a href="#启动Docker并测试" class="headerlink" title="启动Docker并测试"></a>启动Docker并测试</h4><blockquote>
<p>安装成功后，需要手动启动，设置为开机自启，并测试一下Docker</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动Docker服务</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 设置开机自动启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="comment"># 测试[如果失败，多试几次，再不行，重启一下Linux系统（reboot指令）]</span></span><br><span class="line">docker run hello-world</span><br><span class="line"><span class="comment"># 输入docker命令，有参数命令列表出现，就是安装成功了</span></span><br></pre></td></tr></table></figure>





<h3 id="Docker的中央仓库【重点】"><a href="#Docker的中央仓库【重点】" class="headerlink" title="Docker的中央仓库【重点】"></a>Docker的中央仓库【<code>重点</code>】</h3><hr>
<blockquote>
<ul>
<li><p>Docker官方的中央仓库：这个仓库是镜像最全的，但是下载速度较慢。</p>
<p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
</li>
<li><p>国内的镜像网站：网易蜂巢，daoCloud等，下载速度快，但是镜像相对不全。</p>
<p><a href="https://c.163yun.com/hub#/home">https://c.163yun.com/hub#/home</a></p>
<p><a href="http://hub.daocloud.io/">http://hub.daocloud.io/</a>     （推荐使用）</p>
</li>
<li><p>在公司内部会采用私服的方式拉取镜像，需要添加配置，如下……</p>
</li>
</ul>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 需要创建/etc/docker/daemon.json，并添加如下内容</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ip:port&quot;</span><span class="punctuation">]</span>   </span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"># 重启两个服务</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>



<h3 id="镜像的操作【重点】"><a href="#镜像的操作【重点】" class="headerlink" title="镜像的操作【重点】"></a>镜像的操作【<code>重点</code>】</h3><hr>
<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><blockquote>
<p>从中央仓库拉取镜像到本地</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名称[:tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举个栗子：docker pull daocloud.io/library/tomcat:8.5.15-jre8</span></span><br></pre></td></tr></table></figure>





<h4 id="查看本地全部镜像"><a href="#查看本地全部镜像" class="headerlink" title="查看本地全部镜像"></a>查看本地全部镜像</h4><blockquote>
<p>查看本地已经安装过的镜像信息，包含标识，名称，版本，更新时间，大小</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>



<h4 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h4><blockquote>
<p>镜像会占用磁盘空间，可以直接手动删除，表示通过查看获取</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除镜像，该镜像没有运行成一个容器</span></span><br><span class="line">docker rmi 镜像的标识[IMAGE ID]</span><br></pre></td></tr></table></figure>



<h4 id="镜像的导入导出"><a href="#镜像的导入导出" class="headerlink" title="镜像的导入导出"></a>镜像的导入导出</h4><blockquote>
<p>如果因为网络原因可以通过硬盘的方式传输镜像，虽然不规范，但是有效，但是这种方式导出的镜像名称和版本都是null，需要手动修改</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将本地的镜像导出</span></span><br><span class="line">docker save -o 导出的路径/镜像文件名 镜像<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载本地的镜像文件</span></span><br><span class="line">docker load -i 镜像文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像名称</span></span><br><span class="line">docker tag 镜像<span class="built_in">id</span> 新镜像名称:版本</span><br></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker save -o ./tomcat8.images 镜像<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">docker load -i tomcat8.image</span><br><span class="line"></span><br><span class="line">docker tag b8dfe9ade316 tomcat:8.5</span><br></pre></td></tr></table></figure>





<h3 id="容器操作【重点】"><a href="#容器操作【重点】" class="headerlink" title="容器操作【重点】"></a>容器操作【<code>重点</code>】</h3><hr>
<h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><blockquote>
<p>运行容器需要指定具体镜像，如果镜像不存在，会直接下载</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单操作，不推荐使用</span></span><br><span class="line">docker run 镜像的标识|镜像名称[:tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用的参数</span></span><br><span class="line">docker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识|镜像名称[:tag]</span><br><span class="line"><span class="comment"># -d：代表在后台运行容器</span></span><br><span class="line"><span class="comment"># -p 宿主机端口:容器端口：为了映射当前Linux的端口和容器的端口 [宿主机就是Linux系统]</span></span><br><span class="line"><span class="comment"># --name 容器名称：指定容器的名称</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行tomcat容器</span></span><br><span class="line">docker run -d -p 8080:8080 --name tomcat8.5 b8dfe9ade316</span><br></pre></td></tr></table></figure>



<h4 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h4><blockquote>
<p>查看全部正在运行的容器信息</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps [-qa]</span><br><span class="line"><span class="comment"># -a：查看全部的容器，包括没有运行</span></span><br><span class="line"><span class="comment"># -q：只查看容器的标识</span></span><br></pre></td></tr></table></figure>



<h4 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h4><blockquote>
<p>查看容器日志，以查看容器运行的信息</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker logs -f 容器<span class="built_in">id</span></span><br><span class="line"><span class="comment"># -f：可以滚动查看日志的最后几行</span></span><br></pre></td></tr></table></figure>



<h4 id="进入容器内容部"><a href="#进入容器内容部" class="headerlink" title="进入容器内容部"></a>进入容器内容部</h4><blockquote>
<p>可以进入容器内部进行操作</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span> bash</span><br><span class="line"><span class="comment">#注意:在容器内部只能使用标准的Linux命令，譬如ll指令就无法使用，识别不了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>



<h4 id="复制内容到容器"><a href="#复制内容到容器" class="headerlink" title="复制内容到容器"></a>复制内容到容器</h4><blockquote>
<p>将宿主机的文件复制到容器内部的指定目录</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> 文件名称 容器<span class="built_in">id</span>:容器内部路径</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> hello.html 47bc97f4d7bf:/usr/local/tomcat/webapps/ROOT</span><br></pre></td></tr></table></figure>



<h4 id="重启-amp-启动-amp-停止-amp-删除容器"><a href="#重启-amp-启动-amp-停止-amp-删除容器" class="headerlink" title="重启&amp;启动&amp;停止&amp;删除容器"></a>重启&amp;启动&amp;停止&amp;删除容器</h4><blockquote>
<p>容器的启动，停止，删除等操作，后续经常会使用到</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新启动容器</span></span><br><span class="line">docker restart 容器<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动停止运行的容器</span></span><br><span class="line">docker start 容器<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止指定的容器（删除容器前，需要先停止容器）</span></span><br><span class="line">docker stop 容器<span class="built_in">id</span></span><br><span class="line"><span class="comment"># 停止全部容器</span></span><br><span class="line">docker stop $(docker ps -qa)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定容器</span></span><br><span class="line">docker <span class="built_in">rm</span> 容器<span class="built_in">id</span></span><br><span class="line"><span class="comment"># 删除全部容器</span></span><br><span class="line">docker <span class="built_in">rm</span> $(docker ps -qa)</span><br><span class="line"></span><br><span class="line"><span class="comment">#上述命令执行成功，会返回容器ID</span></span><br></pre></td></tr></table></figure>





<h3 id="Docker应用"><a href="#Docker应用" class="headerlink" title="Docker应用"></a>Docker应用</h3><hr>
<h4 id="Docker安装Tomcat"><a href="#Docker安装Tomcat" class="headerlink" title="Docker安装Tomcat"></a>Docker安装Tomcat</h4><blockquote>
<p>运行Tomcat容器，为部署SSM工程做准备</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name tomcat daocloud.io/library/tomcat:8.5.15-jre8</span><br></pre></td></tr></table></figure>



<h4 id="Docker安装MySQL"><a href="#Docker安装MySQL" class="headerlink" title="Docker安装MySQL"></a>Docker安装MySQL</h4><blockquote>
<p>运行MySQL容器，为部署SSM工程做准备</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root daocloud.io/library/mysql:5.7.4</span><br><span class="line"><span class="comment"># -e MYSQL_ROOT_PASSWORD=root    为mysql的root用户指定密码</span></span><br></pre></td></tr></table></figure>



<h4 id="部署SSM工程"><a href="#部署SSM工程" class="headerlink" title="部署SSM工程"></a>部署SSM工程</h4><blockquote>
<ul>
<li>修改SSM工程环境，设置为Linux中Docker容器的信息</li>
<li>通过Maven的package重新打成war包</li>
<li>将Windows下的war包复制到Linux中</li>
<li>通过docker命令将宿主机的war包复制到容器内部</li>
<li>测试访问SSM工程</li>
</ul>
</blockquote>
<h3 id="数据卷【重点】"><a href="#数据卷【重点】" class="headerlink" title="数据卷【重点】"></a>数据卷【<code>重点</code>】</h3><hr>
<blockquote>
<p>为了部署SSM的工程，需要使用到cp的命令将宿主机内的ssm.war文件复制到容器内部。</p>
<p>数据卷：将宿主机【Linux】的一个目录映射到容器的一个目录中。</p>
<p>可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会跟着一起改变。</p>
</blockquote>
<h4 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h4><blockquote>
<p>创建数据卷之后，默认会存放在一个目录下 &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;数据卷名称&#x2F;_data</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume create 数据卷名称</span><br></pre></td></tr></table></figure>



<h4 id="查看数据卷详情"><a href="#查看数据卷详情" class="headerlink" title="查看数据卷详情"></a>查看数据卷详情</h4><blockquote>
<p>查看数据卷的详细信息，可以查询到存放路径，创建时间等等</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume inspect 数据卷名称</span><br></pre></td></tr></table></figure>



<h4 id="查看全部数据卷"><a href="#查看全部数据卷" class="headerlink" title="查看全部数据卷"></a>查看全部数据卷</h4><blockquote>
<p>查看全部数据卷信息</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>



<h4 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h4><blockquote>
<p>删除指定数据卷</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">rm</span> 数据卷名称</span><br></pre></td></tr></table></figure>



<h4 id="容器映射数据卷"><a href="#容器映射数据卷" class="headerlink" title="容器映射数据卷"></a>容器映射数据卷</h4><blockquote>
<p>映射有两种方式：</p>
<ul>
<li>通过数据卷名称映射，如果数据卷不存在。Docker会帮你自动创建，会将容器内部自带的文件，存储在默认的存放路径中。</li>
<li>通过路径映射数据卷，直接指定一个路径作为数据卷的存放位置。但是这个路径下是空的。</li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过数据卷名称映射</span></span><br><span class="line">docker run -v 数据卷名称:容器内部的路径 镜像<span class="built_in">id</span></span><br><span class="line"><span class="comment"># 通过路径映射数据卷[推荐使用]</span></span><br><span class="line">docker run -v 路径:容器内部的路径 镜像<span class="built_in">id</span></span><br></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推荐在使用镜像启动容器时，就指定数据卷名称和映射</span></span><br><span class="line">docker run -d -p 8081:8080 --name tomcat8081 -v v_tomcat8081:/usr/local/tomcat/webapps 镜像ID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一  映射路径为 /opt/tomcat8082/webapps，相当于tomcat部署项目的路径</span></span><br><span class="line">docker run -d -p 8082:8080 --name tomcat8082 -v /opt/tomcat8082/webapps:/usr/local/tomcat/webapps 镜像ID</span><br></pre></td></tr></table></figure>





<h3 id="Dockerfile自定义镜像【重点】"><a href="#Dockerfile自定义镜像【重点】" class="headerlink" title="Dockerfile自定义镜像【重点】"></a>Dockerfile自定义镜像【<code>重点</code>】</h3><hr>
<blockquote>
<p>我们可以从中央仓库下载一个镜像，也可以自己手动去制作一个镜像，需要通过Dockerfile去指定自定义镜像的信息</p>
</blockquote>
<h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><blockquote>
<p>创建自定义镜像就需要创建一个Dockerfile，如下为Dockerfile的语言</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">from: 指定当前自定义镜像依赖的环境</span><br><span class="line">copy: 将相对路径下的内容复制到自定义镜像中</span><br><span class="line">workdir: 声明镜像的默认工作目录</span><br><span class="line">run: 执行的命令，可以编写多个</span><br><span class="line">cmd: 需要执行的命令（在workdir下执行的，cmd可以写多个，只以最后一个为准）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举个例子，制作SSM容器镜像，而且ssm.war要放在Dockerfile的同级目录下</span></span><br><span class="line">from daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line">copy ssm.war /usr/local/tomcat/webapps</span><br><span class="line"><span class="comment"># 将 ssm.war 复制到tomcat镜像的/usr/local/tomcat/webapps下</span></span><br></pre></td></tr></table></figure>



<h4 id="通过Dockerfile制作镜像"><a href="#通过Dockerfile制作镜像" class="headerlink" title="通过Dockerfile制作镜像"></a>通过Dockerfile制作镜像</h4><blockquote>
<p>编写完Dockerfile后需要通过命令将其制作为镜像，并且要在Dockerfile的当前目录下，之后即可在镜像中查看到指定的镜像信息，注意最后的 <a href="">.</a> </p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t 镜像名称[:tag] .</span><br></pre></td></tr></table></figure>



<h3 id="Docker-Compose【重点】"><a href="#Docker-Compose【重点】" class="headerlink" title="Docker-Compose【重点】"></a>Docker-Compose【<code>重点</code>】</h3><hr>
<blockquote>
<p>之前运行一个镜像，需要添加大量的参数,可以通过Docker-Compose编写这些参数。而且Docker-Compose可以帮助我们批量的管理容器。这些信息只需要通过一个docker-compose.yml文件去维护即可。</p>
</blockquote>
<h4 id="下载并安装Docker-Compose"><a href="#下载并安装Docker-Compose" class="headerlink" title="下载并安装Docker-Compose"></a>下载并安装Docker-Compose</h4><h5 id="下载Docker-Compose"><a href="#下载Docker-Compose" class="headerlink" title="下载Docker-Compose"></a>下载Docker-Compose</h5><blockquote>
<p>去github官网搜索docker-compose，下载1.24.1版本的Docker-Compose</p>
<p>下载路径：<a href="">https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</a></p>
</blockquote>
<h5 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker-Compose"></a>安装Docker-Compose</h5><blockquote>
<p>将主机<code>docker-compose-Linux-x86_64</code>文件复制到Linux的<code>/usr/local/bin</code>目录下</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.修改名称</span></span><br><span class="line"><span class="built_in">mv</span> docker-compose-Linux-x86_64 docker-compose</span><br><span class="line"><span class="comment">#2.授权</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/bin</span><br><span class="line"><span class="built_in">chmod</span> 777 docker-compose</span><br><span class="line"><span class="comment">#3.配置环境变量</span></span><br><span class="line">vi /etc/profile</span><br><span class="line">	<span class="comment"># 添加内容： export PATH=$JAVA_HOME/bin:/usr/local/bin:$PATH</span></span><br><span class="line"><span class="comment">#4.重新加载配置文件</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>



<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><blockquote>
<p>在任意目录下输入docker-compose</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">测试效果</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://i.loli.net/2021/11/04/vaeWzLg9IVZT2lU.png" alt="1586420176720"></td>
</tr>
</tbody></table>
<h4 id="Docker-Compose管理MySQL和Tomcat容器"><a href="#Docker-Compose管理MySQL和Tomcat容器" class="headerlink" title="Docker-Compose管理MySQL和Tomcat容器"></a>Docker-Compose管理MySQL和Tomcat容器</h4><blockquote>
<p>yml文件以key: value方式来指定配置信息</p>
<p>多个配置信息以换行+缩进的方式来区分</p>
<p>在docker-compose.yml文件中，不要使用制表符</p>
<p>存放到 &#x2F;opt&#x2F;docker_mysql_tomcat&#x2F; 目录下</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span>           <span class="comment"># 服务的名称</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>   <span class="comment"># 代表只要docker启动，那么这个容器就跟着一起启动</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/mysql:5.7.4</span>  <span class="comment"># 指定镜像路径</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span>  <span class="comment"># 指定容器名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span>   <span class="comment">#  指定端口号的映射</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span>   <span class="comment"># 指定MySQL的ROOT用户登录密码</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>        <span class="comment"># 指定时区</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/opt/docker_mysql_tomcat/mysql_data:/var/lib/mysql</span>   <span class="comment"># 映射数据卷</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/tomcat:8.5.15-jre8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_mysql_tomcat/tomcat_webapps:/usr/local/tomcat/webapps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_mysql_tomcat/tomcat_logs:/usr/local/tomcat/logs</span></span><br></pre></td></tr></table></figure>



<h4 id="使用docker-compose命令管理容器"><a href="#使用docker-compose命令管理容器" class="headerlink" title="使用docker-compose命令管理容器"></a>使用docker-compose命令管理容器</h4><blockquote>
<p>在使用docker-compose的命令时 ，默认会在当前目录下找docker-compose.yml文件</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 基于docker-compose.yml启动管理的容器</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 关闭并删除容器</span></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 开启|关闭|重启已经存在的由docker-compose维护的容器</span></span><br><span class="line">docker-compose start|stop|restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 查看由docker-compose管理的容器</span></span><br><span class="line">docker-compose ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 查看日志</span></span><br><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure>



<h4 id="docker-compose配合Dockerfile使用"><a href="#docker-compose配合Dockerfile使用" class="headerlink" title="docker-compose配合Dockerfile使用"></a>docker-compose配合Dockerfile使用</h4><blockquote>
<p>使用docker-compose.yml文件以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器</p>
</blockquote>
<h5 id="docker-compose文件"><a href="#docker-compose文件" class="headerlink" title="docker-compose文件"></a>docker-compose文件</h5><blockquote>
<p>在windows中创建一个docker-compose-ssm目录</p>
</blockquote>
<blockquote>
<p>编写docker-compose.yml文件【存放到docker-compose-ssm\docker-compose目录下 】</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yml文件</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">ssm:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">build:</span>            <span class="comment"># 构建自定义镜像</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">../</span>      <span class="comment"># 指定dockerfile文件的所在路径</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span>   <span class="comment"># 指定Dockerfile文件名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ssm:1.0.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ssm</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>



<h5 id="Dockerfile文件"><a href="#Dockerfile文件" class="headerlink" title="Dockerfile文件"></a>Dockerfile文件</h5><blockquote>
<p>编写Dockerfile文件【存放到docker-compose-ssm目录下】</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line">copy ssm.war /usr/local/tomcat/webapps</span><br></pre></td></tr></table></figure>

<blockquote>
<p>打包ssm工程，把ssm.war复制到Dockerfile文件同目录【存放到docker-compose-ssm目录下】</p>
</blockquote>
<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><blockquote>
<p>测试效果</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以直接启动基于docker-compose.yml以及Dockerfile文件构建的自定义镜像</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 如果自定义镜像不存在，会帮助我们构建出自定义镜像，如果自定义镜像已经存在，会直接运行这个自定义镜像</span></span><br><span class="line"><span class="comment"># 重新构建的话。</span></span><br><span class="line"><span class="comment"># 重新构建自定义镜像</span></span><br><span class="line">docker-compose build</span><br><span class="line"><span class="comment"># 运行当前内容，并重新构建</span></span><br><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure>









<h3 id="注意：Docker在启动容器后，可能会占用一些网卡的端口"><a href="#注意：Docker在启动容器后，可能会占用一些网卡的端口" class="headerlink" title="注意：Docker在启动容器后，可能会占用一些网卡的端口"></a>注意：Docker在启动容器后，可能会占用一些网卡的端口</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker network <span class="built_in">ls</span></span><br><span class="line"><span class="comment">#查看docker网卡</span></span><br><span class="line"></span><br><span class="line">docker network <span class="built_in">rm</span> 网卡<span class="built_in">id</span></span><br><span class="line"><span class="comment">#删除docker网卡</span></span><br><span class="line"></span><br><span class="line">docker network inspect 网卡<span class="built_in">id</span></span><br><span class="line">查看docker网卡的相关详细信息</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基础命令</title>
    <url>/2021/12/29/Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="1-用户操作"><a href="#1-用户操作" class="headerlink" title="1. 用户操作"></a>1. 用户操作</h1><h2 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h2><blockquote>
<p>添加一个用户</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># useradd [-mMnr][-c &lt;备注&gt;][-d &lt;登入目录&gt;][-e &lt;有效期限&gt;][-f &lt;缓冲天数&gt;][-g &lt;群组&gt;][-G &lt;群组&gt;][-s &lt;shell&gt;][-u &lt;uid&gt;][用户帐号]</span></span><br></pre></td></tr></table></figure>

<p>参数说明</p>
<ul>
<li>-c&lt;备注&gt; 　加上备注文字。备注文字会保存在passwd的备注栏位中。</li>
<li>-d&lt;登入目录&gt; 　指定用户登入时的起始目录。</li>
<li>-D 　变更预设值．</li>
<li>-e&lt;有效期限&gt; 　指定帐号的有效期限。</li>
<li>-f&lt;缓冲天数&gt; 　指定在密码过期后多少天即关闭该帐号。</li>
<li>-g&lt;群组&gt; 　指定用户所属的群组。</li>
<li>-G&lt;群组&gt; 　指定用户所属的附加群组。</li>
<li>-m 　自动建立用户的登入目录。</li>
<li>-M 　不要自动建立用户的登入目录。</li>
<li>-n 　取消建立以用户名称为名的群组．</li>
<li>-r 　建立系统帐号。</li>
<li>-s<shell>　 　指定用户登入后所使用的shell。</li>
<li>-u<uid> 　指定用户ID。</li>
</ul>
<h2 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h2><blockquote>
<p>删除一个用户</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># userdel temp</span></span><br></pre></td></tr></table></figure>



<h2 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h2><blockquote>
<p>通过passwd命令可以修改当前用户的密码</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ passwd</span><br><span class="line">Changing password <span class="keyword">for</span> amrood</span><br><span class="line">(current) Linux password:******</span><br><span class="line">New Linux password:*******</span><br><span class="line">Retype new Linux password:*******</span><br><span class="line">passwd: all authentication tokens updated  successfully</span><br></pre></td></tr></table></figure>

<h2 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h2><blockquote>
<p>通过whoami查看当前用户名称</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node1 shell_test]# whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<h2 id="users-who-w"><a href="#users-who-w" class="headerlink" title="users|who|w"></a>users|who|w</h2><blockquote>
<p>查看当前在线用户信息</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node1 shell_test]# users</span><br><span class="line">root root root</span><br><span class="line">[root@node1 shell_test]# who</span><br><span class="line">root     pts/0        2021-12-28 20:03 (192.168.88.1)</span><br><span class="line">root     pts/1        2021-12-29 03:15 (192.168.88.1)</span><br><span class="line">root     pts/2        2021-12-29 03:15 (192.168.88.1)</span><br><span class="line">[root@node1 shell_test]# w</span><br><span class="line"> 03:15:30 up  7:12,  3 users,  load average: 0.00, 0.01, 0.05</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts/0    192.168.88.1     20:03    2.00s  0.07s  0.01s w</span><br><span class="line">root     pts/1    192.168.88.1     03:15   24.00s  0.00s  0.00s -bash</span><br><span class="line">root     pts/2    192.168.88.1     03:15   21.00s  0.00s  0.00s -bash</span><br></pre></td></tr></table></figure>

<h2 id="logout"><a href="#logout" class="headerlink" title="logout"></a>logout</h2><blockquote>
<p>通过logout可以退出当前登录用户</p>
</blockquote>
<h1 id="2-系统操作"><a href="#2-系统操作" class="headerlink" title="2. 系统操作"></a>2. 系统操作</h1><h2 id="2-1-关机"><a href="#2-1-关机" class="headerlink" title="2.1 关机"></a>2.1 关机</h2><h3 id="halt"><a href="#halt" class="headerlink" title="halt"></a>halt</h3><blockquote>
<p>直接关闭系统</p>
</blockquote>
<h3 id="init-0"><a href="#init-0" class="headerlink" title="init 0"></a>init 0</h3><blockquote>
<p>使用预先定义的脚本关闭系统，关闭前可以清理和更新有关信息</p>
</blockquote>
<h3 id="poweroff"><a href="#poweroff" class="headerlink" title="poweroff"></a>poweroff</h3><blockquote>
<p>通过断电关闭系统</p>
</blockquote>
<h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><blockquote>
<p>安全关闭系统</p>
</blockquote>
<h2 id="2-2-重启"><a href="#2-2-重启" class="headerlink" title="2.2 重启"></a>2.2 重启</h2><h3 id="init-6"><a href="#init-6" class="headerlink" title="init 6"></a>init 6</h3><blockquote>
<p>重新启动系统</p>
</blockquote>
<h3 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h3><blockquote>
<p>重新启动系统</p>
</blockquote>
<h1 id="3-目录操作"><a href="#3-目录操作" class="headerlink" title="3. 目录操作"></a>3. 目录操作</h1><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><blockquote>
<p>查看指定目录下的内容，默认查看当前目录下内容</p>
<p><a href="">Linux中的隐藏文件是以.开头的，当前目录使用.表示，上一级目录使用..表示</a></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> [-ald] [目录名]</span><br><span class="line"><span class="comment"># 目录名不填写，默认为当前目录。</span></span><br><span class="line"><span class="comment"># -a：列出的全部的文件，包括隐藏文件</span></span><br><span class="line"><span class="comment"># -l：列举出全部的信息      也可以使用简写方式【ll】,这个不是一定可以用</span></span><br><span class="line"><span class="comment"># -d：仅查看目录本身</span></span><br></pre></td></tr></table></figure>

<h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><blockquote>
<p>实现目录间切换，使用绝对路径、相对路径、特殊符号</p>
<p>绝对路径：以&#x2F;开头的</p>
<p>相对路径：不以&#x2F;开头的</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 具体路径 | 特殊符号</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>特殊符号</th>
<th>表达的路径</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>当前目录</td>
</tr>
<tr>
<td>..</td>
<td>上一级目录</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>根目录</td>
</tr>
<tr>
<td>~</td>
<td>当前登录用户的HOME目录</td>
</tr>
<tr>
<td>-</td>
<td>返回</td>
</tr>
</tbody></table>
<h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><blockquote>
<p>创建目录，以及创建多级目录方式</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [-p] 目录名</span><br><span class="line"><span class="comment"># -p：代表创建多级目录时，使用</span></span><br></pre></td></tr></table></figure>

<h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><blockquote>
<p>删除非空目录或包含内容的目录</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只能删除空目录</span></span><br><span class="line"><span class="built_in">rmdir</span> 目录名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除非空目录</span></span><br><span class="line"><span class="built_in">rm</span> [-rf] 目录名</span><br><span class="line"><span class="comment"># -r：代表递归删除目录下的全部内容</span></span><br><span class="line"><span class="comment"># -f：不询问，直接删除</span></span><br></pre></td></tr></table></figure>

<h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><blockquote>
<p>复制目录下的全部内容</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r 来源目录 目标目录</span><br><span class="line"><span class="comment"># -r：递归复制全部内容，必填项</span></span><br><span class="line"><span class="comment"># 把文件复制到同一个目录下，需要改名字</span></span><br><span class="line"><span class="comment"># 把文件复制到不同目录下，可以不改名字</span></span><br></pre></td></tr></table></figure>

<h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><blockquote>
<p>移动、重命名目录，会根据第二个参数指定具体操作逻辑</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> 目录名 新目录名 | 路径</span><br><span class="line"><span class="comment"># mv 目录名 新目录名   代表在当前目录下对目录进行重命名</span></span><br><span class="line"><span class="comment"># mv 目录名 路径    代表把目录移动到指定路径下</span></span><br><span class="line"><span class="comment"># mv 目录名 路径/新目录名    代表把目录移动到指定路径下，并且重命名【新目录名不存在】</span></span><br><span class="line"><span class="comment"># 如果第二个参数指定的路径不存在，就是重命名，如果第二个参数的路径存在，就是移动</span></span><br></pre></td></tr></table></figure>

<h1 id="4-文件管理"><a href="#4-文件管理" class="headerlink" title="4. 文件管理"></a>4. 文件管理</h1><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><blockquote>
<p>cat（英文全拼：concatenate）命令用于连接文件并打印到标准输出设备上。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> [-AbeEnstTuv] [--<span class="built_in">help</span>] [--version] fileName</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><p><strong>-n 或 –number</strong>：由 1 开始对所有输出的行数编号。</p>
</li>
<li><p><strong>-b 或 –number-nonblank</strong>：和 -n 相似，只不过对于空白行不编号。</p>
</li>
<li><p><strong>-s 或 –squeeze-blank</strong>：当遇到有连续两行以上的空白行，就代换为一行的空白行。</p>
</li>
<li><p><strong>-v 或 –show-nonprinting</strong>：使用 ^ 和 M- 符号，除了 LFD 和 TAB 之外。</p>
</li>
<li><p><strong>-E 或 –show-ends</strong> : 在每行结束处显示 $。</p>
</li>
<li><p><strong>-T 或 –show-tabs</strong>: 将 TAB 字符显示为 ^I。</p>
</li>
<li><p><strong>-A, –show-all</strong>：等价于 -vET。</p>
</li>
<li><p><strong>-e：</strong>等价于”-vE”选项；</p>
</li>
<li><p><strong>-t：</strong>等价于”-vT”选项；</p>
</li>
</ul>
<h2 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a>chattr</h2><blockquote>
<p>Linux chattr命令用于改变文件属性。</p>
<p>这项指令可改变存放在ext2文件系统上的文件或目录属性，这些属性共有以下8种模式：</p>
<p>a：让文件或目录仅供附加用途。如果对文件设置a属性，那么只能在文件中增加数据，但是不能删除也不能修改数据；如果对目录设置a属性，那么只允许在目录中建立和修改文件，但是不允许删除文件。</p>
<p>b：不更新文件或目录的最后存取时间。</p>
<p>c：将文件或目录压缩后存放。</p>
<p>d：将文件或目录排除在倾倒操作之外。</p>
<p>i：不得任意更动文件或目录。如果对文件设置i属性，那么不允许对文件进行删除、改名，也不能添加和修改数据；如果对目录设置i属性，那么只能修改目录下文件的数据，但不允许建立和删除文件。</p>
<p>s：保密性删除文件或目录。</p>
<p>S：即时更新文件或目录。</p>
<p>u：预防意外删除。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chattr [-RV][-v&lt;版本编号&gt;][+/-/=&lt;属性&gt;][文件或目录...]</span><br></pre></td></tr></table></figure>



<h2 id="lsattr"><a href="#lsattr" class="headerlink" title="lsattr"></a>lsattr</h2><blockquote>
<p>Linux lsattr命令用于显示文件属性。</p>
<p>用chattr执行改变文件或目录的属性，可执行lsattr指令查询其属性。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lsattr [-adlRvV][文件或目录...]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong>：</p>
<ul>
<li>-a 　显示所有文件和目录，包括以”.”为名称开头字符的额外内建，现行目录”.”与上层目录”..”。</li>
<li>-d 　显示，目录名称，而非其内容。</li>
<li>-l 　此参数目前没有任何作用。</li>
<li>-R 　递归处理，将指定目录下的所有文件及子目录一并处理。</li>
<li>-v 　显示文件或目录版本。</li>
<li>-V 　显示版本信息。</li>
</ul>
<h2 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h2><blockquote>
<p>Linux chgrp（英文全拼：change group）命令用于变更文件或目录的所属群组。</p>
<p>与 <a href="https://www.runoob.com/linux/linux-comm-chown.html">chown</a> 命令不同，chgrp 允许普通用户改变文件所属的组，只要该用户是该组的一员。</p>
<p>在 UNIX 系统家族里，文件或目录权限的掌控以拥有者及所属群组来管理。您可以使用 chgrp 指令去变更文件与目录的所属群组，设置方式采用群组名称或群组识别码皆可。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chgrp</span> [-cfhRv][--<span class="built_in">help</span>][--version][所属群组][文件或目录...] 或 </span><br><span class="line"><span class="built_in">chgrp</span> [-cfhRv][--<span class="built_in">help</span>][--reference=&lt;参考文件或目录&gt;][--version][文件或目录...]</span><br></pre></td></tr></table></figure>

<p>参数说明</p>
<ul>
<li><strong>-c 或 –changes</strong>：效果类似”-v”参数，但仅回报更改的部分。 </li>
<li><strong>-f 或 –quiet 或 –silent</strong>： 　不显示错误信息。</li>
<li><strong>-h 或 –no-dereference</strong>： 　只对符号连接的文件作修改，而不改动其他任何相关文件。</li>
<li><strong>-R 或 –recursive</strong>： 　递归处理，将指定目录下的所有文件及子目录一并处理。</li>
<li><strong>-v 或 –verbose</strong>： 　显示指令执行过程。</li>
<li><strong>–help</strong>： 　在线帮助。</li>
<li>**–reference&#x3D;&lt;参考文件或目录&gt;**： 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。</li>
<li><strong>–version</strong>： 　显示版本信息。</li>
</ul>
<h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><blockquote>
<p>Linux chmod（英文全拼：change mode）命令是控制用户对文件的权限的命令</p>
<p>Linux&#x2F;Unix 的文件调用权限分为三级 : 文件所有者（Owner）、用户组（Group）、其它用户（Other Users）。</p>
<p><img src="https://s2.loli.net/2021/12/30/KZzDiCAdGapmVSo.jpg" alt="img"></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [-cfvR] [--<span class="built_in">help</span>] [--version] mode file...</span><br></pre></td></tr></table></figure>

<p>参数说明</p>
<p>mode : 权限设定字串，格式如下 :</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ugoa...][[+-=][rwxX]...][,...]</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。表示更改某个用户的权限</li>
<li>+ 表示增加权限、- 表示取消权限、&#x3D; 表示唯一设定权限。</li>
<li>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</li>
</ul>
<p>其他参数说明：</p>
<ul>
<li>-c : 若该文件权限确实已经更改，才显示其更改动作</li>
<li>-f : 若该文件权限无法被更改也不要显示错误讯息</li>
<li>-v : 显示权限变更的详细资料</li>
<li>-R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递归的方式逐个变更)</li>
<li>–help : 显示辅助说明</li>
<li>–version : 显示版本</li>
</ul>
<h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><blockquote>
<p>Linux chown（英文全拼：<strong>change owner</strong>）命令用于设置文件所有者和文件关联组的命令。</p>
<p>Linux&#x2F;Unix 是多人多工操作系统，所有的文件皆有拥有者。利用 chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID，组可以是组名或者组 ID，文件是以空格分开的要改变权限的文件列表，支持通配符。 。</p>
<p>chown 需要超级用户 <strong>root</strong> 的权限才能执行此命令。</p>
<p>只有超级用户和属于组的文件所有者才能变更文件关联组。非超级用户如需要设置关联组可能需要使用 <a href="https://www.runoob.com/linux/linux-comm-chgrp.html">chgrp</a> 命令。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> [-cfhvR] [--<span class="built_in">help</span>] [--version] user[:group] file...</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong> :</p>
<ul>
<li>user : 新的文件拥有者的使用者 ID</li>
<li>group : 新的文件拥有者的使用者组(group)</li>
<li>-c : 显示更改的部分的信息</li>
<li>-f : 忽略错误信息</li>
<li>-h :修复符号链接</li>
<li>-v : 显示详细的处理信息</li>
<li>-R : 处理指定目录以及其子目录下的所有文件</li>
<li>–help : 显示辅助说明</li>
<li>–version : 显示版本</li>
</ul>
<h2 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h2><blockquote>
<p>Linux cmp命令用于比较两个文件是否有差异。</p>
<p>当相互比较的两个文件完全一样时，则该指令不会显示任何信息。若发现有所差异，预设会标示出第一个不同之处的字符和列数编号。若不指定任何文件名称或是所给予的文件名为”-“，则cmp指令会从标准输入设备读取数据。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cmp [-clsv][-i &lt;字符数目&gt;][--<span class="built_in">help</span>][第一个文件][第二个文件]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong>：</p>
<ul>
<li>-c或–print-chars 　除了标明差异处的十进制字码之外，一并显示该字符所对应字符。</li>
<li>-i&lt;字符数目&gt;或–ignore-initial&#x3D;&lt;字符数目&gt; 　指定一个数目。</li>
<li>-l或–verbose 　标示出所有不一样的地方。</li>
<li>-s或–quiet或–silent 　不显示错误信息。</li>
<li>-v或–version 　显示版本信息。</li>
<li>–help 　在线帮助。</li>
</ul>
<h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><blockquote>
<p>Linux diff 命令用于比较文件的差异。</p>
<p>diff 以逐行的方式，比较文本文件的异同处。如果指定要比较目录，则 diff 会比较目录中相同文件名的文件，但不会比较其中子目录。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">diff [-abBcdefHilnNpPqrstTuvwy][-&lt;行数&gt;][-C &lt;行数&gt;][-D &lt;巨集名称&gt;][-I &lt;字符或字符串&gt;][-S &lt;文件&gt;][-W &lt;宽度&gt;][-x &lt;文件或目录&gt;][-X &lt;文件&gt;][--<span class="built_in">help</span>][--left-column][--suppress-common-line][文件或目录1][文件或目录2]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong>：</p>
<ul>
<li>-&lt;行数&gt; 　指定要显示多少行的文本。此参数必须与-c或-u参数一并使用。</li>
<li>-a或–text 　diff预设只会逐行比较文本文件。</li>
<li>-b或–ignore-space-change 　不检查空格字符的不同。</li>
<li>-B或–ignore-blank-lines 　不检查空白行。</li>
<li>-c 　显示全部内文，并标出不同之处。</li>
<li>-C&lt;行数&gt;或–context&lt;行数&gt; 　与执行”-c-&lt;行数&gt;”指令相同。</li>
<li>-d或–minimal 　使用不同的演算法，以较小的单位来做比较。</li>
<li>-D&lt;巨集名称&gt;或ifdef&lt;巨集名称&gt; 　此参数的输出格式可用于前置处理器巨集。</li>
<li>-e或–ed 　此参数的输出格式可用于ed的script文件。</li>
<li>-f或-forward-ed 　输出的格式类似ed的script文件，但按照原来文件的顺序来显示不同处。</li>
<li>-H或–speed-large-files 　比较大文件时，可加快速度。</li>
<li>-I&lt;字符或字符串&gt;或–ignore-matching-lines&lt;字符或字符串&gt; 　若两个文件在某几行有所不同，而这几行同时都包含了选项中指定的字符或字符串，则不显示这两个文件的差异。</li>
<li>-i或–ignore-case 　不检查大小写的不同。</li>
<li>-l或–paginate 　将结果交由pr程序来分页。</li>
<li>-n或–rcs 　将比较结果以RCS的格式来显示。</li>
<li>-N或–new-file 　在比较目录时，若文件A仅出现在某个目录中，预设会显示：</li>
<li>Only in目录：文件A若使用-N参数，则diff会将文件A与一个空白的文件比较。</li>
<li>-p 　若比较的文件为C语言的程序码文件时，显示差异所在的函数名称。</li>
<li>-P或–unidirectional-new-file 　与-N类似，但只有当第二个目录包含了一个第一个目录所没有的文件时，才会将这个文件与空白的文件做比较。</li>
<li>-q或–brief 　仅显示有无差异，不显示详细的信息。</li>
<li>-r或–recursive 　比较子目录中的文件。</li>
<li>-s或–report-identical-files 　若没有发现任何差异，仍然显示信息。</li>
<li>-S&lt;文件&gt;或–starting-file&lt;文件&gt; 　在比较目录时，从指定的文件开始比较。</li>
<li>-t或–expand-tabs 　在输出时，将tab字符展开。</li>
<li>-T或–initial-tab 　在每行前面加上tab字符以便对齐。</li>
<li>-u,-U&lt;列数&gt;或–unified&#x3D;&lt;列数&gt; 　以合并的方式来显示文件内容的不同。</li>
<li>-v或–version 　显示版本信息。</li>
<li>-w或–ignore-all-space 　忽略全部的空格字符。</li>
<li>-W&lt;宽度&gt;或–width&lt;宽度&gt; 　在使用-y参数时，指定栏宽。</li>
<li>-x&lt;文件名或目录&gt;或–exclude&lt;文件名或目录&gt; 　不比较选项中所指定的文件或目录。</li>
<li>-X&lt;文件&gt;或–exclude-from&lt;文件&gt; 　您可以将文件或目录类型存成文本文件，然后在&#x3D;&lt;文件&gt;中指定此文本文件。</li>
<li>-y或–side-by-side 　以并列的方式显示文件的异同之处。</li>
<li>–help 　显示帮助。</li>
<li>–left-column 　在使用-y参数时，若两个文件某一行内容相同，则仅在左侧的栏位显示该行内容。</li>
<li>–suppress-common-lines 　在使用-y参数时，仅显示不同之处。</li>
</ul>
<p><strong>说明：</strong></p>
<ul>
<li>“|”表示前后2个文件内容有不同</li>
<li>“&lt;”表示后面文件比前面文件少了1行内容</li>
<li>“&gt;”表示后面文件比前面文件多了1行内容</li>
</ul>
<h2 id="diffstat"><a href="#diffstat" class="headerlink" title="diffstat"></a>diffstat</h2><blockquote>
<p>Linux diffstat命令根据diff的比较结果，显示统计数字。</p>
<p>diffstat读取diff的输出结果，然后统计各文件的插入，删除，修改等差异计量。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">diff [-wV][-n &lt;文件名长度&gt;][-p &lt;文件名长度&gt;]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong>：</p>
<ul>
<li>-n&lt;文件名长度&gt; 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。</li>
<li>-p&lt;文件名长度&gt; 　与-n参数相同，但此处的&lt;文件名长度&gt;包括了文件的路径。</li>
<li>-w 　指定输出时栏位的宽度。</li>
<li>-V 　显示版本信息。</li>
</ul>
<h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><blockquote>
<p>Linux file命令用于辨识文件类型。</p>
<p>通过file指令，我们得以辨识该文件的类型。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">file [-bcLvz][-f &lt;名称文件&gt;][-m &lt;魔法数字文件&gt;...][文件或目录...]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong>：</p>
<ul>
<li>-b 　列出辨识结果时，不显示文件名称。</li>
<li>-c 　详细显示指令执行过程，便于排错或分析程序执行的情形。</li>
<li>-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。</li>
<li>-L 　直接显示符号连接所指向的文件的类别。</li>
<li>-m&lt;魔法数字文件&gt; 　指定魔法数字文件。</li>
<li>-v 　显示版本信息。</li>
<li>-z 　尝试去解读压缩文件的内容。</li>
<li>[文件或目录…] 要确定类型的文件列表，多个文件之间使用空格分开，可以使用shell通配符匹配多个文件。</li>
</ul>
<h2 id="fild"><a href="#fild" class="headerlink" title="fild"></a>fild</h2><blockquote>
<p>Linux find 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find   path   -option   [   -<span class="built_in">print</span> ]   [ -<span class="built_in">exec</span>   -ok   <span class="built_in">command</span> ]   &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>expression 中可使用的选项有二三十个之多，在此只介绍最常用的部份。</p>
<p>-mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件</p>
<p>-amin n : 在过去 n 分钟内被读取过</p>
<p>-anewer file : 比文件 file 更晚被读取过的文件</p>
<p>-atime n : 在过去n天内被读取过的文件</p>
<p>-cmin n : 在过去 n 分钟内被修改过</p>
<p>-cnewer file :比文件 file 更新的文件</p>
<p>-ctime n : 在过去n天内被修改过的文件</p>
<p>-empty : 空的文件-gid n or -group name : gid 是 n 或是 group 名称是 name</p>
<p>-ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写</p>
<p>-name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写</p>
<p>-size n : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。</p>
<p>-type c : 文件类型是 c 的文件。</p>
<p>d: 目录</p>
<p>c: 字型装置文件</p>
<p>b: 区块装置文件</p>
<p>p: 具名贮列</p>
<p>f: 一般文件</p>
<p>l: 符号连结</p>
<p>s: socket</p>
<p>-pid n : process id 是 n 的文件</p>
<p>你可以使用 ( ) 将运算式分隔，并使用下列运算。</p>
<p>exp1 -and exp2</p>
<p>! expr</p>
<p>-not expr</p>
<p>exp1 -or exp2</p>
<p>exp1, exp2</p>
<h2 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h2><blockquote>
<p>Linux cut命令用于显示每行从开头算起 num1 到 num2 的文字。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cut</span>  [-bn] [file]</span><br><span class="line"><span class="built_in">cut</span> [-c] [file]</span><br><span class="line"><span class="built_in">cut</span> [-<span class="built_in">df</span>] [file]</span><br></pre></td></tr></table></figure>

<p><strong>参数:</strong></p>
<ul>
<li>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</li>
<li>-c ：以字符为单位进行分割。</li>
<li>-d ：自定义分隔符，默认为制表符。</li>
<li>-f ：与-d一起使用，指定显示哪个区域。</li>
<li>-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的<br>范围之内，该字符将被写出；否则，该字符将被排除</li>
</ul>
<h2 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h2><blockquote>
<p>Linux ln（英文全拼：link files）命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。</p>
<p>当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> [参数][源文件或目录][目标文件或目录]</span><br></pre></td></tr></table></figure>

<p>命令参数</p>
<p><strong>必要参数</strong>：</p>
<ul>
<li>-b 删除，覆盖以前建立的链接</li>
<li>-d 允许超级用户制作目录的硬链接</li>
<li>-f 强制执行</li>
<li>-i 交互模式，文件存在则提示用户是否覆盖</li>
<li>-n 把符号链接视为一般目录</li>
<li>-s 软链接(符号链接)</li>
<li>-v 显示详细的处理过程</li>
</ul>
<p><strong>选择参数</strong>：</p>
<ul>
<li>-S “-S&lt;字尾备份字符串&gt; “或 “–suffix&#x3D;&lt;字尾备份字符串&gt;”</li>
<li>-V “-V&lt;备份方式&gt;”或”–version-control&#x3D;&lt;备份方式&gt;”</li>
<li>–help 显示帮助信息</li>
<li>–version 显示版本信息</li>
</ul>
<h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><blockquote>
<p>less 与 more 类似，less 可以随意浏览文件，支持翻页和搜索，支持向上翻页和向下翻页。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">less [参数] 文件 </span><br></pre></td></tr></table></figure>

<p><strong>参数说明</strong>：</p>
<ul>
<li>-b &lt;缓冲区大小&gt; 设置缓冲区的大小</li>
<li>-e 当文件显示结束后，自动离开</li>
<li>-f 强迫打开特殊文件，例如外围设备代号、目录和二进制文件</li>
<li>-g 只标志最后搜索的关键词</li>
<li>-i 忽略搜索时的大小写</li>
<li>-m 显示类似more命令的百分比</li>
<li>-N 显示每行的行号</li>
<li>-o &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来</li>
<li>-Q 不使用警告音</li>
<li>-s 显示连续空行为一行</li>
<li>-S 行过长时间将超出部分舍弃</li>
<li>-x &lt;数字&gt; 将”tab”键显示为规定的数字空格</li>
<li>&#x2F;字符串：向下搜索”字符串”的功能</li>
<li>?字符串：向上搜索”字符串”的功能</li>
<li>n：重复前一个搜索（与 &#x2F; 或 ? 有关）</li>
<li>N：反向重复前一个搜索（与 &#x2F; 或 ? 有关）</li>
<li>b 向上翻一页</li>
<li>d 向后翻半页</li>
<li>h 显示帮助界面</li>
<li>Q 退出less 命令</li>
<li>u 向前滚动半页</li>
<li>y 向前滚动一行</li>
<li>空格键 滚动一页</li>
<li>回车键 滚动一行</li>
<li>[pagedown]： 向下翻动一页</li>
<li>[pageup]： 向上翻动一页</li>
</ul>
<h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><blockquote>
<p>Linux locate命令用于查找符合条件的文档，他会去保存文档和目录名称的数据库内，查找合乎范本样式条件的文档或目录。</p>
<p>一般情况我们只需要输入 <strong>locate your_file_name</strong> 即可查找指定文件。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">locate [-d ][--<span class="built_in">help</span>][--version][范本样式...]</span><br></pre></td></tr></table></figure>

<p><strong>参数：</strong></p>
<ul>
<li>-b, –basename – 仅匹配路径名的基本名称</li>
<li>-c, –count – 只输出找到的数量</li>
<li>-d, –database DBPATH – 使用 DBPATH 指定的数据库，而不是默认数据库 &#x2F;var&#x2F;lib&#x2F;mlocate&#x2F;mlocate.db</li>
<li>-e, –existing – 仅打印当前现有文件的条目</li>
<li>-1 – 如果 是 1．则启动安全模式。在安全模式下，使用者不会看到权限无法看到 的档案。这会始速度减慢，因为 locate 必须至实际的档案系统中取得档案的 权限资料。</li>
<li>-0, –null – 在输出上带有NUL的单独条目</li>
<li>-S, –statistics – 不搜索条目，打印有关每个数据库的统计信息</li>
<li>-q – 安静模式，不会显示任何错误讯息。</li>
<li>-P, –nofollow, -H – 检查文件存在时不要遵循尾随的符号链接</li>
<li>-l, –limit, -n LIMIT – 将输出（或计数）限制为LIMIT个条目</li>
<li>-n – 至多显示 n个输出。</li>
<li>-m, –mmap – 被忽略，为了向后兼容</li>
<li>-r, –regexp REGEXP – 使用基本正则表达式</li>
<li>–regex – 使用扩展正则表达式</li>
<li>-q, –quiet – 安静模式，不会显示任何错误讯息</li>
<li>-s, –stdio – 被忽略，为了向后兼容</li>
<li>-o – 指定资料库存的名称。</li>
<li>-h, –help – 显示帮助</li>
<li>-i, –ignore-case – 忽略大小写</li>
<li>-V, –version – 显示版本信息</li>
</ul>
<h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><blockquote>
<p>Linux more 命令类似 cat ，不过会以一页一页的形式显示，更方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能（与 vi 相似），使用中的说明文件，请按 h 。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">more [-dlfpcsu] [-num] [+/pattern] [+linenum] [fileNames..]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong>：</p>
<ul>
<li>-num 一次显示的行数</li>
<li>-d 提示使用者，在画面下方显示 [Press space to continue, ‘q’ to quit.] ，如果使用者按错键，则会显示 [Press ‘h’ for instructions.] 而不是 ‘哔’ 声</li>
<li>-l 取消遇见特殊字元 ^L（送纸字元）时会暂停的功能</li>
<li>-f 计算行数时，以实际上的行数，而非自动换行过后的行数（有些单行字数太长的会被扩展为两行或两行以上）</li>
<li>-p 不以卷动的方式显示每一页，而是先清除萤幕后再显示内容</li>
<li>-c 跟 -p 相似，不同的是先显示内容再清除其他旧资料</li>
<li>-s 当遇到有连续两行以上的空白行，就代换为一行的空白行</li>
<li>-u 不显示下引号 （根据环境变数 TERM 指定的 terminal 而有所不同）</li>
<li>+&#x2F;pattern 在每个文档显示前搜寻该字串（pattern），然后从该字串之后开始显示</li>
<li>+num 从第 num 行开始显示</li>
<li>fileNames 欲显示内容的文档，可为复数个数</li>
</ul>
<h2 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h2><blockquote>
<p>编辑文件</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi 文件名 				<span class="comment"># 查看文件。（查看模式）</span></span><br><span class="line">i | a | o   		  <span class="comment"># 进入编辑模式。（编辑模式）</span></span><br><span class="line">                      <span class="comment"># i：在当前光标处，进入编辑模式。 </span></span><br><span class="line">                      <span class="comment"># a：在当前光标后一格，进入编辑模式。 </span></span><br><span class="line">                      <span class="comment"># o：在当前光标下一行，进入编辑模式。</span></span><br><span class="line">esc				      <span class="comment"># 退出编辑模式，回到查看模式。</span></span><br><span class="line">:				      <span class="comment"># 从查看模式进入到底行命令模式。（底行命名模式）</span></span><br><span class="line">                      <span class="comment"># 在底行命令模式下，输入wq：保存并退出。输入q!：不保存并退出</span></span><br><span class="line">                      <span class="comment"># :wq 保存并退出      # :q! 不保存退出</span></span><br><span class="line">                      <span class="comment"># 在查看模式下，摁ZZ，可以快速保存并退出。</span></span><br><span class="line"><span class="built_in">dd</span>  				  <span class="comment"># 在查看模式，直接按两下d,可以删除当前行</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>编辑文件时，常用的快捷键，方便操作</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在vi文件时，在底行命令模式下可以输入以下常用内容</span></span><br><span class="line"><span class="comment"># 行号操作</span></span><br><span class="line"><span class="built_in">set</span> nu              <span class="comment"># 查看文件的行号</span></span><br><span class="line">to rownum           <span class="comment"># 快速的跳转到指定行</span></span><br><span class="line"><span class="built_in">set</span> nonu            <span class="comment"># 取消行号</span></span><br><span class="line"><span class="comment"># 搜索操作</span></span><br><span class="line">/word               <span class="comment"># 类似Windows的Ctrl + F搜索文件中的具体内容所在位置，查看下一个可以输入字母n</span></span><br><span class="line"><span class="comment"># 快速定位</span></span><br><span class="line">G                   <span class="comment"># 快速跳转到最后一行</span></span><br><span class="line">gg                  <span class="comment"># 快速跳转到第一行</span></span><br></pre></td></tr></table></figure>

<h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><blockquote>
<p>根据不同的业务，可以选择不同的查看方式</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> 文件名</span><br><span class="line"><span class="comment"># 从第一行开始查看文件内容，展示全部</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tac</span> 文件名</span><br><span class="line"><span class="comment"># 从最后一行开始展示【倒着查看】</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">nl</span> 文件名</span><br><span class="line"><span class="comment"># 显示文件的内容时，展示行号</span></span><br><span class="line"></span><br><span class="line">more 文件名</span><br><span class="line"><span class="comment"># 查看大文件时，可以一页一页的向下翻</span></span><br><span class="line"><span class="comment"># 嗯space向下翻页，退出时摁q</span></span><br><span class="line"></span><br><span class="line">less 文件名</span><br><span class="line"><span class="comment"># 查看大文件时，可以任意的向上或者向下翻</span></span><br><span class="line"><span class="comment"># 向上或向下翻页摁PageUp和PageDown，一行一行查看，摁光标的↑↓</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">head</span> 文件名</span><br><span class="line"><span class="comment"># 只查看前几行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> 文件名</span><br><span class="line"><span class="comment"># 只查看后几行</span></span><br><span class="line"><span class="comment"># tail -f 日志 监控日志</span></span><br></pre></td></tr></table></figure>

<h2 id="mv-1"><a href="#mv-1" class="headerlink" title="mv"></a>mv</h2><blockquote>
<p>移动、重命名目录，会根据第二个参数指定具体操作逻辑</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> 文件名 新文件名 | 路径</span><br><span class="line"><span class="comment"># 如果第二个参数指定的路径不存在，就是重命名，如果第二个参数的路径存在，就是移动</span></span><br></pre></td></tr></table></figure>

<p><strong>参数说明</strong>：</p>
<ul>
<li><strong>-b</strong>: 当目标文件或目录存在时，在执行覆盖前，会为其创建一个备份。</li>
<li><strong>-i</strong>: 如果指定移动的源目录或文件与目标的目录或文件同名，则会先询问是否覆盖旧文件，输入 y 表示直接覆盖，输入 n 表示取消该操作。</li>
<li><strong>-f</strong>: 如果指定移动的源目录或文件与目标的目录或文件同名，不会询问，直接覆盖旧文件。</li>
<li><strong>-n</strong>: 不要覆盖任何已存在的文件或目录。</li>
<li><strong>-u</strong>：当源文件比目标文件新或者目标文件不存在时，才执行移动操作。</li>
</ul>
<h2 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h2><blockquote>
<p>Linux touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch [-acfm][-d&lt;日期时间&gt;][-r&lt;参考文件或目录&gt;] [-t&lt;日期时间&gt;][--help][--version][文件或目录…]</span><br></pre></td></tr></table></figure>

<p><strong>参数说明</strong>：</p>
<ul>
<li>a 改变档案的读取时间记录。</li>
<li>m 改变档案的修改时间记录。</li>
<li>c 假如目的档案不存在，不会建立新的档案。与 –no-create 的效果一样。</li>
<li>f 不使用，是为了与其他 unix 系统的相容性而保留。</li>
<li>r 使用参考档的时间记录，与 –file 的效果一样。</li>
<li>d 设定时间与日期，可以使用各种不同的格式。</li>
<li>t 设定档案的时间记录，格式与 date 指令相同。</li>
<li>–no-create 不会建立新档案。</li>
<li>–help 列出指令格式。</li>
<li>–version 列出版本讯息。</li>
</ul>
<h2 id="which"><a href="#which" class="headerlink" title="which"></a>which</h2><blockquote>
<p>Linux which命令用于查找文件。</p>
<p>which指令会在环境变量$PATH设置的目录里查找符合条件的文件。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which [文件...]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong>：</p>
<ul>
<li>-n&lt;文件名长度&gt; 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。</li>
<li>-p&lt;文件名长度&gt; 　与-n参数相同，但此处的&lt;文件名长度&gt;包括了文件的路径。</li>
<li>-w 　指定输出时栏位的宽度。</li>
<li>-V 　显示版本信息。</li>
</ul>
<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><blockquote>
<p>tail 命令可用于查看文件的内容，有一个常用的参数 <strong>-f</strong> 常用于查阅正在改变的日志文件。</p>
<p><strong>tail -f filename</strong> 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> [参数] [文件]  </span><br></pre></td></tr></table></figure>

<p><strong>参数：</strong></p>
<ul>
<li>-f 循环读取</li>
<li>-q 不显示处理信息</li>
<li>-v 显示详细的处理信息</li>
<li>-c&lt;数目&gt; 显示的字节数</li>
<li>-n&lt;行数&gt; 显示文件的尾部 n 行内容</li>
<li>–pid&#x3D;PID 与-f合用,表示在进程ID,PID死掉之后结束</li>
<li>-q, –quiet, –silent 从不输出给出文件名的首部</li>
<li>-s, –sleep-interval&#x3D;S 与-f合用,表示在每次反复的间隔休眠S秒</li>
</ul>
<h2 id="cp-1"><a href="#cp-1" class="headerlink" title="cp"></a>cp</h2><blockquote>
<p>复制文件到指定目录下</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> 文件名 目录</span><br></pre></td></tr></table></figure>

<h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><blockquote>
<p>删除文件方式</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> [-f] 文件名</span><br><span class="line"><span class="comment"># -f：是否询问</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基础知识</title>
    <url>/2021/12/29/Linux%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2021/12/29/6v1czQVrbjpZKo5.png" alt="1586185429977"></p>
<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><hr>
<h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><blockquote>
<p>平时大家大多是在Windows或者Mac操作系统下去编写代码进行开发，在开发环境中安装大量的软件，这样会导致环境的稳定性和安全性降低</p>
</blockquote>
<h4 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h4><blockquote>
<p>是将程序运行在此环境中，供用户去使用。这个环境是有专业的人员去维护，一般人是没有权限去操做生产环境的</p>
</blockquote>
<h4 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h4><blockquote>
<p>一般克隆一份生产环境，会将开发环境中的程序部署到测试环境中，这个环境的主要目的是去程序进程检测，收集程序中的各种问题，并交给开发人员进行修改</p>
</blockquote>
<h4 id="操作系统的选择"><a href="#操作系统的选择" class="headerlink" title="操作系统的选择"></a>操作系统的选择</h4><blockquote>
<p>生产环境中，常用的操作系统有Windows 2003 service，Linux，Unix等等，Linux操作系统，在生产环境中占据了大量的市场份额，Linux主要以稳定，可靠，免费的特点成为全球使用最多的服务器操作系统。</p>
<p>Linux操作系统现在已经成为后台开发人员必备的技能，并且后期学习的各种知识都会涉及到Linux操作系统。</p>
</blockquote>
<h3 id="Linux介绍"><a href="#Linux介绍" class="headerlink" title="Linux介绍"></a>Linux介绍</h3><hr>
<h4 id="Linux介绍-1"><a href="#Linux介绍-1" class="headerlink" title="Linux介绍"></a>Linux介绍</h4><blockquote>
<p>在Linux操作系统出现之前，还有一个操作系统叫做Minix，Minix操作系统是由Andrew的大学教授研发出来的，当时大学教授是为了给学生上课，买了一套Unix操作系统，参考Unix自己写了一个操作系统，并且命名为Minix。同时将Minix开源，供学校内部的研究和教学，到了2000年，Andrew将Minix操作系统完全对外开源。</p>
<p>Minix由于完全对外开源之后，在互联网上迅速的传播，但是大家在使用时，发展Minix不时很完美，内部存在各种各样问题。用户将问题解决后，编写了一个补丁，将补丁以邮件的方式发给Andrew，但是Andrew教授最初的目的只是为了教学和研究。</p>
<p>于此同时，一位芬兰的大学生出现了，叫Linus，在Minix操作系统基础上，自己添加了一些补丁和插件，并将其命名为Linux操作系统，并且完全对外开源，而且开始维护Linux操作系统。</p>
<p>之前学习的Git也时Linus研发的。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Linus Torvalds 和 Linux</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/3hjHWkcTNps9lCD.png" alt="1586225837185"></td>
</tr>
</tbody></table>
<h4 id="Linux的版本"><a href="#Linux的版本" class="headerlink" title="Linux的版本"></a>Linux的版本</h4><blockquote>
<p>Linux的版本分为两种，一种是Linus团队正在维护的开源内核版本。另一种是一些厂商基于内核版本封装的发行版本。</p>
<ul>
<li><p>Linux的内核版本官网：<a href="https://www.kernel.org/">https://www.kernel.org/</a></p>
</li>
<li><p>Linux的发行版本，咱们需要学习的发行版本就时CentOS</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Linux的常见发行版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/ByqKLkDMtOhncoN.png" alt="1586227096086"></td>
</tr>
</tbody></table>
<h4 id="Linux和Windows区别"><a href="#Linux和Windows区别" class="headerlink" title="Linux和Windows区别"></a>Linux和Windows区别</h4><blockquote>
<ul>
<li>Linux是严格区分大小写的，Windows无所谓。</li>
<li>Linux中一切皆是文件。</li>
<li>Linux中文件是没有后缀的，但是他有一些约定俗成的后缀。【tar.gz   tar】</li>
<li>Windows下的软件一般是无法直接运行的Linux中。</li>
</ul>
<p><a href="">Ps：我们在学习Linux时，参考Windows下做了什么，就在Linux中做什么</a></p>
</blockquote>
<h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><hr>
<blockquote>
<ul>
<li><p>安装Linux，我们需要一个虚拟机，为了安装虚拟环境：VMware或者Virtual Box（采用VMware）</p>
<p> <a href="https://www.vmware.com/go/getworkstation-win">https://www.vmware.com/go/getworkstation-win</a></p>
</li>
<li><p>为了安装Linux，我们需要一个Linux的镜像文件：CentOS7版本</p>
<p> <a href="http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1908.iso">http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1908.iso</a></p>
</li>
<li><p>安装一个连接Linux的图形化界面：Xterm，SSH，XShell（Xterm）</p>
<p> <a href="https://download.mobatek.net/2012020021813110/MobaXterm_Portable_v20.1.zip">https://download.mobatek.net/2012020021813110/MobaXterm_Portable_v20.1.zip</a></p>
</li>
</ul>
</blockquote>
<h4 id="安装VMware"><a href="#安装VMware" class="headerlink" title="安装VMware"></a>安装VMware</h4><blockquote>
<p>傻瓜式安装，下一步下一步下一步……</p>
</blockquote>
<h4 id="安装Xterm"><a href="#安装Xterm" class="headerlink" title="安装Xterm"></a>安装Xterm</h4><blockquote>
<p>解压即可以使用……</p>
</blockquote>
<h4 id="在VMware中安装Linux"><a href="#在VMware中安装Linux" class="headerlink" title="在VMware中安装Linux"></a>在VMware中安装Linux</h4><blockquote>
<p>按照下图步骤，逐步安装Linux操作系统……‘</p>
</blockquote>
<h5 id="选择安装方式"><a href="#选择安装方式" class="headerlink" title="选择安装方式"></a>选择安装方式</h5><table>
<thead>
<tr>
<th align="center">选择安装方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/L9qM5vIhCpRH3mJ.png" alt="1586231357367"></td>
</tr>
</tbody></table>
<h5 id="指定镜像方式"><a href="#指定镜像方式" class="headerlink" title="指定镜像方式"></a>指定镜像方式</h5><table>
<thead>
<tr>
<th align="center">选择稍后安装操作系统</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/vjfP6ITxsDlVSaA.png" alt="1586231394510"></td>
</tr>
</tbody></table>
<h5 id="选择操作系统类型"><a href="#选择操作系统类型" class="headerlink" title="选择操作系统类型"></a>选择操作系统类型</h5><table>
<thead>
<tr>
<th align="center">选择操作系统类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/oRz1jQerh5wH2E6.png" alt="1586231434814"></td>
</tr>
</tbody></table>
<h5 id="指定虚拟机名称"><a href="#指定虚拟机名称" class="headerlink" title="指定虚拟机名称"></a>指定虚拟机名称</h5><table>
<thead>
<tr>
<th align="center">指定虚拟机名称，和安装目录</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/mkDOVxdyhqCnXzs.png" alt="1586231466922"></td>
</tr>
</tbody></table>
<h5 id="磁盘存储方式"><a href="#磁盘存储方式" class="headerlink" title="磁盘存储方式"></a>磁盘存储方式</h5><table>
<thead>
<tr>
<th align="center">拆分成多个文件存储</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/qrQwEpJ3ZsjDRt1.png" alt="1586231519493"></td>
</tr>
</tbody></table>
<h5 id="指定虚拟机配置"><a href="#指定虚拟机配置" class="headerlink" title="指定虚拟机配置"></a>指定虚拟机配置</h5><blockquote>
<p>具体配置</p>
<ul>
<li>内存：4G</li>
<li>处理器：1个【2核】</li>
<li>CD&#x2F;DVD：指定 Centos.iso 文件所在路径【右侧菜单选择使用ISO映射文件】</li>
<li>网络适配器：NAT模式【跟主机共享一块网卡，安装成功后需要分配静态IP】</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">指定虚拟机的设置</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/ECXFBkAy82tjs5Y.png" alt="1586231619526"></td>
</tr>
</tbody></table>
<h5 id="开始安装CentOS"><a href="#开始安装CentOS" class="headerlink" title="开始安装CentOS"></a>开始安装CentOS</h5><table>
<thead>
<tr>
<th align="center">开始界面选择语言</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/TulOPjv2GeS7Vbs.png" alt="1586231719094"></td>
</tr>
</tbody></table>
<h5 id="3-3-8-配置虚拟机网络连接"><a href="#3-3-8-配置虚拟机网络连接" class="headerlink" title="3.3.8 配置虚拟机网络连接"></a>3.3.8 配置虚拟机网络连接</h5><table>
<thead>
<tr>
<th align="center">配置安装位置以及网络和主机名（开启）</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/tBCxHApWFNYXLSa.png" alt="1586231811319"></td>
</tr>
</tbody></table>
<h5 id="设置root用户密码"><a href="#设置root用户密码" class="headerlink" title="设置root用户密码"></a>设置root用户密码</h5><table>
<thead>
<tr>
<th align="center">9、开始安装后，设置ROOT用户的密码</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/fJmZc7TQqS36wOV.png" alt="1586231864794"></td>
</tr>
</tbody></table>
<h5 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h5><table>
<thead>
<tr>
<th align="center">10、安装成功，并登录</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/9noO4eMdz1KVAth.png" alt="1586232093005"></td>
</tr>
</tbody></table>
<h4 id="使用Xterm连接Linux"><a href="#使用Xterm连接Linux" class="headerlink" title="使用Xterm连接Linux"></a>使用Xterm连接Linux</h4><blockquote>
<p>直接在Vmware中操作Linux有很多限制，我们可以在图形化界面中操作Linux操作系统</p>
<p>具体步骤如下……</p>
</blockquote>
<h5 id="查看ip地址"><a href="#查看ip地址" class="headerlink" title="查看ip地址"></a>查看ip地址</h5><blockquote>
<p>在主机【windows】中需要把VMware相关的服务打开【默认自动开启】</p>
<ul>
<li>右击电脑 –&gt; 管理 –&gt; 服务</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">windows的服务</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/zV2Mol6NiRFpgts.png" alt="image-20200928111441822"></td>
</tr>
</tbody></table>
<hr>
<table>
<thead>
<tr>
<th align="center">查看ip地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/8BfHdMlZ1hVFjKb.png" alt="1586238155779"></td>
</tr>
</tbody></table>
<h5 id="通过Xterm连接"><a href="#通过Xterm连接" class="headerlink" title="通过Xterm连接"></a>通过Xterm连接</h5><table>
<thead>
<tr>
<th align="center">连接上Linux</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/K87RvJN9rxSZtys.png" alt="1588919972667"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">连接成功</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/8YyqTjmNgx4tsMW.png" alt="1586238257999"></td>
</tr>
</tbody></table>
<h3 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h3><hr>
<blockquote>
<p>Windows的目录结构是带有盘符的。D：  E： C：，而Linux中是没有盘符的</p>
<p>在Xterm中输入ls &#x2F; 查看Linux的顶级目录。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">ls &#x2F;</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/9IpxaJy8FoGYf71.png" alt="1586239207504"></td>
</tr>
</tbody></table>
<blockquote>
<p>Linux的常用目录……</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Linux目录树状图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/PcXR4iUl7Dxbs2Q.png" alt="1586239342796"></td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li>root：该目录为系统管理员HOME目录</li>
<li>bin：这个目录下放着经常使用的命令</li>
<li>boot：这里存放的是启动Linux时的一些核心文件</li>
<li>etc：存放系统管理所需要的配置文件和子目录</li>
<li>home：普通用户的HOME目录</li>
<li>usr：默认安装软件的目录，类似Windows中的Program Files目录</li>
<li>opt：是主机额外安装软件摆放的目录</li>
</ul>
</blockquote>
<h3 id="Linux的基本命令"><a href="#Linux的基本命令" class="headerlink" title="Linux的基本命令"></a>Linux的基本命令</h3><hr>
<blockquote>
<p>Linux中命令的基本格式：命令 【选项】 【参数】</p>
<p>需要注意，个别命令是不遵循这个格式</p>
<p>当命令中有多个选项时，可以写在一起的，并且选项也是由简写方式的 命令 -选项A选项B</p>
<p>Linux的基本操作命令，不遵循上述格式，但是后期会经常使用……</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 我是谁</span></span><br><span class="line"><span class="built_in">who</span> am i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 我在哪</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 查看ip 地址</span></span><br><span class="line">ip a | ip address</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 清屏</span></span><br><span class="line">clear</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. ping域名|ip</span></span><br><span class="line">ping 地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 强制停止</span></span><br><span class="line">Ctrl + C</span><br></pre></td></tr></table></figure>



<h3 id="Linux目录命令【重点】"><a href="#Linux目录命令【重点】" class="headerlink" title="Linux目录命令【重点】"></a>Linux目录命令【<code>重点</code>】</h3><hr>
<h4 id="列出目录"><a href="#列出目录" class="headerlink" title="列出目录"></a>列出目录</h4><blockquote>
<p>查看指定目录下的内容，默认查看当前目录下内容</p>
<p><a href="">Linux中的隐藏文件是以.开头的，当前目录使用.表示，上一级目录使用..表示</a></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> [-ald] [目录名]</span><br><span class="line"><span class="comment"># 目录名不填写，默认为当前目录。</span></span><br><span class="line"><span class="comment"># -a：列出的全部的文件，包括隐藏文件</span></span><br><span class="line"><span class="comment"># -l：列举出全部的信息      也可以使用简写方式【ll】,这个不是一定可以用</span></span><br><span class="line"><span class="comment"># -d：仅查看目录本身</span></span><br></pre></td></tr></table></figure>



<h4 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h4><blockquote>
<p>实现目录间切换，使用绝对路径、相对路径、特殊符号</p>
<p>绝对路径：以&#x2F;开头的</p>
<p>相对路径：不以&#x2F;开头的</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 具体路径 | 特殊符号</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>特殊符号</th>
<th>表达的路径</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>当前目录</td>
</tr>
<tr>
<td>..</td>
<td>上一级目录</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>根目录</td>
</tr>
<tr>
<td>~</td>
<td>当前登录用户的HOME目录</td>
</tr>
<tr>
<td>-</td>
<td>返回</td>
</tr>
</tbody></table>
<h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><blockquote>
<p>创建目录，以及创建多级目录方式</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [-p] 目录名</span><br><span class="line"><span class="comment"># -p：代表创建多级目录时，使用</span></span><br></pre></td></tr></table></figure>



<h4 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h4><blockquote>
<p>删除非空目录或包含内容的目录</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只能删除空目录</span></span><br><span class="line"><span class="built_in">rmdir</span> 目录名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除非空目录</span></span><br><span class="line"><span class="built_in">rm</span> [-rf] 目录名</span><br><span class="line"><span class="comment"># -r：代表递归删除目录下的全部内容</span></span><br><span class="line"><span class="comment"># -f：不询问，直接删除</span></span><br></pre></td></tr></table></figure>



<h4 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h4><blockquote>
<p>复制目录下的全部内容</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r 来源目录 目标目录</span><br><span class="line"><span class="comment"># -r：递归复制全部内容，必填项</span></span><br><span class="line"><span class="comment"># 把文件复制到同一个目录下，需要改名字</span></span><br><span class="line"><span class="comment"># 把文件复制到不同目录下，可以不改名字</span></span><br></pre></td></tr></table></figure>



<h4 id="移动、重命名目录"><a href="#移动、重命名目录" class="headerlink" title="移动、重命名目录"></a>移动、重命名目录</h4><blockquote>
<p>移动、重命名目录，会根据第二个参数指定具体操作逻辑</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> 目录名 新目录名 | 路径</span><br><span class="line"><span class="comment"># mv 目录名 新目录名   代表在当前目录下对目录进行重命名</span></span><br><span class="line"><span class="comment"># mv 目录名 路径    代表把目录移动到指定路径下</span></span><br><span class="line"><span class="comment"># mv 目录名 路径/新目录名    代表把目录移动到指定路径下，并且重命名【新目录名不存在】</span></span><br><span class="line"><span class="comment"># 如果第二个参数指定的路径不存在，就是重命名，如果第二个参数的路径存在，就是移动</span></span><br></pre></td></tr></table></figure>



<h3 id="Linux的文件命令【重点】"><a href="#Linux的文件命令【重点】" class="headerlink" title="Linux的文件命令【重点】"></a>Linux的文件命令【<code>重点</code>】</h3><hr>
<h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><blockquote>
<p>创建空文件</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> 文件名1 文件名2 ……</span><br></pre></td></tr></table></figure>



<h4 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h4><blockquote>
<p>编辑文件，后期最常的命令之一</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi 文件名 				<span class="comment"># 查看文件。（查看模式）</span></span><br><span class="line">i | a | o   		  <span class="comment"># 进入编辑模式。（编辑模式）</span></span><br><span class="line">                      <span class="comment"># i：在当前光标处，进入编辑模式。 </span></span><br><span class="line">                      <span class="comment"># a：在当前光标后一格，进入编辑模式。 </span></span><br><span class="line">                      <span class="comment"># o：在当前光标下一行，进入编辑模式。</span></span><br><span class="line">esc				      <span class="comment"># 退出编辑模式，回到查看模式。</span></span><br><span class="line">:				      <span class="comment"># 从查看模式进入到底行命令模式。（底行命名模式）</span></span><br><span class="line">                      <span class="comment"># 在底行命令模式下，输入wq：保存并退出。输入q!：不保存并退出</span></span><br><span class="line">                      <span class="comment"># :wq 保存并退出      # :q! 不保存退出</span></span><br><span class="line">                      <span class="comment"># 在查看模式下，摁ZZ，可以快速保存并退出。</span></span><br><span class="line"><span class="built_in">dd</span>  				  <span class="comment"># 在查看模式，直接按两下d,可以删除当前行</span></span><br></pre></td></tr></table></figure>



<h4 id="vi文件时，其他操作"><a href="#vi文件时，其他操作" class="headerlink" title="vi文件时，其他操作"></a>vi文件时，其他操作</h4><blockquote>
<p>编辑文件时，常用的快捷键，方便操作</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在vi文件时，在底行命令模式下可以输入以下常用内容</span></span><br><span class="line"><span class="comment"># 行号操作</span></span><br><span class="line"><span class="built_in">set</span> nu              <span class="comment"># 查看文件的行号</span></span><br><span class="line">to rownum           <span class="comment"># 快速的跳转到指定行</span></span><br><span class="line"><span class="built_in">set</span> nonu            <span class="comment"># 取消行号</span></span><br><span class="line"><span class="comment"># 搜索操作</span></span><br><span class="line">/word               <span class="comment"># 类似Windows的Ctrl + F搜索文件中的具体内容所在位置，查看下一个可以输入字母n</span></span><br><span class="line"><span class="comment"># 快速定位</span></span><br><span class="line">G                   <span class="comment"># 快速跳转到最后一行</span></span><br><span class="line">gg                  <span class="comment"># 快速跳转到第一行</span></span><br></pre></td></tr></table></figure>



<h4 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h4><blockquote>
<p>根据不同的业务，可以选择不同的查看方式</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> 文件名</span><br><span class="line"><span class="comment"># 从第一行开始查看文件内容，展示全部</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tac</span> 文件名</span><br><span class="line"><span class="comment"># 从最后一行开始展示【倒着查看】</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">nl</span> 文件名</span><br><span class="line"><span class="comment"># 显示文件的内容时，展示行号</span></span><br><span class="line"></span><br><span class="line">more 文件名</span><br><span class="line"><span class="comment"># 查看大文件时，可以一页一页的向下翻</span></span><br><span class="line"><span class="comment"># 嗯space向下翻页，退出时摁q</span></span><br><span class="line"></span><br><span class="line">less 文件名</span><br><span class="line"><span class="comment"># 查看大文件时，可以任意的向上或者向下翻</span></span><br><span class="line"><span class="comment"># 向上或向下翻页摁PageUp和PageDown，一行一行查看，摁光标的↑↓</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">head</span> 文件名</span><br><span class="line"><span class="comment"># 只查看前几行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> 文件名</span><br><span class="line"><span class="comment"># 只查看后几行</span></span><br><span class="line"><span class="comment"># tail -f 日志 监控日志</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Linux配置环境变量的文件【将来jdk环境变量就会配置在这里】</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /etc/profile</span><br><span class="line"></span><br><span class="line"># System wide environment and startup programs, for login setup</span><br><span class="line"># Functions and aliases go in /etc/bashrc</span><br><span class="line"></span><br><span class="line"># It&#x27;s NOT a good idea to change this file unless you know what you</span><br><span class="line"># are doing. It&#x27;s much better to create a custom.sh shell script in</span><br><span class="line"># /etc/profile.d/ to make custom changes to your environment, as this</span><br><span class="line"># will prevent the need for merging in future updates.</span><br><span class="line"></span><br><span class="line">pathmunge () &#123;</span><br><span class="line">    case &quot;:$&#123;PATH&#125;:&quot; in</span><br><span class="line">        *:&quot;$1&quot;:*)</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            if [ &quot;$2&quot; = &quot;after&quot; ] ; then</span><br><span class="line">                PATH=$PATH:$1</span><br><span class="line">            else</span><br><span class="line">                PATH=$1:$PATH</span><br><span class="line">            fi</span><br><span class="line">    esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ -x /usr/bin/id ]; then</span><br><span class="line">    if [ -z &quot;$EUID&quot; ]; then</span><br><span class="line">        # ksh workaround</span><br><span class="line">        EUID=`/usr/bin/id -u`</span><br><span class="line">        UID=`/usr/bin/id -ru`</span><br><span class="line">    fi</span><br><span class="line">    USER=&quot;`/usr/bin/id -un`&quot;</span><br><span class="line">    LOGNAME=$USER</span><br><span class="line">    MAIL=&quot;/var/spool/mail/$USER&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Path manipulation</span><br><span class="line">if [ &quot;$EUID&quot; = &quot;0&quot; ]; then</span><br><span class="line">    pathmunge /usr/sbin</span><br><span class="line">    pathmunge /usr/local/sbin</span><br><span class="line">else</span><br><span class="line">    pathmunge /usr/local/sbin after</span><br><span class="line">    pathmunge /usr/sbin after</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">HOSTNAME=`/usr/bin/hostname 2&gt;/dev/null`</span><br><span class="line">HISTSIZE=1000</span><br><span class="line">if [ &quot;$HISTCONTROL&quot; = &quot;ignorespace&quot; ] ; then</span><br><span class="line">    export HISTCONTROL=ignoreboth</span><br><span class="line">else</span><br><span class="line">    export HISTCONTROL=ignoredups</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL</span><br><span class="line"></span><br><span class="line"># By default, we want umask to get set. This sets it for login shell</span><br><span class="line"># Current threshold for system reserved uid/gids is 200</span><br><span class="line"># You could check uidgid reservation validity in</span><br><span class="line"># /usr/share/doc/setup-*/uidgid file</span><br><span class="line">if [ $UID -gt 199 ] &amp;&amp; [ &quot;`/usr/bin/id -gn`&quot; = &quot;`/usr/bin/id -un`&quot; ]; then</span><br><span class="line">    umask 002</span><br><span class="line">else</span><br><span class="line">    umask 022</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">for i in /etc/profile.d/*.sh /etc/profile.d/sh.local ; do</span><br><span class="line">    if [ -r &quot;$i&quot; ]; then</span><br><span class="line">        if [ &quot;$&#123;-#*i&#125;&quot; != &quot;$-&quot; ]; then</span><br><span class="line">            . &quot;$i&quot;</span><br><span class="line">        else</span><br><span class="line">            . &quot;$i&quot; &gt;/dev/null</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">unset i</span><br><span class="line">unset -f pathmunge</span><br></pre></td></tr></table></figure>





<h4 id="移动、重命名文件"><a href="#移动、重命名文件" class="headerlink" title="移动、重命名文件"></a>移动、重命名文件</h4><blockquote>
<p>移动、重命名目录，会根据第二个参数指定具体操作逻辑</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> 文件名 新文件名 | 路径</span><br><span class="line"><span class="comment"># 如果第二个参数指定的路径不存在，就是重命名，如果第二个参数的路径存在，就是移动</span></span><br></pre></td></tr></table></figure>



<h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><blockquote>
<p>复制文件到指定目录下</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> 文件名 目录</span><br></pre></td></tr></table></figure>



<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><blockquote>
<p>删除文件方式</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> [-f] 文件名</span><br><span class="line"><span class="comment"># -f：是否询问</span></span><br></pre></td></tr></table></figure>



<h3 id="Linux的压缩包命令【重点】"><a href="#Linux的压缩包命令【重点】" class="headerlink" title="Linux的压缩包命令【重点】"></a>Linux的压缩包命令【<code>重点</code>】</h3><hr>
<h4 id="针对tar命令"><a href="#针对tar命令" class="headerlink" title="针对tar命令"></a>针对tar命令</h4><blockquote>
<p>Linux中常用的压缩包，大多是.tar，.tar.gz，tgz的</p>
</blockquote>
<h5 id="解压压缩包"><a href="#解压压缩包" class="headerlink" title="解压压缩包"></a>解压压缩包</h5><blockquote>
<p>针对压缩包后缀的情况，采用不同的参数，否则可能会损失文件</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar [-zxvf] 压缩包名称 [-C 路径]</span><br><span class="line"><span class="comment"># -z： 代表压缩包后缀是.gz的</span></span><br><span class="line"><span class="comment"># -x： 代表解压</span></span><br><span class="line"><span class="comment"># -v： 解压时，打印详细信息</span></span><br><span class="line"><span class="comment"># -f： -f选项必须放在所有选项的最后，代表指定文件名称</span></span><br><span class="line"><span class="comment"># -C 路径： 代表将压缩包内容解压到指定路径</span></span><br></pre></td></tr></table></figure>



<h5 id="打包成压缩包"><a href="#打包成压缩包" class="headerlink" title="打包成压缩包"></a>打包成压缩包</h5><blockquote>
<p>可以将多个文件以及目录打包成压缩包，根据选择的参数指定压缩包名</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar [-zcvf] 压缩包名称 文件1 文件2 目录1 目录2 ...</span><br><span class="line"><span class="comment"># -c： 代表打包</span></span><br><span class="line"><span class="comment"># 其他参数同上</span></span><br></pre></td></tr></table></figure>



<h4 id="针对zip类型压缩包"><a href="#针对zip类型压缩包" class="headerlink" title="针对zip类型压缩包"></a>针对zip类型压缩包</h4><blockquote>
<p>Linux不仅仅针对tar类型的压缩包，也支持zip，rar这种Windows下的压缩包。</p>
<p>不过需要安装软件针对对各种类型压缩包的操作</p>
</blockquote>
<h5 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install zip     <span class="comment"># 打包程序</span></span><br><span class="line">yum -y install unzip   <span class="comment"># 解压程序</span></span><br></pre></td></tr></table></figure>



<h5 id="解压以及打包"><a href="#解压以及打包" class="headerlink" title="解压以及打包"></a>解压以及打包</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">unzip 压缩包名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包</span></span><br><span class="line">zip 压缩包名称 文件1 文件2 目录1 目录2 ...</span><br></pre></td></tr></table></figure>



<h3 id="用户-amp-用户组的操作"><a href="#用户-amp-用户组的操作" class="headerlink" title="用户&amp;用户组的操作"></a>用户&amp;用户组的操作</h3><hr>
<h4 id="用户的常用操作命令"><a href="#用户的常用操作命令" class="headerlink" title="用户的常用操作命令"></a>用户的常用操作命令</h4><blockquote>
<p>Linux是一个多用户的操作系统，任何一个用户想要操作Linux操作系统，必须向系统管理员申请一个账号才可以，并且以这个账号的身份去操作Linux。</p>
<p>用户的账号一方面可以帮助系统管理员追踪当前用户的操作。另一方面可以控制当前用户对系统资源访问。</p>
</blockquote>
<h5 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前系统所有用户</span></span><br><span class="line"><span class="built_in">cat</span> /etc/passwd</span><br></pre></td></tr></table></figure>

<h5 id="用户的创建"><a href="#用户的创建" class="headerlink" title="用户的创建"></a>用户的创建</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">useradd 用户名</span><br></pre></td></tr></table></figure>



<h5 id="设置用户密码"><a href="#设置用户密码" class="headerlink" title="设置用户密码"></a>设置用户密码</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure>



<h5 id="查看用户在哪个组"><a href="#查看用户在哪个组" class="headerlink" title="查看用户在哪个组"></a>查看用户在哪个组</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">groups</span> [user]</span><br><span class="line"><span class="comment">#user不写，则代表当前用户</span></span><br></pre></td></tr></table></figure>



<h5 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">su 用户名</span><br><span class="line"><span class="comment"># [root@localhost ~]#   -&gt; root用户在本地登录，并且当前在~目录下，#代表是超级管理员</span></span><br><span class="line"><span class="comment"># [java2003@localhost ~]$	-&gt; java2003用户在本地登录，并且当前在~目录下，$代表是普通用户</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>su 用户名在切换用户时，由超级管理员切换到其他用户，是不需要输入密码的。</p>
<p>反之，则需要输入密码以保证安全。</p>
</blockquote>
<img src="https://s2.loli.net/2021/12/29/RBn2zJvds9k1HZX.png" alt="1597818343188" style="zoom:80%;" />

<h5 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">userdel [-r] 用户名</span><br><span class="line"><span class="comment"># -r： 代表删除用户的同时，删除该用户的HOME目录</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果出现如下错误，原因是因为多次切换用户，造成进程被占用，使用Ctrl+d退出即可(多退出几次)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># userdel -r java2003</span></span><br><span class="line">userdel: user java2003 is currently used by process 1742</span><br></pre></td></tr></table></figure>



<h5 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">usermod [-cgd] [选项指定的具体内容] 用户名</span><br><span class="line"><span class="comment"># -c：代表comment，给用户添加一段注释</span></span><br><span class="line"><span class="comment"># -g：代表group，可以修改用户的所在组</span></span><br><span class="line"><span class="comment"># -d：代表指定用户的HOME目录</span></span><br></pre></td></tr></table></figure>



<h4 id="用户组的操作"><a href="#用户组的操作" class="headerlink" title="用户组的操作"></a>用户组的操作</h4><blockquote>
<p>用户的身份除了用户本身，还会分配到指定的用户组，可以通过用户组对设置一些文件的操作权限</p>
</blockquote>
<h5 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">groupadd 用户组名</span><br></pre></td></tr></table></figure>



<h5 id="修改用户组"><a href="#修改用户组" class="headerlink" title="修改用户组"></a>修改用户组</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">groupmod [-n] [选项指定的具体内容] 用户组名</span><br><span class="line"><span class="comment"># -n 修改用户组名称</span></span><br></pre></td></tr></table></figure>



<h5 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">groupdel 用户组名</span><br><span class="line"><span class="comment"># 只能删除不存在用户的用户组</span></span><br><span class="line"><span class="comment"># 只能删除一个没有用户的组</span></span><br></pre></td></tr></table></figure>



<h3 id="文件权限的修改【重点】"><a href="#文件权限的修改【重点】" class="headerlink" title="文件权限的修改【重点】"></a>文件权限的修改【<code>重点</code>】</h3><hr>
<blockquote>
<p>首先我们要清楚Linux文件的权限信息</p>
<p>在Linux中输入ls -l 或者 ll查看文件和目录的详细信息</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">文件详情</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/xJvgzjl3If748nE.png" alt="1586268971368"></td>
</tr>
<tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/L7miyQdEs84xlJZ.png" alt="1597819507393" style="zoom:80%;" /></td>
</tr>
</tbody></table>
<blockquote>
<p>实例中，a目录的第一个属性用“d”标识这个a是一个目录。</p>
<p>anaconda-ks.cfg第一个属性用“-”标识他是一个文件。</p>
<p>bin第一个属性用“l”标识他是一个链接</p>
<p>在Linux文件详情的后面属性需要分为三组查看</p>
<ul>
<li>rwx： 代表文件拥有者的权限</li>
<li>rwx： 代表文件所属组用户的权限</li>
<li>rwx： 代表其他用户对当前文件的操作权限<ul>
<li>r： 代表read，读的权限</li>
<li>w： 代表write，写的权限</li>
<li>x： 代表execute，代表执行权限</li>
</ul>
</li>
</ul>
<p>其余信息</p>
<ul>
<li><p>后续的第一个root：代表当前文件的拥有者</p>
</li>
<li><p>后续的第二个root： 代表当前文件的所属组</p>
</li>
<li><p>后续分别为：文件的大小和最后修改时间等信息</p>
</li>
</ul>
</blockquote>
<h4 id="对文件的权限修改"><a href="#对文件的权限修改" class="headerlink" title="对文件的权限修改"></a>对文件的权限修改</h4><blockquote>
<p>使用chmod对文件的权限进行修改，一种使用数字，一种使用符号……</p>
<ul>
<li>数字方式方便操作，不过要修改整体权限信息</li>
<li>符号方式更细粒度华，不过操作麻烦</li>
</ul>
</blockquote>
<h5 id="数字方式【推荐】"><a href="#数字方式【推荐】" class="headerlink" title="数字方式【推荐】"></a>数字方式【推荐】</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [-R] 777 文件|目录</span><br><span class="line"><span class="comment"># rwx在这三个权限中r：4，w：2，x：1</span></span><br><span class="line"><span class="comment"># -R： 当修改一个目录权限时，可以添加-R，将目录下的全部内容，都修改权限。</span></span><br></pre></td></tr></table></figure>



<h5 id="符号方式"><a href="#符号方式" class="headerlink" title="符号方式"></a>符号方式</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [-R] a=rw 文件|目录</span><br><span class="line"><span class="comment"># user：u，group：g，other：o，all：a</span></span><br><span class="line"><span class="comment"># read：r，write：w，execute：x</span></span><br><span class="line"><span class="comment"># 赋予权限的方式 , 添加：+，减掉：-，设定：=</span></span><br><span class="line"><span class="comment"># -R： 当修改一个目录权限时，可以添加-R，将目录下的全部内容，都修改权限。</span></span><br></pre></td></tr></table></figure>





<h4 id="文件拥有者及所属组修改"><a href="#文件拥有者及所属组修改" class="headerlink" title="文件拥有者及所属组修改"></a>文件拥有者及所属组修改</h4><blockquote>
<p>chown可以直接修改拥有者和所属组，chgrp只能修改所属组……</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改文件的拥有者和所属组</span></span><br><span class="line"><span class="built_in">chown</span> [-R] 拥有者：所属组 文件|目录</span><br><span class="line"><span class="comment"># 修改文件的拥有者</span></span><br><span class="line"><span class="built_in">chown</span> [-R] 拥有者 文件|目录</span><br><span class="line"><span class="comment"># 修改文件的所属组</span></span><br><span class="line"><span class="built_in">chgrp</span> [-R] 所属组 文件|目录</span><br></pre></td></tr></table></figure>



<h3 id="Linux的其他操作命令【重点】"><a href="#Linux的其他操作命令【重点】" class="headerlink" title="Linux的其他操作命令【重点】"></a>Linux的其他操作命令【<code>重点</code>】</h3><hr>
<h4 id="进程的操作"><a href="#进程的操作" class="headerlink" title="进程的操作"></a>进程的操作</h4><blockquote>
<p>需要用到类似Windows的结束进程时，在Linux下需要使用如下命令</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps -ef </span><br><span class="line"><span class="comment"># 查看全部正在运行的进程</span></span><br><span class="line">ps -ef | grep 搜索的内容</span><br><span class="line"><span class="comment"># 杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 pid</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙进程</span></span><br><span class="line">ps -ef | grep firewalld</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2021/12/29/y9KmitackzqFA7d.png" alt="1596635179099"></p>
<h4 id="服务的操作"><a href="#服务的操作" class="headerlink" title="服务的操作"></a>服务的操作</h4><blockquote>
<p>和Windows下的服务操作一致，只需使用如下命令，默认为centos7版本</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 针对服务的启动，停止，重启，开机自动启动，禁止开机自动启动，查看服务状态。</span></span><br><span class="line">systemctl start|stop|restart|<span class="built_in">enable</span>|<span class="built_in">disable</span>|status 服务名称</span><br><span class="line"></span><br><span class="line">systemctl stop firewalld     <span class="comment">#关闭防火墙，仅本次有效，下次开机，依旧会启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld  <span class="comment">#永久关闭防火墙，重启后有效</span></span><br><span class="line">reboot    <span class="comment">#重启</span></span><br></pre></td></tr></table></figure>



<h4 id="端口号查看"><a href="#端口号查看" class="headerlink" title="端口号查看"></a>端口号查看</h4><blockquote>
<p>如发现端口号被占用，可以使用如下方式查找pid，并结束进程</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 想使用指定的命令需要事先下载netstat</span></span><br><span class="line">yum -y install net-tools</span><br><span class="line"><span class="comment"># 查看端口号占用情况</span></span><br><span class="line">netstat -naop | grep 端口号</span><br></pre></td></tr></table></figure>



<h4 id="访问地址"><a href="#访问地址" class="headerlink" title="访问地址"></a>访问地址</h4><blockquote>
<p>类似浏览器访问路径，无法图形化显示，一般用于测试</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl 访问地址</span><br><span class="line"></span><br><span class="line"><span class="comment">#访问百度,会返回百度的内容</span></span><br><span class="line">curl www.baidu.com</span><br></pre></td></tr></table></figure>



<h4 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h4><blockquote>
<p>在Linux中查找指定文件，参数较多，如下为根据文件名称查询</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find 路径 -<span class="built_in">type</span> f | grep profile</span><br></pre></td></tr></table></figure>



<h4 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取曾经操作过的所有命令</span></span><br><span class="line"><span class="built_in">history</span></span><br></pre></td></tr></table></figure>



<h3 id="重点命令"><a href="#重点命令" class="headerlink" title="重点命令"></a>重点命令</h3><blockquote>
<p>6、7、8、10、11</p>
</blockquote>
<h3 id="Linux下安装软件"><a href="#Linux下安装软件" class="headerlink" title="Linux下安装软件"></a>Linux下安装软件</h3><hr>
<h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><blockquote>
<p>在Linux下安装JDK，并配置JAVA_HOME环境变量……</p>
</blockquote>
<h5 id="下载JDK的压缩包"><a href="#下载JDK的压缩包" class="headerlink" title="下载JDK的压缩包"></a>下载JDK的压缩包</h5><blockquote>
<p>去逛网下载压缩包，由于oracle官网更新，需要登录并同意协议才允许下载</p>
<p><a href=""> https://www.oracle.com/cn/java/technologies/javase/javase-jdk8-downloads.html</a></p>
</blockquote>
<h5 id="将jdk压缩包拉取到Linux系统中"><a href="#将jdk压缩包拉取到Linux系统中" class="headerlink" title="将jdk压缩包拉取到Linux系统中"></a>将jdk压缩包拉取到Linux系统中</h5><blockquote>
<p>需要使用图形化界面的Sftp拖拽到Linux操作系统</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Xterm的Sftp图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/EGU2gsncMYO8fCW.png" alt="1589258771046"></td>
</tr>
</tbody></table>
<h5 id="将jdk的压缩包解压"><a href="#将jdk的压缩包解压" class="headerlink" title="将jdk的压缩包解压"></a>将jdk的压缩包解压</h5><blockquote>
<p>后期大多软件都安装在&#x2F;usr&#x2F;local下，直接使用tar解压</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u261-linux-x64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>



<h5 id="将jdk的目录名修改一下"><a href="#将jdk的目录名修改一下" class="headerlink" title="将jdk的目录名修改一下"></a>将jdk的目录名修改一下</h5><blockquote>
<p>为了方便配置环境变量，修改一下目录名称</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"><span class="built_in">mv</span> jdk1.8.0_261 jdk8</span><br></pre></td></tr></table></figure>



<h5 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h5><blockquote>
<p>Linux提供了两种环境变量的文件</p>
<ul>
<li>第一个是用户级别的环境变量，存放在：~&#x2F;.bashrc</li>
<li>第二个是系统级别的环境变量，存放在：&#x2F;etc&#x2F;profile</li>
</ul>
<p>修改哪个文件都可以，毕竟虚拟机就我们自己使用</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在环境变量文件中，添加如下内容</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk8</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 重新加载环境变量文件</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 最终测试</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">测试效果</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/IVOHP5sdQKExwuz.png" alt="1596638102097"></td>
</tr>
</tbody></table>
<h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><blockquote>
<p>在MySQL下用yum的方式安装MySQL……</p>
</blockquote>
<h5 id="安装MySQL的YUM存储库"><a href="#安装MySQL的YUM存储库" class="headerlink" title="安装MySQL的YUM存储库"></a>安装MySQL的YUM存储库</h5><blockquote>
<p>使用wget下载即可，不过需要先下载wget，再通过wget下载rpm包</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先通过yum下载wget命令</span></span><br><span class="line">yum -y install wget</span><br><span class="line"><span class="comment"># 通过wget下载MySQL存储库</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>



<h5 id="安装下载好的rpm包"><a href="#安装下载好的rpm包" class="headerlink" title="安装下载好的rpm包"></a>安装下载好的rpm包</h5><blockquote>
<p>使用rpm包的命令直接安装</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装rpm包</span></span><br><span class="line">rpm -Uvh mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"><span class="comment"># 查看rpm包</span></span><br><span class="line">rpm -qa | grep 内容</span><br><span class="line"><span class="comment"># 卸载rpm  （不需要指定当前命令。。。）</span></span><br><span class="line">rpm -e --nodeps rpm名称</span><br></pre></td></tr></table></figure>



<h5 id="选择发行版本"><a href="#选择发行版本" class="headerlink" title="选择发行版本"></a>选择发行版本</h5><blockquote>
<p>由于默认安装8.0版本的MySQL，我们需要修改为5.7版本</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看一下默认选择的发行版本</span></span><br><span class="line">yum repolist all | grep mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2021/12/29/yQiZvkjU6xKLdnD.png" alt="1596636795087"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过编辑/etc/yum.repos.d/mysql-community.repo文件，去修改发行版本</span></span><br><span class="line">vi /etc/yum.repos.d/mysql-community.repo</span><br><span class="line"><span class="comment"># 将80的enabled更改为0，将57的enabled更改为1，保存即可，再次通过yum repolist all | grep mysql查看</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2021/12/29/2bAOiq1DIYhXRxE.png" alt="1596636951178"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#再次查看</span></span><br><span class="line">yum repolist all | grep mysql</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">MySQL安装版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/APgdLwWMSzDeqIk.png" alt="1586309805089"></td>
</tr>
</tbody></table>
<h5 id="安装MySQL社区版服务"><a href="#安装MySQL社区版服务" class="headerlink" title="安装MySQL社区版服务"></a>安装MySQL社区版服务</h5><blockquote>
<p>开始安装，这一步需要下载一段时间，下载失败就是网络较差了，学会科学上网</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>



<h5 id="启动MySQL服务，并连接"><a href="#启动MySQL服务，并连接" class="headerlink" title="启动MySQL服务，并连接"></a>启动MySQL服务，并连接</h5><blockquote>
<p>安装成功后，手动启动，并使用日志中的密码登陆，而且第一个操作必须是修改密码，才可后续正常操作</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动MySQL服务</span></span><br><span class="line">systemctl start mysqld.service</span><br><span class="line"><span class="comment"># 查看初始化密码</span></span><br><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br><span class="line"><span class="comment"># 连接MySQL服务</span></span><br><span class="line">mysql -u root -p</span><br><span class="line">Enter password:随机密码</span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;P@ssw0rd&#x27;</span>;</span><br><span class="line"><span class="comment"># 要求密码，必须携带大写字母，小写字母，数字，特殊符号</span></span><br></pre></td></tr></table></figure>



<h5 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h5><blockquote>
<p>默认MySQL禁止远程链接，需要单独创建一个用户开启远程链接，这样就可以在windows下使用图形化工具连接</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;ghy&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;P@ssw0rd&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"><span class="comment">#ghy为用户名，远程登录时，需要使用此用户登录</span></span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>



<h4 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h4><blockquote>
<p>在Linux下安装Tomcat，以便部署工程到Linux操作系统</p>
</blockquote>
<h5 id="下载Tomcat的压缩包"><a href="#下载Tomcat的压缩包" class="headerlink" title="下载Tomcat的压缩包"></a>下载Tomcat的压缩包</h5><blockquote>
<p>下载安装包</p>
<ol>
<li><a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a> </li>
<li><img src="Pictures\1596638379754.png" alt="1596638379754" style="zoom: 67%;" /></li>
<li><img src="https://s2.loli.net/2021/12/29/pLlrifX8k9R7VsZ.png" alt="1596638542579" style="zoom: 80%;" /></li>
<li>下载后，拖动到linux中即可</li>
</ol>
</blockquote>
<h5 id="解压压缩包-1"><a href="#解压压缩包-1" class="headerlink" title="解压压缩包"></a>解压压缩包</h5><blockquote>
<p>一样解压到&#x2F;usr&#x2F;local目录下</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.5.53.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>



<h5 id="启动Tomcat并监听日志"><a href="#启动Tomcat并监听日志" class="headerlink" title="启动Tomcat并监听日志"></a>启动Tomcat并监听日志</h5><blockquote>
<p>通过.&#x2F;执行可运行文件，并使用tail监控日志信息</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跳转到tomcat的bin目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/apache-tomcat-8.5.53/bin</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./startup.sh</span><br><span class="line"><span class="comment"># 监控日志</span></span><br><span class="line"><span class="built_in">cd</span> ../logs</span><br><span class="line"><span class="built_in">tail</span> -f catalina.out</span><br><span class="line"><span class="comment"># 启动成功如下</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">日志及Tomcat首页</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/Pictures/1586313889843.png" alt="1586313889843"></td>
</tr>
<tr>
<td align="center"><img src="https://s2.loli.net/2021/12/29/jskvNeROtY1uBb2.png" alt="1586313916362"></td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     	<span class="comment">&lt;!-- tomcat插件 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!-- http://localhost --&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis 设计模式</title>
    <url>/2021/10/30/mybatis_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="MyBatis中设计模式"><a href="#MyBatis中设计模式" class="headerlink" title="MyBatis中设计模式"></a>MyBatis中设计模式</h1><h2 id="Builder模式"><a href="#Builder模式" class="headerlink" title="Builder模式"></a><strong>Builder模式</strong></h2><ul>
<li>Builder模式的定义是“将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。”，如果一个对象的构建比较复杂，超出了构造函数所能包含的范围，就可以使用工厂模式和Builder模式，相对于工厂模式会产出一个完整的产品，Builder应用于更加复杂的对象的构建</li>
<li>Mybatis中的SqlSessionFactoryBuilder有很多build方法，根据不同的参数可以创建不同的工厂</li>
</ul>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><ul>
<li>Mybatis中比如SqlSessionFactory使用的是工厂模式，该工厂没有那么复杂的逻辑，是一个简单工厂模式。</li>
</ul>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul>
<li>单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</li>
<li>在Mybatis中有两个地方用到单例模式，ErrorContext和LogFactory，其中ErrorContext是用在每个线程范围内的单例，用于记录该线程的执行环境错误信息，而LogFactory则是提供给整个Mybatis使用的日志工厂，用于获得针对项目配置好的日志对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorContext</span> &#123;</span><br><span class="line">    <span class="comment">//通过ThrealLocal来保证线程安全</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ErrorContext&gt; LOCAL = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>();</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">ErrorContext</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> ErrorContext <span class="title function_">instance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ErrorContext</span> <span class="variable">context</span> <span class="operator">=</span> (ErrorContext)LOCAL.get();</span><br><span class="line">        <span class="keyword">if</span> (context == <span class="literal">null</span>) &#123;</span><br><span class="line">            context = <span class="keyword">new</span> <span class="title class_">ErrorContext</span>();</span><br><span class="line">            LOCAL.set(context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ul>
<li>当我们使用Configuration的getMapper方法时，会调用mapperRegistry.getMapper方法，而该方法又会调用mapperProxyFactory.newInstance(sqlSession)来生成一个具体的代理。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> T <span class="title function_">newInstance</span><span class="params">(MapperProxy&lt;T&gt; mapperProxy)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; mapperInterface &#125;, mapperProxy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">newInstance</span><span class="params">(SqlSession sqlSession)</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> <span class="title class_">MapperProxy</span>&lt;T&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">  <span class="keyword">return</span> newInstance(mapperProxy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><ul>
<li>识别组合模式的一个要点：实现了一个接口，又聚合了这个接口的集合，那么该类很有可能是组合模式中的组合对象；</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/8195388-f39fe8240f7adc66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/610/format/webp" alt="img"></p>
<ul>
<li>根节点接口</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface SqlNode &#123;</span><br><span class="line">  boolean apply(DynamicContext context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>树结构中非叶子节点的抽象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MixedSqlNode implements SqlNode &#123;</span><br><span class="line">  private List&lt;SqlNode&gt; contents;</span><br><span class="line"></span><br><span class="line">  public MixedSqlNode(List&lt;SqlNode&gt; contents) &#123;</span><br><span class="line">    this.contents = contents;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public boolean apply(DynamicContext context) &#123;</span><br><span class="line">    for (SqlNode sqlNode : contents) &#123;</span><br><span class="line">      sqlNode.apply(context);</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><ul>
<li>模板方法模式是所有模式中最为常见的几个模式之一，是基于继承的代码复用的基本技术。</li>
<li>在Mybatis中，sqlSession的SQL执行，都是委托给Executor实现的，Executor包含以下结构：</li>
<li><img src="https://i.loli.net/2020/10/14/iucmFl2ypzbGQKB.jpg" alt="img"></li>
</ul>
<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><ul>
<li>适配器模式(Adapter Pattern) ：将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。</li>
<li>在Mybatsi的logging包中，有一个Log接口，该接口定义了Mybatis直接使用的日志方法，Mybatis提供了多种日志框架的实现，这些实现都匹配这个Log接口所定义的接口方法，最终实现了所有外部日志框架到Mybatis日志包的适配。</li>
</ul>
<h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><ul>
<li>装饰模式(Decorator Pattern) ：动态地给一个对象增加一些额外的职责(Responsibility)，</li>
</ul>
<h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><ul>
<li>迭代器（Iterator）模式，又叫做游标（Cursor）模式。GOF给出的定义为：提供一种方法访问一个容器（container）对象中各个元素，而又不需暴露该对象的内部细节。</li>
<li>Mybatis的PropertyTokenizer是property包中的重量级类，该类会被reflection包中其他的类频繁的引用到。这个类实现了Iterator接口，在使用时经常被用到的是Iterator接口中的hasNext这个函数。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertyTokenizer</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;PropertyTokenizer&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String indexedName;</span><br><span class="line">  <span class="keyword">private</span> String index;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String children;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">PropertyTokenizer</span><span class="params">(String fullname)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">delim</span> <span class="operator">=</span> fullname.indexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (delim &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      name = fullname.substring(<span class="number">0</span>, delim);</span><br><span class="line">      children = fullname.substring(delim + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      name = fullname;</span><br><span class="line">      children = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    indexedName = name;</span><br><span class="line">    delim = name.indexOf(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (delim &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      index = name.substring(delim + <span class="number">1</span>, name.length() - <span class="number">1</span>);</span><br><span class="line">      name = name.substring(<span class="number">0</span>, delim);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getIndex</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getIndexedName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> indexedName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getChildren</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> children;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> children != <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> PropertyTokenizer <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PropertyTokenizer</span>(children);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Remove is not supported, as it has no meaning in the context of properties.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="委派模式"><a href="#委派模式" class="headerlink" title="委派模式"></a>委派模式</h2><p>BaseExecutor的一个子类缓存执行器通过派遣选择其他三个执行器来执行</p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>springMVC基础知识</title>
    <url>/2021/11/28/SpringMVC%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/11/28/csro2Xf7AHRYxhb.jpg" alt="MVClogo"></p>
<p>[TOC]</p>
<h3 id="一、SpringMVC"><a href="#一、SpringMVC" class="headerlink" title="一、SpringMVC"></a>一、SpringMVC</h3><hr>
<h4 id="1-1-引言"><a href="#1-1-引言" class="headerlink" title="1.1 引言"></a>1.1 引言</h4><blockquote>
<p><strong>java开源框架，Spring Framework的一个独立模块。</strong></p>
<p><strong>MVC框架,在项目中开辟MVC层次架构</strong>    </p>
<p><strong>对控制器中的功能 包装 简化 扩展践行工厂模式，功能架构在工厂之上</strong></p>
</blockquote>
<h4 id="1-2-MVC架构"><a href="#1-2-MVC架构" class="headerlink" title="1.2 MVC架构"></a>1.2 MVC架构</h4><h5 id="1-2-1-概念"><a href="#1-2-1-概念" class="headerlink" title="1.2.1 概念"></a>1.2.1 概念</h5><table>
<thead>
<tr>
<th>名称</th>
<th>职责</th>
</tr>
</thead>
<tbody><tr>
<td>Model</td>
<td>模型：即业务模型，负责完成业务中的数据通信处理，对应项目中的 service和dao</td>
</tr>
<tr>
<td>View</td>
<td>视图：渲染数据，生成页面。对应项目中的Jsp</td>
</tr>
<tr>
<td>Controller</td>
<td>控制器：直接对接请求，控制MVC流程，调度模型，选择视图。对应项目中的Servlet</td>
</tr>
</tbody></table>
<h5 id="1-2-2-好处"><a href="#1-2-2-好处" class="headerlink" title="1.2.2 好处"></a>1.2.2 好处</h5><blockquote>
<ul>
<li><p>MVC是现下软件开发中的最流行的代码结构形态;</p>
</li>
<li><p>人们根据负责的不同逻辑，将项目中的代码分成 M V C 3个层次;</p>
</li>
<li><p>层次内部职责单一，层次之间耦合度低;</p>
</li>
<li><p>符合低耦合 高内聚的设计理念。也实际有利于项目的长期维护。</p>
</li>
</ul>
</blockquote>
<h3 id="二、开发流程"><a href="#二、开发流程" class="headerlink" title="二、开发流程"></a>二、开发流程</h3><hr>
<h4 id="2-1-导入依赖"><a href="#2-1-导入依赖" class="headerlink" title="2.1 导入依赖"></a>2.1 导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-配置核心-前端-控制器"><a href="#2-2-配置核心-前端-控制器" class="headerlink" title="2.2 配置核心(前端)控制器"></a>2.2 配置核心(前端)控制器</h4><blockquote>
<p>作为一个MVC框架，首先要解决的是：如何能够收到请求！</p>
<p>所以MVC框架大都会设计一款前端控制器，选型在 Servlet 或 Filter两者之一,在框架最前沿率先工作，接收所有请求。</p>
<p>此控制器在接收到请求后，还会负责springMVC的核心的调度管理，所以既是前端又是核心。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 局部参数：声明配置文件位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Servlet启动时刻：可选 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-后端控制器"><a href="#2-3-后端控制器" class="headerlink" title="2.3 后端控制器"></a>2.3 后端控制器</h4><blockquote>
<p>等价于之前定义的Servlet</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">//声明这是一个控制器</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span>  <span class="comment">//访问路径 ，等价于url-pattern</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/test1&quot;)</span>  <span class="comment">//访问路径</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">hello1</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;index&quot;</span>; <span class="comment">// 跳转:/index.jsp  </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/test2&quot;)</span> <span class="comment">//访问路径</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">hello2</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;hello c9&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;views/users&quot;</span>;<span class="comment">//  跳转:/views/user.jsp</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-配置文件"><a href="#2-4-配置文件" class="headerlink" title="2.4 配置文件"></a>2.4 配置文件</h4><blockquote>
<p>默认名称：核心控制器名-servet.xml     默认位置：WEB-INF</p>
<p>随意名称：mvc.xml           随意位置：resources    但需要配置在核心控制器中</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> 	<span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span> </span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag">		<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">							http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">							http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">							http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">							http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">							http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 告知springmvc  哪些包中 存在 被注解的类 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qf.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 注册注解开发驱动 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 视图解析器</span></span><br><span class="line"><span class="comment">	     作用：1.捕获后端控制器的返回值=&quot;index&quot;</span></span><br><span class="line"><span class="comment">	          2.解析： 在返回值的前后 拼接 ==&gt; &quot;/index.jsp&quot;</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-5-访问"><a href="#2-5-访问" class="headerlink" title="2.5 访问"></a>2.5 访问</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">http://localhost：8989/hello/test1</span><br><span class="line">http://localhost：8989/hello/test2</span><br></pre></td></tr></table></figure>



<h3 id="三、接收请求参数"><a href="#三、接收请求参数" class="headerlink" title="三、接收请求参数"></a>三、接收请求参数</h3><hr>
<h4 id="3-1-基本类型参数"><a href="#3-1-基本类型参数" class="headerlink" title="3.1 基本类型参数"></a>3.1 基本类型参数</h4><blockquote>
<p>请求参数和方法的形参 同名即可</p>
</blockquote>
<blockquote>
<p>springMVC默认可以识别的日期字符串格式为： YYYY&#x2F;MM&#x2F;dd HH:mm:ss<br>通过@DateTimeFormat可以修改默认日志格式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// id  name gender</span></span><br><span class="line"><span class="comment">// http://localhost:8989/xxx/../test1?id=1&amp;name=zzz&amp;gender=false&amp;birth=2018-12-12 12:20:30</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam1</span><span class="params">(Integer id,</span></span><br><span class="line"><span class="params">                         String name,</span></span><br><span class="line"><span class="params">                         Boolean gender,</span></span><br><span class="line"><span class="params">                         <span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span>Date birth)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;test param1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-实体收参【重点】"><a href="#3-2-实体收参【重点】" class="headerlink" title="3.2 实体收参【重点】"></a>3.2 实体收参【<code>重点</code>】</h4><blockquote>
<p>请求参数和实体的属性 同名即可</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Date birth;</span><br><span class="line">	<span class="keyword">private</span> Boolean gender;</span><br><span class="line">	<span class="comment">//set/get ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//http://localhost:8989/.../test2?id=1&amp;name=zzz&amp;gender=false&amp;birth=2018-12-12 12:20:30</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam2</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;test param2&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;user:&quot;</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-数组收参"><a href="#3-3-数组收参" class="headerlink" title="3.3 数组收参"></a>3.3 数组收参</h4><blockquote>
<p>简单类型的 数组</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fb&quot;</span>/&gt;</span>足球 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bb&quot;</span>/&gt;</span>篮球 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;vb&quot;</span>/&gt;</span>排球</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//http://localhost:8989/.../test3?hobby=football&amp;hobby=basketball</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam3</span><span class="params">(String[] hobby)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(String h:hobby)&#123;</span><br><span class="line">        System.out.print(h+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-集合收参-【了解】"><a href="#3-4-集合收参-【了解】" class="headerlink" title="3.4 集合收参 【了解】"></a>3.4 集合收参 【了解】</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserList</span> &#123;</span><br><span class="line">	<span class="comment">//private User[] users;</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">	<span class="comment">//set/get..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;input type=&quot;text&quot; name=&quot;users[0].id&quot;/&gt;</span></span><br><span class="line"><span class="comment">// post请求：http://...?users[0].id=1&amp;users[0].name=zhangsan&amp;users[0].birth=2018-12-12&amp;users[1].id=2&amp;....</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam4</span><span class="params">(UserList userList)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(User user:userList.getUsers())&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-5-路径参数"><a href="#3-5-路径参数" class="headerlink" title="3.5 路径参数"></a>3.5 路径参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#123;id&#125; 定义名为id的路径；【/hello/&#123;id&#125;】的匹配能力和【/hello/*】等价</span></span><br><span class="line"><span class="comment">// http://localhost:8989/.../hello/10   &#123;id&#125;匹配到10</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="comment">// @PathVariable将&#123;id&#125;路径匹配到值赋给id参数</span></span><br><span class="line"><span class="comment">// 路径名和参数名相同则@PathVariable(&quot;id&quot;)可简写为 @PathVariable</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam5</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+id);            </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8989/.../hello/tom   &#123;username&#125;匹配到tom</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam6</span><span class="params">(<span class="meta">@PathVariable(&quot;username&quot;)</span> String name)</span>&#123;<span class="comment">//将&#123;username&#125;路径匹配到的值赋给name参数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-6-中文乱码"><a href="#3-6-中文乱码" class="headerlink" title="3.6 中文乱码"></a>3.6 中文乱码</h4><blockquote>
<p>首先，页面中字符集统一</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">JSP : &lt;%<span class="meta">@page</span>  pageEncoding=<span class="string">&quot;utf-8&quot;</span> %&gt;</span><br><span class="line">HTML : &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其次，tomcat中字符集设置，对get请求中，中文参数乱码有效</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Tomcat配置：URIEncoding=utf-8</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最后，设置此filter，对post请求中，中文参数乱码有效</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web.xml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 此过滤器会进行：request.setCharactorEncoding(&quot;utf-8&quot;); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="四、跳转"><a href="#四、跳转" class="headerlink" title="四、跳转"></a>四、跳转</h3><hr>
<h4 id="4-1-转发"><a href="#4-1-转发" class="headerlink" title="4.1 转发"></a>4.1 转发</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/forw&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForwardController</span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testForward</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test forward1&quot;</span>);</span><br><span class="line">        <span class="comment">// 转发跳转 /views/users.jsp</span></span><br><span class="line">        <span class="comment">// return &quot;views/users&quot;;//和下一行等价</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/views/users.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testForward2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test forward2&quot;</span>);</span><br><span class="line">        <span class="comment">//转发到  /forw/test1</span></span><br><span class="line">        <span class="comment">//return &quot;forward:test1&quot;;//相对路径(转发到本类中的test1)</span></span><br><span class="line">        <span class="comment">//转发到  /forw/test1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/forw/test1&quot;</span>; <span class="comment">//绝对路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-重定向"><a href="#4-2-重定向" class="headerlink" title="4.2 重定向"></a>4.2 重定向</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/redir&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedirectController</span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRedirect1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test redirect1&quot;</span>);</span><br><span class="line">        <span class="comment">//重定向到 /redir/test1</span></span><br><span class="line">        <span class="comment">//return &quot;redirect:test1&quot;; //相对路径(转发到本类中的test1)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/redir/test1&quot;</span>;<span class="comment">//绝对路径</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRedirect2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test redirect2&quot;</span>);</span><br><span class="line">        <span class="comment">//重定向到 /views/users.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/view/user.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-跳转细节"><a href="#4-3-跳转细节" class="headerlink" title="4.3 跳转细节"></a>4.3 跳转细节</h4><blockquote>
<ul>
<li><p>在增删改之后，为了防止请求重复提交，重定向跳转</p>
</li>
<li><p>在查询之后，可以做转发跳转</p>
</li>
</ul>
</blockquote>
<h3 id="五、传值"><a href="#五、传值" class="headerlink" title="五、传值"></a>五、传值</h3><hr>
<blockquote>
<p>C得到数据后，跳转到V，并向V传递数据。进而V中可以渲染数据，让用户看到含有数据的页面</p>
<p>转发跳转：Request作用域</p>
<p>重定向跳转：Session作用域</p>
</blockquote>
<h4 id="5-1-Request和Session"><a href="#5-1-Request和Session" class="headerlink" title="5.1 Request和Session"></a>5.1 Request和Session</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//形参中 即可获得 request 和 session对象</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testData</span><span class="params">(HttpSession session,HttpServletRequest req，Integer id)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">    req.setAttribute(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    req.setAttribute(<span class="string">&quot;users&quot;</span>,Arrays.asList(<span class="keyword">new</span> <span class="title class_">User</span>(),<span class="keyword">new</span> <span class="title class_">User</span>()));</span><br><span class="line">    <span class="comment">//return &quot;test2&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/WEB-INF/test2.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-JSP中取值"><a href="#5-2-JSP中取值" class="headerlink" title="5.2 JSP中取值"></a>5.2 JSP中取值</h4><blockquote>
<p>建议：重点复习 EL  JSTL</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jsp中用EL表达式 取值即可</span></span><br><span class="line">&lt;fmt:formatDate value=<span class="string">&quot;$&#123;sessionScope.user.birth&#125;&quot;</span> pattern=<span class="string">&quot;yyyy-MM-dd&quot;</span>/&gt; &lt;br/&gt;</span><br><span class="line">$&#123;sessionScope.user.birth&#125; &lt;br&gt;</span><br><span class="line">$&#123;requestScope.age&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-Model"><a href="#5-3-Model" class="headerlink" title="5.3 Model"></a>5.3 Model</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//model中的数据，会在V渲染之前，将数据复制一份给request</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testData</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//jsp中用EL表达式 取值即可</span></span><br><span class="line">$&#123;requestScope.name&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-4-ModelAndView"><a href="#5-4-ModelAndView" class="headerlink" title="5.4 ModelAndView"></a>5.4 ModelAndView</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//modelandview 可以集中管理 跳转和数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testData</span><span class="params">()</span>&#123;<span class="comment">//返回值类型为ModelAndView</span></span><br><span class="line">    <span class="comment">//新建ModelAndView对象</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">// 设置视图名，即如何跳转</span></span><br><span class="line">    mv.setViewName(<span class="string">&quot;forward:/index.jsp&quot;</span>);</span><br><span class="line">    <span class="comment">// 增加数据</span></span><br><span class="line">    mv.addObject(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//jsp中用EL表达式 取值即可</span></span><br><span class="line">$&#123;requestScope.age&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-5-SessionAttributes"><a href="#5-5-SessionAttributes" class="headerlink" title="5.5 @SessionAttributes"></a>5.5 @SessionAttributes</h4><blockquote>
<ul>
<li><p>@SessionAttributes({“gender”,”name”})  ：model中的 name和gender 会存入session中</p>
</li>
<li><p>SessionStatus 移除session</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@SessionAttributes(&#123;&quot;gender&quot;,&quot;name&quot;&#125;)</span> <span class="comment">// model中的 name和gender 会存入session中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model m)</span>&#123;</span><br><span class="line">        m.addAttribute(<span class="string">&quot;gender&quot;</span>,<span class="literal">true</span>); <span class="comment">// 会存入session</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhj&quot;</span>); <span class="comment">// 会存入session</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(SessionStatus status)</span>&#123;</span><br><span class="line">        <span class="comment">// 移除通过SessionAttributes存入的session</span></span><br><span class="line">        status.setComplete();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="六、静态资源"><a href="#六、静态资源" class="headerlink" title="六、静态资源"></a>六、静态资源</h3><hr>
<h4 id="6-1-静态资源问题"><a href="#6-1-静态资源问题" class="headerlink" title="6.1 静态资源问题"></a>6.1 静态资源问题</h4><blockquote>
<p>静态资源：html，js文件，css文件，图片文件</p>
</blockquote>
<blockquote>
<p>静态文件没有url-pattern,所以默认是访问不到的，之所以可以访问，是因为，tomcat中有一个全局的servlet：org.apache.catalina.servlets.DefaultServlet，它的url-pattern是 “&#x2F;“,是全局默认的Servlet.  所以每个项目中不能匹配的静态资源的请求，有这个Servlet来处理即可。</p>
</blockquote>
<blockquote>
<p>但，在SpringMVC中DispatcherServlet也采用了 “&#x2F;” 作为url-pattern, 则项目中不会再使用全局的Serlvet，则静态资源不能完成访问。</p>
</blockquote>
<h4 id="6-2-解决方案1"><a href="#6-2-解决方案1" class="headerlink" title="6.2 解决方案1"></a>6.2 解决方案1</h4><blockquote>
<p>DispathcerServlet采用其他的url-pattern</p>
<p>此时，所有访问handler的路径都要以 action结尾！！</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc9<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc9<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-3-解决方案2"><a href="#6-3-解决方案2" class="headerlink" title="6.3 解决方案2"></a>6.3 解决方案2</h4><blockquote>
<p>DispathcerServlet的url-pattern依然采用 “&#x2F;“,但追加配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  额外的增加一个handler，且其requestMapping:  &quot;/**&quot; 可以匹配所有请求，但是优先级最低</span></span><br><span class="line"><span class="comment">  所以如果其他所有的handler都匹配不上，请求会转向 &quot;/**&quot; ,恰好，这个handler就是处理静态资源的</span></span><br><span class="line"><span class="comment">  处理方式：将请求转会到tomcat中名为default的Servlet</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-4-解决方案3"><a href="#6-4-解决方案3" class="headerlink" title="6.4 解决方案3"></a>6.4 解决方案3</h4><blockquote>
<ul>
<li>mapping是访问路径，location是静态资源存放的路径</li>
<li>将&#x2F;html&#x2F;** 中 &#x2F;**匹配到的内容，拼接到 &#x2F;hhh&#x2F;后<br>http:&#x2F;&#x2F;….&#x2F;html&#x2F;a.html  访问 &#x2F;hhh&#x2F;a.html</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/html/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/hhh/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="七、Json处理"><a href="#七、Json处理" class="headerlink" title="七、Json处理"></a>七、Json处理</h3><hr>
<h4 id="7-1-导入依赖"><a href="#7-1-导入依赖" class="headerlink" title="7.1 导入依赖"></a>7.1 导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Jackson springMVC默认的Json解决方案选择是 Jackson，所以只需要导入jackson的jar，即可使用。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="7-2-使用-ResponseBody"><a href="#7-2-使用-ResponseBody" class="headerlink" title="7.2 使用@ResponseBody"></a>7.2 使用@ResponseBody</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonController</span>&#123;    </span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span> <span class="comment">//将handler的返回值，转换成json(jackson),并将json响应给客户端。</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">hello1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// @ResponseBody还可以用在handler的返回值上</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> List&lt;User&gt; <span class="title function_">hello2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = Arrays.asList(<span class="keyword">new</span> <span class="title class_">User</span>(),<span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果返回值已经是字符串，则不需要转json，直接将字符串响应给客户端 </span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/test3&quot;,produces = &quot;text/html;charset=utf-8&quot;)</span> <span class="comment">//produces 防止中文乱码</span></span><br><span class="line">    <span class="meta">@ResponseBody</span> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-3-使用-RestController"><a href="#7-3-使用-RestController" class="headerlink" title="7.3 使用@RestController"></a>7.3 使用@RestController</h4><blockquote>
<p>Controller类上加了@RestController注解，等价于在类中的每个方法上都加了@ResponseBody</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonController</span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">hello1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@ResponseBody还可以用在handler的返回值上</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">hello2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = Arrays.asList(<span class="keyword">new</span> <span class="title class_">User</span>(),<span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7-4-使用-RequestBody"><a href="#7-4-使用-RequestBody" class="headerlink" title="7.4 使用@RequestBody"></a>7.4 使用@RequestBody</h4><blockquote>
<h4 id="RequestBody-接收Json参数"><a href="#RequestBody-接收Json参数" class="headerlink" title="@RequestBody, 接收Json参数"></a><strong>@RequestBody</strong>, 接收Json参数</h4></blockquote>
<h5 id="7-4-1-定义Handler"><a href="#7-4-1-定义Handler" class="headerlink" title="7.4.1 定义Handler"></a>7.4.1 定义Handler</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Boolean gender;</span><br><span class="line">    <span class="comment">//set get</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;<span class="comment">//@RequestBody将请求体中的json数据转换为java对象</span></span><br><span class="line">    System.out.println(<span class="string">&quot;cap2&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;Post user :&quot;</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-4-2-Ajax发送json"><a href="#7-4-2-Ajax发送json" class="headerlink" title="7.4.2 Ajax发送json"></a>7.4.2 Ajax发送json</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;post&quot;</span>,<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/users?&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>());</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;application/json&quot;</span>);<span class="comment">//设置请求头</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;shine&quot;,&quot;gender&quot;:&quot;true&quot;&#125;&#x27;</span>);<span class="comment">//传递json串</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ajax</span></span><br><span class="line"><span class="keyword">var</span> user = &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;shine&quot;</span>&#125;;</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/json2/test4&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">contentType</span>:<span class="string">&quot;application/json&quot;</span>,<span class="comment">//声明请求参数类型为 json</span></span><br><span class="line">    <span class="attr">data</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user),<span class="comment">// 转换js对象成json</span></span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="7-5-Jackson常用注解"><a href="#7-5-Jackson常用注解" class="headerlink" title="7.5 Jackson常用注解"></a>7.5 Jackson常用注解</h4><h5 id="7-5-1-日期格式化"><a href="#7-5-1-日期格式化" class="headerlink" title="7.5.1 日期格式化"></a>7.5.1 日期格式化</h5><blockquote>
<p>@JsonFormat(pattern&#x3D;”yyyy-MM-dd HH:mm:ss”,timezone &#x3D; “GMT+8”)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Date birth;</span><br><span class="line">    ....</span><br><span class="line">    get/set</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-5-2-属性名修改"><a href="#7-5-2-属性名修改" class="headerlink" title="7.5.2 属性名修改"></a>7.5.2 属性名修改</h5><blockquote>
<p>@JsonProperty(“new_name”)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">	<span class="meta">@JsonProperty(&quot;new_id&quot;)</span> <span class="comment">//不再使用原属性名，而是 &quot;new_id&quot;</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    ....</span><br><span class="line">    get/set</span><br><span class="line">&#125;</span><br><span class="line">输出的json：&#123;“new_id”:xx,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xx&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-5-3-属性忽略"><a href="#7-5-3-属性忽略" class="headerlink" title="7.5.3 属性忽略"></a>7.5.3 属性忽略</h5><blockquote>
<p>@JsonIgnore</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@JsonIgnore</span> <span class="comment">// 生成json时，忽略此属性</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    ....</span><br><span class="line">    get/set</span><br><span class="line">&#125;</span><br><span class="line">输出json时: &#123;<span class="string">&quot;id&quot;</span>:xx&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-5-4-null和empty属性排除"><a href="#7-5-4-null和empty属性排除" class="headerlink" title="7.5.4 null和empty属性排除"></a>7.5.4 null和empty属性排除</h5><blockquote>
<p>Jackson 默认会输出null值的属性，如果不需要，可以排除。</p>
<p>@JsonInclude(JsonInclude.Include.NON_NULL) &#x2F;&#x2F;null值 属性不输出<br>@JsonInclude(value&#x3D; JsonInclude.Include.NON_EMPTY) &#x2F;&#x2F; empty属性不输出( 空串，长度为0的集合，null值)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span> <span class="comment">// 若&quot;name==null&quot; 忽略此属性</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@JsonInclude(value= JsonInclude.Include.NON_EMPTY)</span>  <span class="comment">// 若hobby长度为0或==null 忽略此属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobby;</span><br><span class="line">    ....</span><br><span class="line">    get/set</span><br><span class="line">&#125;</span><br><span class="line">如果name=<span class="literal">null</span>,且 hobby长度为<span class="number">0</span>，则输出json时：&#123;<span class="string">&quot;id&quot;</span>:xx&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-5-5-自定义序列化"><a href="#7-5-5-自定义序列化" class="headerlink" title="7.5.5 自定义序列化"></a>7.5.5 自定义序列化</h5><blockquote>
<p>@JsonSerialize(using &#x3D; MySerializer.class) &#x2F;&#x2F; 使用MySerializer输出某属性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@JsonSerialize(using = MySerializer.class)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Double</span> <span class="variable">salary</span> <span class="operator">=</span> <span class="number">10000.126</span>;<span class="comment">//在输出此属性时，使用MySerializer输出</span></span><br><span class="line">    ....</span><br><span class="line">    get/set</span><br><span class="line">&#125;</span><br><span class="line">则输出json时：&#123;<span class="string">&quot;id&quot;</span>:xx,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;salary&quot;</span>:<span class="number">10000.13</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySerializer</span> <span class="keyword">extends</span> <span class="title class_">JsonSerializer</span>&lt;Double&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// value即 Double salary的值</span></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Double value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 将Double salary的值 四舍五入</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">number</span> <span class="operator">=</span> BigDecimal.valueOf(value).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">        <span class="comment">// 输出 四舍五入后的值</span></span><br><span class="line">        gen.writeNumber(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7-6-FastJson"><a href="#7-6-FastJson" class="headerlink" title="7.6 FastJson"></a>7.6 FastJson</h4><h5 id="7-6-1-导入依赖"><a href="#7-6-1-导入依赖" class="headerlink" title="7.6.1 导入依赖"></a>7.6.1 导入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- FastJson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.54<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="7-6-2-安装FastJson"><a href="#7-6-2-安装FastJson" class="headerlink" title="7.6.2 安装FastJson"></a>7.6.2 安装FastJson</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 安装FastJson,转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 声明转换类型:json --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="7-6-3-使用"><a href="#7-6-3-使用" class="headerlink" title="7.6.3 使用"></a>7.6.3 使用</h5><blockquote>
<p>@ResponseBody  @RequestBody @RestController 使用方法不变</p>
</blockquote>
<h5 id="7-6-4-常用注解"><a href="#7-6-4-常用注解" class="headerlink" title="7.6.4 常用注解"></a>7.6.4 常用注解</h5><blockquote>
<ul>
<li>日期格式化：@JSONField(format&#x3D;”yyyy&#x2F;MM&#x2F;dd”)</li>
<li>属性名修改：@JSONField(name&#x3D;”birth”）</li>
<li>忽略属性：@JSONField(serialize &#x3D; false)</li>
<li>包含null值：@JSONField(serialzeFeatures &#x3D; SerializerFeature.WriteMapNullValue)  默认会忽略所有null值,有此注解会输出null<ul>
<li>@JSONField(serialzeFeatures &#x3D; SerializerFeature.WriteNullStringAsEmpty)  null的String输出为””</li>
</ul>
</li>
<li>自定义序列化：@JSONField(serializeUsing &#x3D; MySerializer2.class)</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">	<span class="meta">@JSONField(serialize = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@JSONField(name=&quot;NAME&quot;,serialzeFeatures = SerializerFeature.WriteNullStringAsEmpty)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@JSONField(serialzeFeatures = SerializerFeature.WriteMapNullValue)</span> </span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">	<span class="meta">@JSONField(format=&quot;yyyy/MM/dd&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="meta">@JSONField(serializeUsing = MySerializer2.class)</span></span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySerializer2</span> <span class="keyword">implements</span> <span class="title class_">ObjectSerializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType,</span></span><br><span class="line"><span class="params">                      <span class="type">int</span> features)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">value</span> <span class="operator">=</span> (Double) object; <span class="comment">// salary属性值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> value + <span class="string">&quot;元&quot;</span>;<span class="comment">// 在salary后拼接 “元”</span></span><br><span class="line">        serializer.write(text); <span class="comment">// 输出拼接后的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>，<span class="literal">null</span>，<span class="literal">null</span>，<span class="keyword">new</span> <span class="title class_">Date</span>()，<span class="number">100.5</span>);</span><br><span class="line"><span class="comment">// 如上对象，转换json：</span></span><br><span class="line">&#123;NAME:<span class="string">&quot;&quot;</span>，city:<span class="literal">null</span>，<span class="string">&quot;birth&quot;</span>:<span class="string">&quot;2020/12/12&quot;</span>，<span class="string">&quot;salary&quot;</span>:<span class="string">&quot;100.5元&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="八、异常解析器"><a href="#八、异常解析器" class="headerlink" title="八、异常解析器"></a>八、异常解析器</h3><hr>
<h4 id="8-1-现有方案，分散处理"><a href="#8-1-现有方案，分散处理" class="headerlink" title="8.1 现有方案，分散处理"></a>8.1 现有方案，分散处理</h4><blockquote>
<p>Controller中的每个Handler自己处理异常</p>
<p>此种处理方案，异常处理逻辑，分散在各个handler中，不利于集中管理</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">xxx</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">    	...</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception1 e)&#123;</span><br><span class="line">    	e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/xx/error1&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception2 e)&#123;</span><br><span class="line">    	e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/xx/error2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-2-异常解析器，统一处理"><a href="#8-2-异常解析器，统一处理" class="headerlink" title="8.2 异常解析器，统一处理"></a>8.2 异常解析器，统一处理</h4><blockquote>
<p>Controller中的每个Handler不再自己处理异常，而是直接throws所有异常。</p>
<p>定义一个“异常解析器” 集中捕获处理 所有异常</p>
<p>此种方案，在集中管理异常方面，更有优势！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerExceptionResolver</span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 异常解析器：主体逻辑</span></span><br><span class="line"><span class="comment">	 * 执行时刻：当handler中抛出异常时，会执行：捕获异常，并可以跳到错误页面</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> ModelAndView <span class="title function_">resolveException</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">			HttpServletResponse response, Object handler, Exception ex)</span> &#123;</span><br><span class="line">		ex.printStackTrace();<span class="comment">//打印异常栈</span></span><br><span class="line">		<span class="comment">//创建一个ModelAndView</span></span><br><span class="line">		<span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">		<span class="comment">//识别异常</span></span><br><span class="line">		<span class="keyword">if</span> (ex <span class="keyword">instanceof</span> Exception1) &#123;</span><br><span class="line">			mv.setViewName(<span class="string">&quot;redirect:/xxx/error1&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> Exception2)&#123;</span><br><span class="line">			mv.setViewName(<span class="string">&quot;redirect:/xxx/error2&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			mv.setViewName(<span class="string">&quot;redirect:/xxx/error&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> mv;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明异常解析器 --&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baizhi.exception.resolver.MyExResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="九、拦截器"><a href="#九、拦截器" class="headerlink" title="九、拦截器"></a>九、拦截器</h3><hr>
<h4 id="9-1-作用"><a href="#9-1-作用" class="headerlink" title="9.1 作用"></a>9.1 作用</h4><blockquote>
<p>作用：抽取handler中的冗余功能</p>
</blockquote>
<h4 id="9-2-定义拦截器"><a href="#9-2-定义拦截器" class="headerlink" title="9.2 定义拦截器"></a>9.2 定义拦截器</h4><blockquote>
<p>执行顺序： preHandle–postHandle–afterCompletion</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInter1</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line">	<span class="comment">//主要逻辑：在handler之前执行：抽取handler中的冗余代码</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">			HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;pre~~~&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        response.sendRedirect(&quot;/springMVC_day2/index.jsp&quot;);//响应</span></span><br><span class="line"><span class="comment">        return false;//中断请求</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//放行，后续的拦截器或handler就会执行</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//在handler之后执行:进一步的响应定制</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">			HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params">			ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;post~~&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//在页面渲染完毕之后，执行：资源回收</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">			HttpServletResponse response, Object handler, Exception ex)</span></span><br><span class="line">			<span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;after~~&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="9-3-配置拦截路径"><a href="#9-3-配置拦截路径" class="headerlink" title="9.3 配置拦截路径"></a>9.3 配置拦截路径</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/inter/test1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/inter/test2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/inter/test*&quot;</span>/&gt;</span> <span class="comment">&lt;!-- test开头 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/inter/**&quot;</span>/&gt;</span> <span class="comment">&lt;!-- /** 任意多级任意路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/inter/a/**&quot;</span>/&gt;</span>   <span class="comment">&lt;!--不拦截此路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baizhi.interceptor.MyInter1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>   <span class="comment">&lt;!--拦截器类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="十、上传"><a href="#十、上传" class="headerlink" title="十、上传"></a>十、上传</h3><hr>
<h4 id="10-1-导入jar"><a href="#10-1-导入jar" class="headerlink" title="10.1 导入jar"></a>10.1 导入jar</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="10-2-表单"><a href="#10-2-表单" class="headerlink" title="10.2 表单"></a>10.2 表单</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath &#125;/upload/test1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  file: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;source&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="10-3-上传解析器"><a href="#10-3-上传解析器" class="headerlink" title="10.3 上传解析器"></a>10.3 上传解析器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 上传解析器 </span></span><br><span class="line"><span class="comment">	     id必须是：“multipartResolver”</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最大可上传的文件大小  单位：byte  超出后会抛出MaxUploadSizeExceededException异常，可以异常解析器捕获 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1048576&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="10-4-Handler"><a href="#10-4-Handler" class="headerlink" title="10.4 Handler"></a>10.4 Handler</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello1</span><span class="params">(String username,MultipartFile source,HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">//文件的原始名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> source.getOriginalFilename();</span><br><span class="line">    <span class="comment">//定制全局唯一的命名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">unique</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">    <span class="comment">//获得文件的后缀</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">ext</span> <span class="operator">=</span> FilenameUtils.getExtension(filename);<span class="comment">//abc.txt   txt    hello.html  html</span></span><br><span class="line">    <span class="comment">//定制全局唯一的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uniqueFileName</span> <span class="operator">=</span> unique+<span class="string">&quot;.&quot;</span>+ext;</span><br><span class="line">    System.out.println(<span class="string">&quot;唯一的文件名:&quot;</span>+uniqueFileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件的类型</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> source.getContentType();</span><br><span class="line">    System.out.println(<span class="string">&quot;filename:&quot;</span>+filename+<span class="string">&quot; type:&quot;</span>+type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得 upload_file的磁盘路径 ==&gt; 在webapp目录下创建一个目录&quot;upload_file&quot;,且此目录初始不要为空，否则编译时被忽略</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">real_path</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;/upload_file&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;real_path:&quot;</span>+real_path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将上传的文件，存入磁盘路径中</span></span><br><span class="line">    <span class="comment">//source.transferTo(new File(&quot;d:/xxxx/xxxx/xx.jpg&quot;))</span></span><br><span class="line">    source.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(real_path+<span class="string">&quot;\\&quot;</span>+uniqueFileName));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="十一、下载"><a href="#十一、下载" class="headerlink" title="十一、下载"></a>十一、下载</h3><hr>
<h4 id="11-1-超链"><a href="#11-1-超链" class="headerlink" title="11.1 超链"></a>11.1 超链</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/download/test1?name=Koala.jpg&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="11-2-Handler"><a href="#11-2-Handler" class="headerlink" title="11.2 Handler"></a>11.2 Handler</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello1</span><span class="params">(String name,HttpSession session,HttpServletResponse response)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name:&quot;</span>+name);</span><br><span class="line">    <span class="comment">//获得要下载文件的绝对路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;/upload_file&quot;</span>);</span><br><span class="line">    <span class="comment">//文件的完整路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">real_path</span> <span class="operator">=</span> path+<span class="string">&quot;\\&quot;</span>+name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置响应头  告知浏览器，要以附件的形式保存内容   filename=浏览器显示的下载文件名</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;content-disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取目标文件，写出给客户端</span></span><br><span class="line">    IOUtils.copy(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(real_path), response.getOutputStream());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上一步，已经是响应了,所以此handler直接是void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="十二、验证码"><a href="#十二、验证码" class="headerlink" title="十二、验证码"></a>十二、验证码</h3><hr>
<h4 id="12-1-作用"><a href="#12-1-作用" class="headerlink" title="12.1 作用"></a>12.1 作用</h4><blockquote>
<p>防止暴力攻击，前端安全保障</p>
</blockquote>
<h4 id="12-2-导入jar"><a href="#12-2-导入jar" class="headerlink" title="12.2 导入jar"></a>12.2 导入jar</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Kaptcha --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="12-3-声明验证码组件"><a href="#12-3-声明验证码组件" class="headerlink" title="12.3 声明验证码组件"></a>12.3 声明验证码组件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>cap<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.google.code.kaptcha.servlet.KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>kaptcha.border<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>no<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>kaptcha.textproducer.char.length<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>4<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>kaptcha.textproducer.char.string<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>kaptcha.background.clear.to<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>211,229,237<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- session.setAttribute(&quot;captcha&quot;,&quot;验证码&quot;) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>kaptcha.session.key<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>captcha<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>cap<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/captcha<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="12-4-Page"><a href="#12-4-Page" class="headerlink" title="12.4 Page"></a>12.4 Page</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/captcha&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:85px&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cap&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#cap&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//刷新验证码</span></span></span><br><span class="line"><span class="language-javascript">            path = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>)+<span class="string">&quot;?&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">            $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,path);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="十三、REST"><a href="#十三、REST" class="headerlink" title="十三、REST"></a>十三、REST</h3><hr>
<h4 id="13-1-开发风格"><a href="#13-1-开发风格" class="headerlink" title="13.1 开发风格"></a>13.1 开发风格</h4><blockquote>
<p>是一种开发风格，遵从此风格开发软件，符合REST风格，则RESTFUL。</p>
</blockquote>
<blockquote>
<p>两个核心要求：</p>
<ul>
<li>每个资源都有唯一的标识(URL)</li>
<li>不同的行为，使用对应的http-method</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>访问标识</th>
<th>资源</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://localhost:8989/xxx/users">http://localhost:8989/xxx/users</a></td>
<td>所有用户</td>
</tr>
<tr>
<td><a href="http://localhost:8989/xxx/users/1">http://localhost:8989/xxx/users/1</a></td>
<td>用户1</td>
</tr>
<tr>
<td><a href="http://localhost:8989/xxx/users/1/orders">http://localhost:8989/xxx/users/1/orders</a></td>
<td>用户1的所有订单</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>标识</th>
<th>意图</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td><a href="http://localhost:8989/xxx/users">http://localhost:8989/xxx/users</a></td>
<td>查询所有用户</td>
</tr>
<tr>
<td>POST</td>
<td><a href="http://localhost:8989/xxx/users">http://localhost:8989/xxx/users</a></td>
<td>在所有用户中增加一个</td>
</tr>
<tr>
<td>PUT</td>
<td><a href="http://localhost:8989/xxx/users">http://localhost:8989/xxx/users</a></td>
<td>在所有用户中修改一个</td>
</tr>
<tr>
<td>DELETE</td>
<td><a href="http://localhost:8989/xxx/users/1">http://localhost:8989/xxx/users/1</a></td>
<td>删除用户1</td>
</tr>
<tr>
<td>GET</td>
<td><a href="http://localhost:8989/xxx/users/1">http://localhost:8989/xxx/users/1</a></td>
<td>查询用户1</td>
</tr>
<tr>
<td>GET</td>
<td><a href="http://localhost:8989/xxx/users/1/orders">http://localhost:8989/xxx/users/1/orders</a></td>
<td>查询用户1的所有订单</td>
</tr>
<tr>
<td>POST</td>
<td><a href="http://localhost:8989/xxx/users/1/orders">http://localhost:8989/xxx/users/1/orders</a></td>
<td>在用户1的所有订单中增加一个</td>
</tr>
</tbody></table>
<h4 id="13-2-优点"><a href="#13-2-优点" class="headerlink" title="13.2 优点"></a>13.2 优点</h4><blockquote>
<ul>
<li>**输出json：</li>
</ul>
</blockquote>
<h4 id="13-3-使用"><a href="#13-3-使用" class="headerlink" title="13.3 使用"></a>13.3 使用</h4><h5 id="13-3-1-定义Rest风格的-Controller"><a href="#13-3-1-定义Rest风格的-Controller" class="headerlink" title="13.3.1 定义Rest风格的 Controller"></a>13.3.1 定义Rest风格的 Controller</h5><blockquote>
<p>@RequestMapping(value&#x3D;”&#x2F;users”,method &#x3D; RequestMethod.GET)</p>
<p>等价</p>
<p>@GetMapping(“&#x2F;users”)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryAllUsers</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = ....</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Post user :&quot;</span>+user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;status:1&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PutMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Put user&quot;</span> user:<span class="string">&quot;+user);</span></span><br><span class="line"><span class="string">        return &quot;</span>&#123;status:<span class="number">1</span>&#125;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @GetMapping(&quot;</span>/users/&#123;id&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    public String queryOneUser(@PathVariable Integer id)&#123;//@PathVariable 接收路径中的值</span></span><br><span class="line"><span class="string">        System.out.println(&quot;</span>Get user id:<span class="string">&quot;+id);</span></span><br><span class="line"><span class="string">        return &quot;</span>&#123;status:<span class="number">1</span>&#125;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @DeleteMapping(&quot;</span>/users/&#123;id&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    public String deleteOneUser(@PathVariable Integer id)&#123;//@PathVariable 接收路径中的值</span></span><br><span class="line"><span class="string">        System.out.println(&quot;</span>delete user id:<span class="string">&quot;+id);</span></span><br><span class="line"><span class="string">        return &quot;</span>&#123;status:<span class="number">1</span>&#125;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="13-3-2-Ajax请求"><a href="#13-3-2-Ajax请求" class="headerlink" title="13.3.2 Ajax请求"></a>13.3.2 Ajax请求</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">putUser</span>(<span class="params"></span>)&#123; <span class="comment">// 发送更新请求 （增加请求发送方式也是如此）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    	<span class="comment">//定义 put，delete,get,post方式 即可，不用定义_method</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">open</span>(<span class="string">&quot;put&quot;</span>,<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/rest04/users&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    	<span class="comment">// 设置请求头</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;application/json&quot;</span>)；</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置请求参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> user = &#123;<span class="attr">id</span>:<span class="number">1</span>，<span class="attr">NAME</span>:<span class="string">&quot;shine&quot;</span>，<span class="attr">city</span>:<span class="string">&quot;bj&quot;</span>，<span class="string">&quot;birth&quot;</span>:<span class="string">&quot;2020/12/12&quot;</span>，<span class="string">&quot;salary&quot;</span>:<span class="number">100.5</span>&#125;;</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user));</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(xhr.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span>==<span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> ret = xhr.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 解析json，并输出</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(ret));</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    	<span class="comment">/*$.ajax(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            url:&#x27;$&#123;pageContext.request.contextPath&#125;/rest04/users&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            type:&#x27;put&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            contentType:&quot;application/json&quot;,//声明请求参数类型为 json</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            data:JSON.stringify(user),// 转换js对象成json</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            success:function(ret)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                console.log(JSON.parse(ret));</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;);*/</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">delUser</span>(<span class="params"></span>)&#123;  <span class="comment">// 发送删除请求</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//定义 put，delete,get,post方式 即可，不用定义_method</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">open</span>(<span class="string">&quot;delete&quot;</span>,<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/rest04/users/1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(xhr.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span>==<span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> ret = xhr.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(ret));</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="十四、跨域请求"><a href="#十四、跨域请求" class="headerlink" title="十四、跨域请求"></a>十四、跨域请求</h3><hr>
<h4 id="14-1-域"><a href="#14-1-域" class="headerlink" title="14.1 域"></a>14.1 域</h4><blockquote>
<p>域：协议+IP+端口</p>
<ul>
<li><p><a href="http://localhost:8989/">http://localhost:8989</a></p>
</li>
<li><p><a href="http://localhost:8080/">http://localhost:8080</a></p>
</li>
<li><p><a href="http://www.baidu.com/">http://www.baidu.com:80</a></p>
</li>
</ul>
</blockquote>
<h4 id="14-2-Ajax跨域问题"><a href="#14-2-Ajax跨域问题" class="headerlink" title="14.2 Ajax跨域问题"></a>14.2 Ajax跨域问题</h4><blockquote>
<ul>
<li><p>Ajax发送请求时，不允许跨域，以防用户信息泄露。</p>
</li>
<li><p>当Ajax跨域请求时，响应会被浏览器拦截(同源策略)，并报错。即浏览器默认不允许ajax跨域得到响应内容。</p>
</li>
<li><p>互相信任的域之间如果需要ajax访问，(比如前后端分离项目中，前端项目和后端项目之间)，则需要额外的设置才可正常请求。</p>
</li>
</ul>
</blockquote>
<h4 id="14-3-解决方案"><a href="#14-3-解决方案" class="headerlink" title="14.3 解决方案"></a>14.3 解决方案</h4><blockquote>
<ul>
<li><p>允许其他域访问</p>
</li>
<li><p>在被访问方的Controller类上，添加注解</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(&quot;http://localhost:8080&quot;)</span> <span class="comment">//允许此域发请求访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserController</span> &#123;</span><br><span class="line">	....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>携带对方cookie，使得session可用</p>
</li>
<li><p>在访问方，ajax中添加属性：withCredentials: true</p>
</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">     <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&quot;http://localhost:8989/web/sys/login&quot;</span>,</span><br><span class="line">     ...,</span><br><span class="line">     <span class="attr">xhrFields</span>: &#123;</span><br><span class="line">       <span class="comment">// 跨域携带cookie</span></span><br><span class="line">       <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br><span class="line">或</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 跨域携带cookie</span></span><br><span class="line">xhr.<span class="property">withCredentials</span>=<span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<h3 id="十五、SpringMVC执行流程"><a href="#十五、SpringMVC执行流程" class="headerlink" title="十五、SpringMVC执行流程"></a>十五、SpringMVC执行流程</h3><hr>
<table>
<thead>
<tr>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/Pictures/springMVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg" alt="springMVC执行流程"></td>
</tr>
</tbody></table>
<h3 id="十六、Spring整合"><a href="#十六、Spring整合" class="headerlink" title="十六、Spring整合"></a>十六、Spring整合</h3><hr>
<h4 id="16-1-整合思路"><a href="#16-1-整合思路" class="headerlink" title="16.1 整合思路"></a>16.1 整合思路</h4><blockquote>
<p>此时项目中有两个工厂</p>
<ul>
<li>DispatcherServlet 启动的springMVC工厂&#x3D;&#x3D;负责生产C及springMVC自己的系统组件</li>
<li>ContextLoaderListener 启动的spring工厂&#x3D;&#x3D;负责生产其他所有组件</li>
<li>springMVC的工厂会被设置为spring工厂的子工厂，可以随意获取spring工厂中的组件</li>
<li>整合过程，就是累加：代码+依赖+配置。然后将service注入给controller即可</li>
</ul>
</blockquote>
<h4 id="16-2-整合技巧"><a href="#16-2-整合技巧" class="headerlink" title="16.2 整合技巧"></a>16.2 整合技巧</h4><blockquote>
<p>两个工厂不能有彼此侵入，即，生产的组件不能有重合。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告知SpringMVC  哪些包中 存在 被注解的类</span></span><br><span class="line"><span class="comment">	use-default-filters=true 凡是被 @Controller @Service  @Repository注解的类，都会被扫描</span></span><br><span class="line"><span class="comment">	use-default-filters=false 默认不扫描包内的任何类, 只扫描include-filter中指定的类</span></span><br><span class="line"><span class="comment">	只扫描被@Controller注解的类</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhj&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告知Spring</span></span><br><span class="line"><span class="comment">     唯独不扫描@Controller注解的类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhj&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springMVC</category>
      </categories>
      <tags>
        <tag>springMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式实现</title>
    <url>/2022/02/27/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="单例模式实现"><a href="#单例模式实现" class="headerlink" title="单例模式实现"></a>单例模式实现</h1><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>第一次调用时才实例化对象</p>
<h3 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式非线程安全单例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton_01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton_01 instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton_01</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton_01 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != instance) <span class="keyword">return</span> instance;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Singleton_01</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton_02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton_02 instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton_02</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton_02 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != instance) <span class="keyword">return</span> instance;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Singleton_02</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="双检索"><a href="#双检索" class="headerlink" title="双检索"></a>双检索</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton_05</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton_05 instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton_05</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton_05 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="literal">null</span> != instance) <span class="keyword">return</span> instance;</span><br><span class="line">       <span class="keyword">synchronized</span> (Singleton_05.class)&#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="literal">null</span> == instance)&#123;</span><br><span class="line">               instance = <span class="keyword">new</span> <span class="title class_">Singleton_05</span>();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton_04</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton_04</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton_04</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton_04</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton_04 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton_03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton_03</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton_03</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton_03</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton_03 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>通过枚举实现单例,序列化和反序列化后持有对象哈希码相同，还是同一个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton_07</span> &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="keyword">private</span> User instance;</span><br><span class="line"></span><br><span class="line">    Singleton_07() &#123;</span><br><span class="line">        <span class="built_in">this</span>.instance = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>校验代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    System.out.println(Singleton_07.INSTANCE.getInstance().hashCode());</span><br><span class="line">    ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\object.txt&quot;</span>));</span><br><span class="line">    oos.writeObject(Singleton_07.INSTANCE);</span><br><span class="line">    oos.flush();</span><br><span class="line">    oos.close();</span><br><span class="line"></span><br><span class="line">    ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\object.txt&quot;</span>));</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">    Singleton_07 s= (Singleton_07) o;</span><br><span class="line">    System.out.println(s.getInstance().hashCode());</span><br><span class="line">    ois.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<p><img src="https://s2.loli.net/2022/02/23/3YDbpQ8cfdeSnG4.png" alt="image-20220223172244271"></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>单例模式</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>软链接和硬链接</title>
    <url>/2021/12/31/%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="ln命令"><a href="#ln命令" class="headerlink" title="ln命令"></a>ln命令</h1><blockquote>
<p>Linux ln（英文全拼：link files）命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。</p>
<p>当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> [参数][源文件或目录][目标文件或目录]</span><br></pre></td></tr></table></figure>

<p>命令参数</p>
<p><strong>必要参数</strong>：</p>
<ul>
<li>-b 删除，覆盖以前建立的链接</li>
<li>-d 允许超级用户制作目录的硬链接</li>
<li>-f 强制执行</li>
<li>-i 交互模式，文件存在则提示用户是否覆盖</li>
<li>-n 把符号链接视为一般目录</li>
<li>-s 软链接(符号链接)</li>
<li>-v 显示详细的处理过程</li>
</ul>
<p><strong>选择参数</strong>：</p>
<ul>
<li>-S “-S&lt;字尾备份字符串&gt; “或 “–suffix&#x3D;&lt;字尾备份字符串&gt;”</li>
<li>-V “-V&lt;备份方式&gt;”或”–version-control&#x3D;&lt;备份方式&gt;”</li>
<li>–help 显示帮助信息</li>
<li>–version 显示版本信息</li>
</ul>
<h1 id="相关概念："><a href="#相关概念：" class="headerlink" title="相关概念："></a>相关概念：</h1><p>　　链接：简单说，链接就是一种文件共享的方式，是POSIX中的概念，主流文件系统都支持链接文件。</p>
<p>　　inode：在Linux文件系统中，保存在磁盘的上的文件不管是什么类型，都给他分配一个编号，称为索引节点号inode。</p>
<p>　　Linux用ln命令创建软、硬链接。</p>
<h1 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h1><p>　　创建软链接：ln -s 源文件 软链接文件</p>
<p>　　示例：在&#x2F;opt目录下创建一个&#x2F;tmp&#x2F;test文件的软链接slnfile1</p>
<p><a href="https://img2020.cnblogs.com/blog/1540368/202008/1540368-20200811142831986-284467780.png"><img src="https://s2.loli.net/2021/12/31/tvesSzjQKmUOFuZ.png" alt="img"></a></p>
<p><a href="https://img2020.cnblogs.com/blog/1540368/202008/1540368-20200811144309420-1757845824.png"><img src="https://s2.loli.net/2021/12/31/1LrmMIyHGWoZjeh.png" alt="img"></a></p>
<p>　　总结：</p>
<p>　　　　1、软链接相当于Windows的快捷方式</p>
<p>　　　　2、软链接里面存放的是源文件的路径，指向源文件</p>
<p>　　　　3、删除源文件，软链接文件依然存在，但是无法通过软链接访问源文件，已经失效，并且白字红底闪烁</p>
<p>　　　　4、软链接和源文件是不通的文件，iNode号不同，文件类型也不同</p>
<p>　　　　5、所有连接文件的权限都是777，而实际权限是由链接指向的源文件权限决定的</p>
<h1 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h1><p>　　创建硬链接：ln 源文件 硬链接文件</p>
<p>　　示例：在&#x2F;opt目录下创建&#x2F;tmp&#x2F;test文件的硬链接hlnfile1</p>
<p><a href="https://img2020.cnblogs.com/blog/1540368/202008/1540368-20200811143925962-1981645330.png"><img src="https://s2.loli.net/2021/12/31/vaQOfNHzxcjGWyC.png" alt="img"></a></p>
<p><a href="https://img2020.cnblogs.com/blog/1540368/202008/1540368-20200811144356996-2098204672.png"><img src="https://s2.loli.net/2021/12/31/Xy7hgtqd5ujwAMv.png" alt="img"></a></p>
<p>　　总结：</p>
<p>　　　　1、具有相同iNode节点号的多个文件，互为硬链接文件</p>
<p>　　　　2、删除硬链接文件或者源文件任意之一，文件实体并未被删除，只有删除了所有硬链接文件和源文件，文件实体才被删除</p>
<p>　　　　3、硬链接文件只是文件的另一个入口</p>
<p>　　　　4、链接文件和源文件属性相同</p>
<p>　　　　5、不能跨分区，不能对目录使用</p>
<h1 id="硬链接和软链接区别"><a href="#硬链接和软链接区别" class="headerlink" title="硬链接和软链接区别"></a>硬链接和软链接区别</h1><p>　　1、软链接其实就是创建一个新文件，这个文件就是用来指向其他文件的，软链接文件的inode号跟源文件的inod不同</p>
<p>　　2、硬链接是不会创建inode号的，他只是在源文件的inode link count域里再增加1，因此硬链接不可以跨文件系统，软链接可以</p>
<p>　　3、硬链接是一个文件别名</p>
<p>　　4、硬链接不可以对不存在的文件和目录创建，软链接可以</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>软硬链接</tag>
      </tags>
  </entry>
  <entry>
    <title>路径中斜杠/和反斜杠\的区别</title>
    <url>/2021/12/09/%E8%B7%AF%E5%BE%84%E5%88%86%E5%89%B2%E7%AC%A6/</url>
    <content><![CDATA[<p>Unix系统使用斜杠&#x2F;作为路径分割符,而web应用最新使用在Unix系统上面，所以目前所有的网络地址都采用 斜杆&#x2F; 作为分隔符。</p>
<p>Windows系统中由于使用 斜杆&#x2F; 作为DOS命令提示符的参数标志了，为了不混淆，所以采用 反斜杠\ 作为路径分隔符。所以目前windows系统上的文件浏览器都是用 反斜杠\ 作为路径分隔符。随着发展，DOS系统已经被淘汰了，命令提示符也用的很少，斜杆和反斜杠在大多数情况下可以互换，没有影响。</p>
<ul>
<li>浏览器地址栏网址采用斜杠&#x2F;</li>
<li>windows文件浏览器采用反斜杠\</li>
<li>html网络路径采用斜杠&#x2F;</li>
<li>出现在普通字符串中的路径，如果代表的是windows文件路径，则使用 斜杆&#x2F; 和 反斜杠\ 是一样的；如果代表的是网络文件路径，则必须使用 斜杆&#x2F; ;</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>路径</tag>
        <tag>斜杠</tag>
        <tag>反斜杠</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis 官方文档学习1</title>
    <url>/2021/10/30/mybatis_%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A01/</url>
    <content><![CDATA[<h2 id="MyBatis获取数据库源"><a href="#MyBatis获取数据库源" class="headerlink" title="MyBatis获取数据库源"></a>MyBatis获取数据库源</h2><p><img src="https://i.loli.net/2020/10/13/ewFNX3kDuvyzZd1.png" alt="org. apache. ibatis. session. SqlSessionFacton&#39;Builder. build (java. io. InputStream)  ) org. apache. ibatis. builder. xml. XMLConfigBuilder. parse  ) org. apache. ibatis. bui Ider. xml. XMLConfigBui Ider. parseConfiguration  ) org. apache. ibatis. builder. xml. ULConfigBuilder. environmentsElement  ) org. apache. ibatis. bui Ider. xml. XMLConfigBui Ider. dataSourceEl ement  ) org. apache. ibatis. session. Configuration. "></p>
<p><img src="https://i.loli.net/2020/10/13/5K2xplsjeVUAfq8.png" alt="SqISessionF actoryBuiIder  build  XMLConfigBuiIder  environmentsEIement  TypeA I i as Reg istry  DataSou actory  OataSource  Environment  Configuration  dataSourceEIement  dataSourceEIement  —resolveCIass  —getDataSource  —dataSource  —setEnvironment "></p>
<h2 id="XML文件中-properties-加载顺序"><a href="#XML文件中-properties-加载顺序" class="headerlink" title="XML文件中(properties)加载顺序"></a>XML文件中(properties)加载顺序</h2><ul>
<li>如果一个属性在不只一个地方进行了配置，那么，MyBatis 将按照下面的顺序来加载： </li>
<li>​     • 首先读取在 properties 元素体内指定的属性。</li>
<li>​     • 然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属 性指定的路径读取属性文件，并覆盖之前读   取过的同名属性。</li>
<li>​    • 最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。 </li>
<li>因此，通过方法参数传递的属性具有最高优先级，resource&#x2F;url 属性中指定的配置文件 次之，最低优先级的则是 properties 元素中指定的属性。</li>
</ul>
<h2 id="类型处理器（typeHandlers）"><a href="#类型处理器（typeHandlers）" class="headerlink" title="类型处理器（typeHandlers）"></a>类型处理器（typeHandlers）</h2><ul>
<li>MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值 时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。</li>
</ul>
<p><img src="https://i.loli.net/2020/10/13/dqFaQ38tnwuZUEs.png" alt="r9SKTVI7yQb3ZL2.png"></p>
<p><img src="https://i.loli.net/2020/10/13/qWl3RAzGyYs5S7r.png" alt="image-20201013111238067.png"></p>
<p><img src="https://i.loli.net/2020/10/13/WG6tbE3HeiZ8KgC.png" alt="image-20201013111300649.png"></p>
<h3 id="创建类型处理器"><a href="#创建类型处理器" class="headerlink" title="创建类型处理器"></a>创建类型处理器</h3><ul>
<li><p>重写已有的类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型</p>
</li>
<li><ul>
<li>实现 org.apache.ibatis.type.TypeHandler 接口</li>
<li>继承一个类 org.apache.ibatis.type.BaseTypeHandler</li>
</ul>
</li>
<li><p>覆盖已有的处理 Java String 类型的属性以及 VARCHAR 类型的参数和结果的类型处理器</p>
</li>
<li><p>&#96;&#96;&#96;java<br>@MappedJdbcTypes(value&#x3D;JdbcType.VARCHAR)<br>public class MyTypeHandler extends BaseTypeHandler<String> {<br>@Override<br>public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException {<br>    ps.setString(i,parameter);<br>}<br><br>@Override<br>public String getNullableResult(ResultSet rs, String columnName) throws SQLException {<br>    String str&#x3D;rs.getString(columnName);<br>    return str+”test”;<br>}<br><br>@Override<br>public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException {<br>    String str&#x3D;rs.getString(columnIndex);<br>    return str+”test”;<br>}<br><br>@Override<br>public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {<br>    String str&#x3D;cs.getString(columnIndex);<br>    return str+”test”;<br>}<br>}<br>&#x2F;&#x2F;XML配置<br><typeHandlers><br>    <typeHandler handler="com.testmybatis.typehandler.MyTypeHandler" ></typeHandler><br></typeHandlers></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 指定JAVAType</span><br><span class="line"></span><br><span class="line">- 在类型处理器的配置元素（typeHandler 元素）上增加一个 javaType 属性（比如： javaType=&quot;String&quot;）；</span><br><span class="line">- 在类型处理器的类上增加一个 @MappedTypes 注解指定与其关联的 Java 类型列表。 如果在 javaType 属性中也同时指定，则注解上的配置将被忽略。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 指定JDBCType</span><br><span class="line"></span><br><span class="line">-  在类型处理器的配置元素上增加一个 jdbcType 属性（比如：jdbcType=&quot;VARCHAR&quot;）</span><br><span class="line">-  在类型处理器的类上增加一个 @MappedJdbcTypes 注解指定与其关联的 JDBC 类型列 表。 如果在 jdbcType 属性中也同时指定，则注解上的配置将被忽略。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### ResultMap中的类型处理器</span><br><span class="line"></span><br><span class="line">- 当在 ResultMap 中决定使用哪种类型处理器时，此时 Java 类型是已知的（从结果类型中获得），但是 JDBC 类型是未知的。 因此 Mybatis 使用 javaType=[Java 类 型], jdbcType=null 的组合来选择一个类型处理器。</span><br><span class="line"></span><br><span class="line">- 除非显式地设置，否则类型处理器在 ResultMap 中将不会生效。 如果希望能在 ResultMap 中隐 式地使用类型处理器，那么设置 @MappedJdbcTypes 注解</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  @MappedJdbcTypes(value=JdbcType.VARCHAR,includeNullJdbcType=true)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="泛型类型处理器"><a href="#泛型类型处理器" class="headerlink" title="泛型类型处理器"></a>泛型类型处理器</h3><ul>
<li><p>创建能够处理多个类的泛型类型处理器。为了使用泛型类型处理器， 需要增加一 个接受该类的 class 作为参数的构造器，这样 MyBatis 会在构造一个类型处理器实例 的时候传入一个具体的类。</p>
</li>
<li><p>&#96;&#96;&#96;java<br>public class MyTypeHandler2<E extends Object> extends BaseTypeHandler <E>{<br>private  Class<E> type;<br>public MyTypeHandler2(Class<E> type){<br>    if (type &#x3D;&#x3D; null)<br>        throw new IllegalArgumentException(“Type argument cannot be null”);<br>    this.type&#x3D;type;<br>}<br>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## ObjectFactory对象工厂</span><br><span class="line"></span><br><span class="line">- 每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory） 实例来完成实例化工作。</span><br><span class="line"></span><br><span class="line">- 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认 无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法</span><br><span class="line"></span><br><span class="line">- 可以通过创建自己的对象工厂来覆盖对象工厂的默认行为。</span><br><span class="line"></span><br><span class="line">- setProperties 方法可以被用来 配置 ObjectFactory，在初始化ObjectFactory 实例后， objectFactory 元素体中定义的属性会被传递给 setProperties 方法。</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  public class MyObjectFactory extends DefaultObjectFactory &#123;</span><br><span class="line">      @Override</span><br><span class="line">      public void setProperties(Properties properties) &#123;</span><br><span class="line">          Set&lt;Object&gt; objects = properties.keySet();</span><br><span class="line">          for(Object o:objects)&#123;</span><br><span class="line">              System.out.println(properties.get(o));</span><br><span class="line">          &#125;</span><br><span class="line">          super.setProperties(properties);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public &lt;T&gt; T create(Class&lt;T&gt; type) &#123;</span><br><span class="line">          return super.create(type);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public &lt;T&gt; T create(Class&lt;T&gt; type, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs) &#123;</span><br><span class="line">          return super.create(type,constructorArgTypes,constructorArgs);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public &lt;T&gt; boolean isCollection(Class&lt;T&gt; type) &#123;</span><br><span class="line">          return  Collection.class.isAssignableFrom(type);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  //XML配置</span><br><span class="line">      &lt;objectFactory type=&quot;com.testmybatis.objectfactory.MyObjectFactory&quot;&gt;</span><br><span class="line">          &lt;property name=&quot;test&quot; value=&quot;success&quot;/&gt;</span><br><span class="line">      &lt;/objectFactory&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="插件-plugins-x2F-x2F-待深入"><a href="#插件-plugins-x2F-x2F-待深入" class="headerlink" title="插件(plugins)&#x2F;&#x2F;         待深入"></a>插件(plugins)&#x2F;&#x2F;         待深入</h2><ul>
<li>MyBatis 允许在映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</li>
<li><ul>
<li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed) &#x2F;&#x2F;执行前</li>
<li>ParameterHandler (getParameterObject, setParameters) &#x2F;&#x2F;参数处理</li>
<li>ResultSetHandler (handleResultSets, handleOutputParameters) &#x2F;&#x2F;结果集处理</li>
<li>StatementHandler (prepare, parameterize, batch, update, query)&#x2F;&#x2F;SQL语句</li>
</ul>
</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>使用插件是非常简单的，只需实现 Interceptor 接口， 并指定想要拦截的方法签名</li>
</ul>
<h2 id="环境配置（environments）"><a href="#环境配置（environments）" class="headerlink" title="环境配置（environments）"></a>环境配置（environments）</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ul>
<li>MyBatis中可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种 环境。</li>
<li>如果连接多个数据库，就需要创建多个 SqlSessionFactory 实例</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysqldb&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- environment 一个环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysqldb&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                transactionManager 事务管理</span></span><br><span class="line"><span class="comment">                    type=&quot;JDBC&quot; 使用jdbc方式来控制事务</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                dataSource 数据源配置</span></span><br><span class="line"><span class="comment">                    type=&quot;POOLED&quot; : 使用池化思想</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;com.testmybatis.DataSource.DruidDataSourceFactory&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/emp?useUnicode=true&amp;amp;characterEncoding=utf-8&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;property name=&quot;password&quot; value=&quot;1112&quot;/&gt;--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>关注点</p>
<ul>
<li><p>默认使用的环境 ID（比如：default&#x3D;”development”）。</p>
</li>
<li><p>每个 environment 元素定义的环境 ID（比如：id&#x3D;”development”）。 </p>
</li>
<li><p>事务管理器的配置（比如：type&#x3D;”JDBC”）。</p>
</li>
<li><p>数据源的配置（比如：type&#x3D;”POOLED”）。</p>
</li>
</ul>
</li>
</ul>
<h3 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h3><ul>
<li><p>MyBatis中有两种事务管理器</p>
<ul>
<li>JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接 来管理事务作用域。</li>
<li>MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管 理事务的整个生命周期（比如 JEE 应用服务器的上下文）。</li>
</ul>
</li>
<li><p>自定义 MyBatis 对事务的处理</p>
<ul>
<li><p>首先实现 TransactionFactory 接口，用实现类的全限定名或类型别名代替JDBC或MANAGED。</p>
<ul>
<li>&#96;&#96;&#96;java<br>public interface TransactionFactory {<br> default void setProperties(Properties props) { &#x2F;&#x2F; 从 3.5.2 开始，该方法为默<br>认方法<br> &#x2F;&#x2F; 空实现<br> }<br> Transaction newTransaction(Connection conn);<br> Transaction newTransaction(DataSource dataSource, TransactionIsolationLev<br>el le<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 在事务管理器实例化后，所有在 XML 中配置的属性将会被传递给 setProperties() 方 法。此时实现还需要创建一个 Transaction 接口的实现类。</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public interface Transaction &#123;</span><br><span class="line">     Connection getConnection() throws SQLException;</span><br><span class="line">     void commit() throws SQLException;</span><br><span class="line">     void rollback() throws SQLException;</span><br><span class="line">     void close() throws SQLException;</span><br><span class="line">      Integer getTimeout() throws SQLException;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="数据源-datasource"><a href="#数据源-datasource" class="headerlink" title="数据源(datasource)"></a>数据源(datasource)</h3><ul>
<li>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源,包含三种(type&#x3D;”[UNPOOLED|POOLED|JNDI]”)</li>
</ul>
<h4 id="UNPOOLED"><a href="#UNPOOLED" class="headerlink" title="UNPOOLED:"></a>UNPOOLED:</h4><ul>
<li><p>这个数据源的实现会每次请求时打开和关闭连接,适用于对数据库连接可用性要求不高的简单应用程序。。UNPOOLED 类型的数据源仅仅需要配置以下 属性：</p>
<ul>
<li><p>driver – 这是 JDBC 驱动的 Java 类全限定名</p>
</li>
<li><p>url – 这是数据库的 JDBC URL 地址。</p>
</li>
<li><p>username – 登录数据库的用户名。</p>
</li>
<li><p>password – 登录数据库的密码。</p>
</li>
<li><p>defaultTransactionIsolationLevel– 默认的连接事务隔离级别。</p>
</li>
<li><p>defaultNetworkTimeout – 等待数据库操作完成的默认网络超时时间。</p>
</li>
</ul>
</li>
</ul>
<h4 id="POOLED"><a href="#POOLED" class="headerlink" title="POOLED:"></a>POOLED:</h4><ul>
<li>POOLED: 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创 建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</li>
</ul>
<h4 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h4><ul>
<li>为了能在如 EJB 或应用服务器这类容器中使用，容器可以集 中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只 需要两个属性：<ul>
<li>initial_context – 这个属性用来在 InitialContext 中寻找上下文</li>
<li>data_source – 这是引用数据源实例位置的上下文路径。</li>
</ul>
</li>
</ul>
<h2 id="数据库厂商标识（databaseIdProvider）"><a href="#数据库厂商标识（databaseIdProvider）" class="headerlink" title="数据库厂商标识（databaseIdProvider）"></a>数据库厂商标识（databaseIdProvider）</h2><ul>
<li>databaseIdProvider元素主要是为了支持不同厂商的数据库。基于映射语 句中的 databaseId 属性。 MyBatis 会加载带有匹配当前数据库 databaseId 属性和所 有不带 databaseId 属性的语句。 如果同时找到带有 databaseId 和不 带 databaseId 的相同语句，则后者会被舍弃。</li>
</ul>
<p>基本使用</p>
<ul>
<li>配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span>&gt;</span>//type为VendorDatabaseIdProvider别名</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;SQL Server&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlserver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;DB2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;db2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Oracle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;MySQL&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br><span class="line">//VendorDatabaseIdProvider为一个DatabaseIdProvider实现类</span><br></pre></td></tr></table></figure>

<ul>
<li>当SQL语句的databaseId与当前数据库不匹配时</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectAll&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span> databaseId=<span class="string">&quot;d2&quot;</span>&gt;</span><br><span class="line">    select id,name,salary,age</span><br><span class="line">    from emp</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>会产生下列错误：</li>
</ul>
<p><img src="https://i.loli.net/2020/10/13/4d5Nbp3hTRAVKgw.png" alt="image-20201013155019696"></p>
<ul>
<li>SQL语句的databaseId配置正确后,语句可以正常执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectAll&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span> databaseId=<span class="string">&quot;mysql&quot;</span>&gt;</span><br><span class="line">    select id,name,salary,age</span><br><span class="line">    from emp</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>



<h3 id="自定义-DatabaseIdProvide"><a href="#自定义-DatabaseIdProvide" class="headerlink" title="自定义 DatabaseIdProvide"></a>自定义 DatabaseIdProvide</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDatabaseIdProvider</span> <span class="keyword">implements</span> <span class="title class_">DatabaseIdProvider</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATABASE_MYSQL</span> <span class="operator">=</span> <span class="string">&quot;MySQL&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATABASE_POSTGRESQL</span> <span class="operator">=</span> <span class="string">&quot;PostgreSQL&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATABASE_ORACLE</span> <span class="operator">=</span> <span class="string">&quot;Oracle&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATABASE_DB2</span> <span class="operator">=</span> <span class="string">&quot;DB2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties p)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;设置properties&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDatabaseId</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        <span class="type">String</span> <span class="variable">dbName</span> <span class="operator">=</span> conn.getMetaData().getDatabaseProductName();</span><br><span class="line">        System.out.println(dbName);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dbAlias</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (dbName) &#123;</span><br><span class="line">            <span class="keyword">case</span> DATABASE_MYSQL:</span><br><span class="line">                dbAlias = <span class="string">&quot;mysql&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DATABASE_POSTGRESQL:</span><br><span class="line">                dbAlias = <span class="string">&quot;pg&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DATABASE_ORACLE:</span><br><span class="line">                dbAlias = <span class="string">&quot;oracle&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DATABASE_DB2:</span><br><span class="line">                dbAlias = <span class="string">&quot;db2&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dbAlias);</span><br><span class="line">        <span class="keyword">return</span> dbAlias;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="映射器（mappers）"><a href="#映射器（mappers）" class="headerlink" title="映射器（mappers）"></a>映射器（mappers）</h2><ul>
<li><p>mapper映射配置文件的查找顺序： 优先级为 package-&gt;resource-&gt;url-&gt;class    且resource&#x2F;url&#x2F;mapperClass三个值只能有一个值是有值的，</p>
</li>
<li><p>&#96;&#96;&#96;java<br>&#x2F;&#x2F;XMLConfigBuilder中的方法<br>private void mapperElement(XNode parent) throws Exception {<br>  if (parent !&#x3D; null) {<br>  &#x2F;&#x2F;遍历解析mappers下的节点<br>  for (XNode child : parent.getChildren()) {<br>  &#x2F;&#x2F;首先解析package节点<br>  if (“package”.equals(child.getName())) {<br>    &#x2F;&#x2F;获取包名<br>    String mapperPackage &#x3D; child.getStringAttribute(“name”);<br>    configuration.addMappers(mapperPackage);<br>  } else {<br>    &#x2F;&#x2F;如果不存在package节点，那么扫描mapper节点<br>    &#x2F;&#x2F;resource&#x2F;url&#x2F;mapperClass三个值只能有一个值是有值的<br>    String resource &#x3D; child.getStringAttribute(“resource”);<br>    String url &#x3D; child.getStringAttribute(“url”);<br>    String mapperClass &#x3D; child.getStringAttribute(“class”);<br>    &#x2F;&#x2F;优先级 resource&gt;url&gt;mapperClass<br>    if (resource !&#x3D; null &amp;&amp; url &#x3D;&#x3D; null &amp;&amp; mapperClass &#x3D;&#x3D; null) {<br>        &#x2F;&#x2F;如果mapper节点中的resource不为空<br>      ErrorContext.instance().resource(resource);<br>       &#x2F;&#x2F;那么直接加载resource指向的XXXMapper.xml文件为字节流<br>      InputStream inputStream &#x3D; Resources.getResourceAsStream(resource);<br>      &#x2F;&#x2F;通过XMLMapperBuilder解析XXXMapper.xml，可以看到这里构建的XMLMapperBuilde还传入了configuration,所以之后肯定是会将mapper封装到configuration对象中去的。<br>      XMLMapperBuilder mapperParser &#x3D; new XMLMapperBuilder(inputStream, configuration, resource, configuration.getSqlFragments());<br>      &#x2F;&#x2F;解析<br>      mapperParser.parse();<br>    } else if (resource &#x3D;&#x3D; null &amp;&amp; url !&#x3D; null &amp;&amp; mapperClass &#x3D;&#x3D; null) {<br>      &#x2F;&#x2F;如果url!&#x3D;null，那么通过url解析<br>      ErrorContext.instance().resource(url);<br>      InputStream inputStream &#x3D; Resources.getUrlAsStream(url);<br>      XMLMapperBuilder mapperParser &#x3D; new XMLMapperBuilder(inputStream, configuration, url, configuration.getSqlFragments());<br>      mapperParser.parse();<br>    } else if (resource &#x3D;&#x3D; null &amp;&amp; url &#x3D;&#x3D; null &amp;&amp; mapperClass !&#x3D; null) {<br>        &#x2F;&#x2F;如果mapperClass!&#x3D;null，那么通过加载类构造Configuration<br>      Class&lt;?&gt; mapperInterface &#x3D; Resources.classForName(mapperClass);<br>      configuration.addMapper(mapperInterface);<br>  } else {<br>        &#x2F;&#x2F;如果都不满足  则直接抛异常  如果配置了两个或三个  直接抛异常<br>      throw new BuilderException(“A mapper element may only specify a url, resource or class, but not more than one.”);<br>    }<br>  }<br>}<br>  }<br>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## XML映射器</span><br><span class="line"></span><br><span class="line">- SQL映射文件中的顶级元素：</span><br><span class="line">  - cache – 该命名空间的缓存配置</span><br><span class="line">  - cache-ref – 引用其它命名空间的缓存配置。</span><br><span class="line">  - resultMap – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。</span><br><span class="line">  - •sql – 可被其它语句引用的可重用语句块。</span><br><span class="line">  - 以及基本的增删改查</span><br><span class="line"></span><br><span class="line">###  select语句配置</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;select</span><br><span class="line"> id=&quot;selectPerson&quot;</span><br><span class="line"> parameterType=&quot;int&quot;</span><br><span class="line"> parameterMap=&quot;deprecated&quot;</span><br><span class="line"> resultType=&quot;hashmap&quot;</span><br><span class="line"> resultMap=&quot;personResultMap&quot;</span><br><span class="line"> flushCache=&quot;false&quot;</span><br><span class="line"> useCache=&quot;true&quot;</span><br><span class="line"> timeout=&quot;10&quot;</span><br><span class="line"> fetchSize=&quot;256&quot;</span><br><span class="line"> statementType=&quot;PREPARED&quot;</span><br><span class="line"> resultSetType=&quot;FORWARD_ONLY&quot;&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://i.loli.net/2020/10/13/qudpwMiKRaLeUf7.png" alt="image-20201013164359377"></p>
<p><img src="https://i.loli.net/2020/10/13/6jZSwYrApzc3gdI.png" alt="image-20201013164439647"></p>
<h3 id="insert-update-和-delete语句配置"><a href="#insert-update-和-delete语句配置" class="headerlink" title="insert, update 和 delete语句配置"></a>insert, update 和 delete语句配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span></span></span><br><span class="line"><span class="tag"> <span class="attr">id</span>=<span class="string">&quot;insertAuthor&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">parameterType</span>=<span class="string">&quot;domain.blog.Author&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">flushCache</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">statementType</span>=<span class="string">&quot;PREPARED&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">keyProperty</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">keyColumn</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span></span></span><br><span class="line"><span class="tag"> <span class="attr">id</span>=<span class="string">&quot;updateAuthor&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">parameterType</span>=<span class="string">&quot;domain.blog.Author&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">flushCache</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">statementType</span>=<span class="string">&quot;PREPARED&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">delete</span></span></span><br><span class="line"><span class="tag"> <span class="attr">id</span>=<span class="string">&quot;deleteAuthor&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">parameterType</span>=<span class="string">&quot;domain.blog.Author&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">flushCache</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">statementType</span>=<span class="string">&quot;PREPARED&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/10/13/E9npZ4xfhLvaNuI.png" alt="image-20201013165037770"></p>
<h3 id="主键回填"><a href="#主键回填" class="headerlink" title="主键回填"></a>主键回填</h3><h4 id="通过设置useGeneratedKeys"><a href="#通过设置useGeneratedKeys" class="headerlink" title="通过设置useGeneratedKeys"></a>通过设置useGeneratedKeys</h4><ul>
<li>通过设置useGeneratedKeys&#x3D;”true”并把keyProperty 设置为目标属性</li>
<li>当目标属性不是第一列时，需设置KeyColumn</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertAuthor&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line"> insert into Author (username,password,email,bio)</span><br><span class="line"> values (#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>批量插入时也可以传入一个 Author 数组或集合，并返回自动 生成的主键。</p>
</li>
<li><p>&#96;&#96;&#96;xml<br><insert id="insertAuthor" useGeneratedKeys="true"
 keyProperty="id"><br> insert into Author (username, password, email, bio) values</p>
 <foreach item="item" collection="list" separator=",">
 (#{item.username}, #{item.password}, #{item.email}, #{item.bio})
 </foreach>
</insert>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">###  通过selectKey标签</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">    &lt;insert id=&quot;insert&quot; parameterType=&quot;Student&quot;&gt;</span><br><span class="line">        &lt;selectKey order=&quot;BEFORE&quot; keyProperty=&quot;id&quot; resultType=&quot;String&quot;&gt;</span><br><span class="line">            select replace(UUID(),&#x27;-&#x27;,&#x27;&#x27;)</span><br><span class="line">        &lt;/selectKey&gt;</span><br><span class="line">        insert into student values(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Mapper-xml中语句的参数"><a href="#Mapper-xml中语句的参数" class="headerlink" title="Mapper.xml中语句的参数"></a>Mapper.xml中语句的参数</h2><ul>
<li><p>java基本类型和String,可以省略掉SQL语句标签中的parameterType</p>
</li>
<li><p>传入复杂对象时，应指定参数类型</p>
</li>
<li><p>对于复杂参数，可以自定义类型处理方式，指定一个特殊的类型处理器类（或别名）</p>
<ul>
<li>&#96;&#96;&#96;xml<br>#{age,javaType&#x3D;int,jdbcType&#x3D;NUMERIC,typeHandler&#x3D;MyTypeHandler}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 对于数值类型，可以设置 numericScale 指定小数点后保留的位数</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    #&#123;height,javaType=double,jdbcType=NUMERIC,numericScale=2&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="结果映射-resultmap"><a href="#结果映射-resultmap" class="headerlink" title="结果映射(resultmap)"></a>结果映射(resultmap)</h2><ul>
<li><strong>id &amp; result</strong>:id 和 result 元素都将一个列的值映射到一个简单数据类型 （String, int, double, Date 等）的属性或字段.唯一不同是，id 元素对应的属性会被标记为对象的标识符，在比较对象实 例时使用。 这样可以提高整体的性能，尤其是进行缓存和嵌套结果映射（也就是连接映射）的时候。</li>
<li>constructor - 用于在实例化类时，注入结果到构造方法中<ul>
<li>idArg - ID 参数;标记出作为 ID 的结果可以帮助提高整体性能</li>
<li>arg - 将被注入到构造方法的一个普通结果</li>
</ul>
</li>
<li>id – 一个 ID 结果;标记出作为 ID 的结果可以帮助提高整体性能</li>
<li>result – 注入到字段或 JavaBean 属性的普通结果</li>
<li>association – 一个复杂类型的关联;许多结果将包装成这种类型 嵌套结果映射 – 关联可以指定为一个 resultMap 元素，或者引用一个</li>
<li>collection – 一个复杂类型的集合嵌套结果映射 – 集合可以指定为一个 resultMap 元素，或者引用一个</li>
<li>discriminator – 使用结果值来决定使用哪个 resultMap</li>
<li>case – 基于某些值的结果映射.嵌套结果映射 – 一个 case 也是一个映射它本身的结果,因此可以包含很多相 同的元素，或者它可以参照一个外部的 resultMap</li>
</ul>
<h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><ul>
<li><p>MyBatis 有两种不同的方式 加载关联：</p>
<ul>
<li>嵌套 Select 查询：通过执行另外一个 SQL 映射语句来加载期望的复杂类型。(使用延迟加载可以避免”N+1查询问题”)</li>
<li>嵌套结果映射：使用嵌套的结果映射来处理连接结果的重复子集。</li>
</ul>
</li>
<li><p>当result中有重复使用的列时，可以用columnPrefix()为一个列起别名</p>
<ul>
<li>&#96;&#96;&#96;xml<resultMap id="blogResult" type="Blog">
 <id property="id" column="blog_id" />
 <result property="title" column="blog_title"/>
 <association property="author"
 resultMap="authorResult" />
 <association property="coAuthor"
 resultMap="authorResult"
 columnPrefix="co_" />
</resultMap>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    对应的列为：</span><br><span class="line"></span><br><span class="line">    ![image-20201013191722600](https://i.loli.net/2020/10/13/KurawigWVzxQY8v.png)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">- N+1查询问题新的解决方法：</span><br><span class="line"></span><br><span class="line">  - 某些数据库允许存储过程返回多个结果集，或一次性执行多个语句，每个语句返回一个 结果集。 我们可以利用这个特性，在不使用连接的情况下，只访问数据库一次就能获得 相关数据。</span><br><span class="line"></span><br><span class="line">**例：**存储过程中执行下面的查询并返回两个结果集：</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">SELECT * FROM BLOG WHERE ID = #&#123;id&#125;</span><br><span class="line">SELECT * FROM AUTHOR WHERE ID = #&#123;id&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>在映射语句中，必须通过 resultSets 属性为每个结果集指定一个名字，多个名字使用 逗号隔开</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlog&quot;</span> <span class="attr">resultSets</span>=<span class="string">&quot;blogs,authors&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;blogResult&quot;</span> <span class="attr">s</span></span></span><br><span class="line"><span class="tag"><span class="attr">tatementType</span>=<span class="string">&quot;CALLABLE&quot;</span>&gt;</span></span><br><span class="line"> &#123;call getBlogsAndAuthors(#&#123;id,jdbcType=INTEGER,mode=IN&#125;)&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;blogResult&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;author&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">resultSet</span>=<span class="string">&quot;authors&quot;</span> <span class="attr">colum</span></span></span><br><span class="line"><span class="tag"><span class="attr">n</span>=<span class="string">&quot;author_id&quot;</span> <span class="attr">foreignColumn</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;bio&quot;</span> <span class="attr">column</span>=<span class="string">&quot;bio&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自动映射"><a href="#自动映射" class="headerlink" title="自动映射"></a>自动映射</h3><ul>
<li>MyBatis 会获取结果中返回的列名并在 Java 类中查找相同名 字的属性(忽略大小写)</li>
<li>有三种自动映射等级： <ul>
<li>NONE - 禁用自动映射。仅对手动映射的属性进行映射。 </li>
<li>PARTIAL - 对除在内部定义了嵌套结果映射（也就是连接的属性）以外的属性进行映射 •</li>
<li>FULL - 自动映射所有属性。</li>
</ul>
</li>
</ul>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ul>
<li><p>默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存。 要启用 全局的二级缓存，需要在你SQL 映射文件中添加一行</p>
</li>
<li><p>&#96;&#96;&#96;xml</p>
<cache/>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 该语句的效果如下：</span><br><span class="line">    - 映射语句文件中的所有 select 语句的结果将会被缓存。 </span><br><span class="line">    - 映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。 </span><br><span class="line">    - 缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓 存。 </span><br><span class="line">    - 缓存不会定时进行刷新（也就是说，没有刷新间隔）。 </span><br><span class="line">    - 缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。</span><br><span class="line">    - 缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者 修改，而不干扰其他调用者或线程所做的潜在修改。</span><br><span class="line"></span><br><span class="line">- 当有调用其他映射文件时，@CacheNamespaceRef 注解指定缓存作用域，将结果缓存到指定作用域，但因此会与另外一个映射文件缓存作用域的缓存产生差别，使数据得到污染，不建议使用二级缓存。</span><br><span class="line"></span><br><span class="line">- 清除策略：</span><br><span class="line"></span><br><span class="line">  - LRU – 最近最少使用：移除最长时间不被使用的对象。//默认</span><br><span class="line">  - FIFO – 先进先出：按对象进入缓存的顺序来移除它们。</span><br><span class="line">  - SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。</span><br><span class="line">  - WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 动态SQL</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">&gt; MyBatis的映射文件中支持在基础SQL上添加一些逻辑操作，并动态拼接成完整的SQL之后再执行，以达到SQL复用、简化编程的效果。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###  &lt; sql &gt;</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;mapper namespace=&quot;com.qf.mybatis.part2.dynamic.BookDao&quot;&gt;</span><br><span class="line">    &lt;sql id=&quot;BOOKS_FIELD&quot;&gt; &lt;!-- 定义SQL片段 --&gt;</span><br><span class="line">        SELECT id,name,author,publish,sort</span><br><span class="line">    &lt;/sql&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectBookByCondition&quot; resultType=&quot;com.qf.mybatis.part2.dynamic.Book&quot;&gt;</span><br><span class="line">				&lt;include refid=&quot;BOOKS_FIELD&quot; /&gt; &lt;!-- 通过ID引用SQL片段 --&gt;</span><br><span class="line">        FROM t_books</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="lt-where-gt"><a href="#lt-where-gt" class="headerlink" title="&lt; where &gt;"></a>&lt; where &gt;</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBookByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.qf.mybatis.part2.dynamic.Book&quot;</span>&gt;</span></span><br><span class="line">    SELECT id , name , author , publish , sort</span><br><span class="line">    FROM t_books</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span> <span class="comment">&lt;!-- WHERE，会自动忽略前后缀（如：and | or） --&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            and name = #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;publish != null&quot;</span>&gt;</span></span><br><span class="line">            and publish = #&#123;publish&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sort != null&quot;</span>&gt;</span></span><br><span class="line">            and sort = #&#123;sort&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="lt-set-gt"><a href="#lt-set-gt" class="headerlink" title="&lt; set &gt;"></a>&lt; set &gt;</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBookByCondition&quot;</span>&gt;</span></span><br><span class="line">    UPDATE t_books</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span><span class="comment">&lt;!-- where子句中满足条件的if，会自动忽略后缀（如：,） --&gt;</span></span><br><span class="line">            name = #&#123;name&#125; ,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125; ,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;publish != null&quot;</span>&gt;</span></span><br><span class="line">            publish = #&#123;publish&#125; ,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sort != null&quot;</span>&gt;</span></span><br><span class="line">            sort = #&#123;sort&#125; ,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="lt-trim-gt"><a href="#lt-trim-gt" class="headerlink" title="&lt; trim &gt;"></a>&lt; trim &gt;</h3><blockquote>
<p>&lt; trim prefix&#x3D;”” suffix&#x3D;”” prefixOverrides&#x3D;”” suffixOverrides&#x3D;”” &gt;代替&lt; where &gt; 、&lt; set &gt;</p>
<p>prefix 前缀  suffix后缀  prefixOverrides语句前被覆盖的 suffixOverrides语句后被覆盖的</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBookByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.qf.mybatis.day2.dynamic.Book&quot;</span>&gt;</span>		SELECT id,name,author,publish,sort    FROM t_books    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND|OR&quot;</span>&gt;</span> <span class="comment">&lt;!-- 增加WHERE前缀，自动忽略前缀 --&gt;</span>        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span>            and id = #&#123;id&#125;        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>            and name = #&#123;name&#125;        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span>            and author = #&#123;author&#125;        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;publish != null&quot;</span>&gt;</span>            and publish = #&#123;publish&#125;        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sort != null&quot;</span>&gt;</span>            and sort = #&#123;sort&#125;        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>		<span class="tag">&lt;/<span class="name">trim</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBookByCondition&quot;</span>&gt;</span>		UPDATE t_books		<span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span> <span class="comment">&lt;!-- 增加SET前缀，自动忽略后缀 --&gt;</span>				<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>						name = #&#123;name&#125; ,				<span class="tag">&lt;/<span class="name">if</span>&gt;</span>				<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span>						author = #&#123;author&#125; ,				<span class="tag">&lt;/<span class="name">if</span>&gt;</span>				<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;publish != null&quot;</span>&gt;</span>						publish = #&#123;publish&#125; ,				<span class="tag">&lt;/<span class="name">if</span>&gt;</span>				<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sort != null&quot;</span>&gt;</span>						sort = #&#123;sort&#125;				<span class="tag">&lt;/<span class="name">if</span>&gt;</span>    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span>		WHERE id = #&#123;id&#125;<span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="lt-foreach-gt"><a href="#lt-foreach-gt" class="headerlink" title="&lt; foreach &gt;"></a>&lt; foreach &gt;</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookByIds&quot;</span>&gt;</span>		DELETE FROM t_books		WHERE id IN		<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>  <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">index</span>=<span class="string">&quot;i&quot;</span>&gt;</span>				#&#123;id&#125;		<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>取值</th>
</tr>
</thead>
<tbody><tr>
<td>collection</td>
<td>容器类型</td>
<td>list、array、map</td>
</tr>
<tr>
<td>open</td>
<td>起始符</td>
<td>(</td>
</tr>
<tr>
<td>close</td>
<td>结束符</td>
<td>)</td>
</tr>
<tr>
<td>separator</td>
<td>分隔符</td>
<td>,</td>
</tr>
<tr>
<td>index</td>
<td>下标号</td>
<td>从0开始，依次递增</td>
</tr>
<tr>
<td>item</td>
<td>当前项</td>
<td>任意名称（循环中通过 #{任意名称} 表达式访问）</td>
</tr>
</tbody></table>
<h3 id="lt-choose-gt-lt-when-gt-lt-otherwise-gt"><a href="#lt-choose-gt-lt-when-gt-lt-otherwise-gt" class="headerlink" title="&lt; choose &gt; &lt; when &gt; &lt; otherwise &gt;"></a>&lt; choose &gt; &lt; when &gt; &lt; otherwise &gt;</h3><p>​        类似 Java 中的 switch 语句。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span> SELECT * FROM BLOG WHERE state = ‘ACTIVE’ <span class="tag">&lt;<span class="name">choose</span>&gt;</span> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span> AND title like #&#123;title&#125; <span class="tag">&lt;/<span class="name">when</span>&gt;</span> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span> AND author_name like #&#123;author.name&#125; <span class="tag">&lt;/<span class="name">when</span>&gt;</span> <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span> AND featured = 1 <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span> <span class="tag">&lt;/<span class="name">choose</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><ul>
<li><p>要在带注解的映射器接口类中使用动态 SQL，可以使用 script 元素。比如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update(&#123;&quot;&lt;script&gt;&quot;, &quot;update Author&quot;, &quot; &lt;set&gt;&quot;, &quot; &lt;if test=&#x27;username != null&#x27;&gt;username=#&#123;username&#125;,&lt;/if&gt;&quot;, &quot; &lt;if test=&#x27;password != null&#x27;&gt;password=#&#123;password&#125;,&lt;/if&gt;&quot;, &quot; &lt;if test=&#x27;email != null&#x27;&gt;email=#&#123;email&#125;,&lt;/if&gt;&quot;, &quot; &lt;if test=&#x27;bio != null&#x27;&gt;bio=#&#123;bio&#125;&lt;/if&gt;&quot;, &quot; &lt;/set&gt;&quot;, &quot;where id=#&#123;id&#125;&quot;, &quot;&lt;/script&gt;&quot;&#125;)</span> <span class="keyword">void</span> <span class="title function_">updateAuthorValues</span><span class="params">(Author author)</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><ul>
<li><p>bind 元素允许在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlogsLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + _parameter.getTitle() + &#x27;%&#x27;&quot;</span> /&gt;</span> SELECT * FROM BLOG WHERE title LIKE #&#123;pattern&#125;<span class="tag">&lt;/<span class="name">select</span>&gt;</span>//bind将pattern调用方法获得title并在前拼接_来进行模糊查询</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="SQL语句的多数据库支持"><a href="#SQL语句的多数据库支持" class="headerlink" title="SQL语句的多数据库支持"></a>SQL语句的多数据库支持</h2><ul>
<li>如果配置了 databaseIdProvider，你就可以在动态代码中使用名为 “_databaseId” 的变 量来为不同的数据库构建特定的语句</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId == &#x27;oracle&#x27;&quot;</span>&gt;</span> select seq_users.nextval from dual <span class="tag">&lt;/<span class="name">if</span>&gt;</span> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId == &#x27;db2&#x27;&quot;</span>&gt;</span> select nextval for seq_users from sysibm.sysdummy1&quot; <span class="tag">&lt;/<span class="name">if</span>&gt;</span> <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span> insert into users values (#&#123;id&#125;, #&#123;name&#125;)<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>springBoot配置多数据源以及动态切换</title>
    <url>/2022/02/28/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>在项目中需要用到多数据源的切换，主要用到AbstractRoutingDataSource类来实现这个功能。</p>
<p>AbstractRoutingDataSource是Spring-jdbc中一个调用路由到各种目标 DataSource 之一的抽象类。</p>
<p>通过determineCurrentLookupKey()方法来指定路由,切换数据源通过AOP加自定义注解实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractRoutingDataSource</span> <span class="keyword">extends</span> <span class="title class_">AbstractDataSource</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存放多数据源</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> Map&lt;Object, Object&gt; targetDataSources;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有指定数据源时的默认数据源</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> Object defaultTargetDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存放多数据源  通过InitializingBean接口来将targetDataSources赋值给resolvedDataSources</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> Map&lt;Object, DataSource&gt; resolvedDataSources;</span><br><span class="line">    </span><br><span class="line">    	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.targetDataSources == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Property &#x27;targetDataSources&#x27; is required&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">this</span>.resolvedDataSources = CollectionUtils.newHashMap(<span class="built_in">this</span>.targetDataSources.size());</span><br><span class="line">		<span class="built_in">this</span>.targetDataSources.forEach((key, value) -&gt; &#123;</span><br><span class="line">			<span class="type">Object</span> <span class="variable">lookupKey</span> <span class="operator">=</span> resolveSpecifiedLookupKey(key);</span><br><span class="line">			<span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> resolveSpecifiedDataSource(value);</span><br><span class="line">			<span class="built_in">this</span>.resolvedDataSources.put(lookupKey, dataSource);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.defaultTargetDataSource != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="built_in">this</span>.resolvedDefaultDataSource = resolveSpecifiedDataSource(<span class="built_in">this</span>.defaultTargetDataSource);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码如下：</p>
<h2 id="DynamicDataSource"><a href="#DynamicDataSource" class="headerlink" title="DynamicDataSource"></a>DynamicDataSource</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定多数据源的路由方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title class_">AbstractRoutingDataSource</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//覆盖该方法，DbContextHolder存放当前线程的数据源名称键值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">determineCurrentLookupKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DbContextHolder.getDbType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="DbContextHolder"><a href="#DbContextHolder" class="headerlink" title="DbContextHolder"></a>DbContextHolder</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存放当前线程数据源名称  即map中的key</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbContextHolder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; CONTEXT_HOLDER = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dbType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setDbType</span><span class="params">(String dbType)</span> &#123;</span><br><span class="line">        CONTEXT_HOLDER.set(dbType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得当前数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDbType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> CONTEXT_HOLDER.get();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除上下文数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clearDbType</span><span class="params">()</span> &#123;</span><br><span class="line">        CONTEXT_HOLDER.remove();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h2 id="DatasourceConfig"><a href="#DatasourceConfig" class="headerlink" title="DatasourceConfig"></a>DatasourceConfig</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置多Datasource</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatasourceConfig</span> <span class="keyword">implements</span> <span class="title class_">EnvironmentAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">BASE_PATH</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnvironment</span><span class="params">(Environment environment)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.environment = environment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;dynamicDatasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DynamicDataSource <span class="title function_">dynamicDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dbNames</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;spring.datasource.names&quot;</span>);</span><br><span class="line">        String[] split = dbNames.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; targetDataSources = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(<span class="number">2</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line">        <span class="type">DynamicDataSource</span> <span class="variable">dynamicDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DynamicDataSource</span>();</span><br><span class="line">        <span class="keyword">for</span> (String str : split) &#123;</span><br><span class="line">            <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> initDruidDataSource(str);</span><br><span class="line">            targetDataSources.put(str, druidDataSource);</span><br><span class="line">        &#125;</span><br><span class="line">        dynamicDataSource.setTargetDataSources(targetDataSources);</span><br><span class="line">        dynamicDataSource.setDefaultTargetDataSource(targetDataSources.entrySet().iterator().next().getValue());</span><br><span class="line">        <span class="keyword">return</span> dynamicDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">initDruidDataSource</span><span class="params">(String dbName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">driverClassName</span> <span class="operator">=</span> environment.getProperty(BASE_PATH + dbName + <span class="string">&quot;.driver-class-name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> environment.getProperty(BASE_PATH + dbName + <span class="string">&quot;.url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> environment.getProperty(BASE_PATH + dbName + <span class="string">&quot;.username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> environment.getProperty(BASE_PATH + dbName + <span class="string">&quot;.password&quot;</span>);</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        druidDataSource.setDriverClassName(driverClassName);</span><br><span class="line">        druidDataSource.setUrl(url);</span><br><span class="line">        druidDataSource.setUsername(username);</span><br><span class="line">        druidDataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="DS"><a href="#DS" class="headerlink" title="DS"></a>DS</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义注解,指定数据源</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DS &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="DSAspect"><a href="#DSAspect" class="headerlink" title="DSAspect"></a>DSAspect</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过AOP来为DbContextHolder指定数据源名称来动态切换数据源</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DSAspect</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(value = &quot;@annotation(ds)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(<span class="keyword">final</span> ProceedingJoinPoint joinPoint, DS ds)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> ds.value();</span><br><span class="line">            DbContextHolder.setDbType(value);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">            <span class="keyword">return</span> proceed;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">           <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DbContextHolder.clearDbType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>多数据源</tag>
        <tag>springBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx安装</title>
    <url>/2022/04/12/nginx%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="安装nginx依赖"><a href="#安装nginx依赖" class="headerlink" title="安装nginx依赖"></a>安装nginx依赖</h1><h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><p>gcc是可以在多种硬件平台上编译出可执行程序的超级编译器，安装Nginx需要先从官网下载源码进行编译，编译的过程依赖gcc环境（CentOS系统自带gcc）。</p>
<p>安装gcc：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure>

<h2 id="pcre"><a href="#pcre" class="headerlink" title="pcre"></a>pcre</h2><p>pcre是一个用C语言编写的正则表达式函数Nginx的http模块需要用到pcre来解析正则表达式，另外pcre-devel是使用pcre开发的二次开发库，所以Nginx都需要。</p>
<p>安装pcre：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure>

<h2 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h2><p>zlib库提供了很多种压缩和解压缩的方式，zlib库里面有很多压缩和解压的方式，Nginx使用zlib对包的内容进行gzip</p>
<p>安装zlib：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure>

<h2 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h2><p>openssl提供了这个强大的安全套接字密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用，Nginx除了支持http还支持https</p>
<p>安装openssl：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure>

<h2 id="一行命令安装"><a href="#一行命令安装" class="headerlink" title="一行命令安装"></a>一行命令安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>



<h1 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h1><p>去<a href="http://nginx.org/en/download.html">nginx官网</a>下载，选择自己想要的版本,我下载的是<a href="http://nginx.org/download/nginx-1.20.2.tar.gz"> nginx-1.20.2</a> <a href="http://nginx.org/download/nginx-1.20.2.tar.gz.asc">pgp</a>这个版本</p>
<h1 id="上传安装包并解压"><a href="#上传安装包并解压" class="headerlink" title="上传安装包并解压"></a>上传安装包并解压</h1><p>这里我安装在&#x2F;usr&#x2F;local下的nginx目录，运行解压命令解压到当前文件夹</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxf nginx-1.20.2.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/12/M6Fusa5pbndecxR.png" alt="image-20220412230021645"></p>
<h1 id="构建源码"><a href="#构建源码" class="headerlink" title="构建源码"></a>构建源码</h1><h2 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h2><p>使用<code>configure</code>命令配置构建。它定义了系统的各个方面，包括允许 nginx 用于连接处理的方法。最后它创建一个<code>Makefile</code>.</p>
<p>这里我采用的的命令参数只制定了路径和ssl模块</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx/nginx-1.20.2 --with-http_ssl_module</span><br></pre></td></tr></table></figure>

<p>执行完毕后日志会打印出nginx安装路径、配置文件路径、pid文件路径等等信息。</p>
<p><img src="https://s2.loli.net/2022/04/12/FzjW8O9qm3dfAyN.png" alt="image-20220412231338115"></p>
<p><code>configure</code>命令支持一下参数</p>
<h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><ul>
<li><p><code>--help</code></p>
<p>打印帮助信息。</p>
</li>
</ul>
<h3 id="路径制定"><a href="#路径制定" class="headerlink" title="路径制定"></a>路径制定</h3><ul>
<li><p><code>--prefix=*path*</code></p>
<p>定义将保存服务器文件的目录。这个相同的目录也将用于由 <code>configure</code>（库源的路径除外）和<code>nginx.conf</code>配置文件中设置的所有相对路径。它<code>/usr/local/nginx</code>默认设置为目录。</p>
</li>
<li><p><code>--sbin-path=*path*</code></p>
<p>设置 nginx 可执行文件的名称。此名称仅在安装期间使用。默认情况下，文件名为 <code>*prefix*/sbin/nginx</code>.</p>
</li>
<li><p><code>--modules-path=*path*</code></p>
<p>定义将安装 nginx 动态模块的目录。默认使用<code>*prefix*/modules</code>目录。</p>
</li>
<li><p><code>--conf-path=*path*</code></p>
<p>设置<code>nginx.conf</code>配置文件的名称。如果需要，可以通过在命令行参数中指定不同的配置文件来启动 nginx 。默认情况下，文件名为 . <code>-c *file*``*prefix*/conf/nginx.conf</code></p>
</li>
<li><p><code>--error-log-path=*path*</code></p>
<p>设置主要错误、警告和诊断文件的名称。安装后，始终可以 使用<a href="http://nginx.org/en/docs/ngx_core_module.html#error_log">error_log</a>指令在<code>nginx.conf</code>配置文件 中更改文件名。默认情况下，文件名为 . <code>*prefix*/logs/error.log</code></p>
</li>
<li><p><code>--pid-path=*path*</code></p>
<p>设置<code>nginx.pid</code>将存储主进程的进程 ID 的文件的名称。安装后，始终可以 使用<a href="http://nginx.org/en/docs/ngx_core_module.html#pid">pid</a>指令在<code>nginx.conf</code>配置文件 中更改文件名。默认情况下，文件名为 . <code>*prefix*/logs/nginx.pid</code></p>
</li>
<li><p><code>--lock-path=*path*</code></p>
<p>为锁定文件的名称设置前缀。安装后，始终可以 使用<a href="http://nginx.org/en/docs/ngx_core_module.html#lock_file">lock_file</a>指令在<code>nginx.conf</code>配置文件 中更改该值。默认情况下，该值为 。 <code>*prefix*/logs/nginx.lock</code></p>
</li>
</ul>
<h3 id="工作进程用户和用户组"><a href="#工作进程用户和用户组" class="headerlink" title="工作进程用户和用户组"></a>工作进程用户和用户组</h3><ul>
<li><p><code>--user=*name*</code></p>
<p>设置工作进程将使用其凭据的非特权用户的名称。安装后，始终可以 使用<a href="http://nginx.org/en/docs/ngx_core_module.html#user">user</a>指令在<code>nginx.conf</code>配置文件 中更改名称。默认用户名是nobody。</p>
</li>
<li><p><code>--group=*name*</code></p>
<p>设置工作进程将使用其凭据的组的名称。安装后，始终可以 使用<a href="http://nginx.org/en/docs/ngx_core_module.html#user">user</a>指令在<code>nginx.conf</code>配置文件 中更改名称。默认情况下，组名设置为非特权用户的名称。</p>
</li>
</ul>
<h3 id="构建相关"><a href="#构建相关" class="headerlink" title="构建相关"></a>构建相关</h3><ul>
<li><p><code>--build=*name*</code></p>
<p>设置一个可选的 nginx 构建名称。</p>
</li>
<li><p><code>--builddir=*path*</code></p>
<p>设置构建目录。</p>
</li>
<li><p><code>--with-select_module</code> <code>--without-select_module</code></p>
<p>启用或禁用构建允许服务器使用该<code>select()</code>方法的模块。如果平台似乎不支持更合适的方法，例如 kqueue、epoll 或 &#x2F;dev&#x2F;poll，则此模块会自动构建。</p>
</li>
<li><p><code>--with-poll_module</code> <code>--without-poll_module</code></p>
<p>启用或禁用构建允许服务器使用该<code>poll()</code>方法的模块。如果平台似乎不支持更合适的方法，例如 kqueue、epoll 或 &#x2F;dev&#x2F;poll，则此模块会自动构建。</p>
</li>
<li><p><code>--with-threads</code></p>
<p>启用 <a href="http://nginx.org/en/docs/ngx_core_module.html#thread_pool">线程池</a>的使用。</p>
</li>
<li><p><code>--with-file-aio</code></p>
<p>允许在 FreeBSD 和 Linux 上使用 <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#aio">异步文件 I&#x2F;O</a> (AIO)。</p>
</li>
</ul>
<h3 id="拓展模块"><a href="#拓展模块" class="headerlink" title="拓展模块"></a>拓展模块</h3><ul>
<li><p><code>--with-http_ssl_module</code></p>
<p>允许构建一个将 <a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html">HTTPS 协议支持</a>添加 到 HTTP 服务器的模块。默认情况下不构建此模块。构建和运行此模块需要 OpenSSL 库。</p>
</li>
<li><p><code>--with-http_v2_module</code></p>
<p><a href="http://nginx.org/en/docs/http/ngx_http_v2_module.html">允许构建一个为HTTP&#x2F;2</a> 提供支持的模块 。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_realip_module</code></p>
<p>启用构建 <a href="http://nginx.org/en/docs/http/ngx_http_realip_module.html">ngx_http_realip_module</a> 模块，该模块将客户端地址更改为指定标头字段中发送的地址。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_addition_module</code></p>
<p>启用构建 <a href="http://nginx.org/en/docs/http/ngx_http_addition_module.html">ngx_http_addition_module</a> 模块，该模块在响应之前和之后添加文本。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_xslt_module</code> <code>--with-http_xslt_module=dynamic</code></p>
<p>允许构建使用一个或多个 XSLT 样式表转换 XML 响应的 <a href="http://nginx.org/en/docs/http/ngx_http_xslt_module.html">ngx_http_xslt_module</a> 模块。默认情况下不构建此模块。构建和运行此模块需要 <a href="http://xmlsoft.org/">libxml2</a>和 <a href="http://xmlsoft.org/XSLT/">libxslt</a>库。</p>
</li>
<li><p><code>--with-http_image_filter_module</code> <code>--with-http_image_filter_module=dynamic</code></p>
<p>支持构建 <a href="http://nginx.org/en/docs/http/ngx_http_image_filter_module.html">ngx_http_image_filter_module</a> 模块，该模块将图像转换为 JPEG、GIF、PNG 和 WebP 格式。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_geoip_module</code> <code>--with-http_geoip_module=dynamic</code></p>
<p>允许构建 <a href="http://nginx.org/en/docs/http/ngx_http_geoip_module.html">ngx_http_geoip_module</a> 模块，该模块根据客户端 IP 地址和预编译的 <a href="http://www.maxmind.com/">MaxMind</a>数据库创建变量。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_sub_module</code></p>
<p>启用构建 <a href="http://nginx.org/en/docs/http/ngx_http_sub_module.html">ngx_http_sub_module</a> 模块，该模块通过将一个指定的字符串替换为另一个来修改响应。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_dav_module</code></p>
<p>允许构建 通过 WebDAV 协议提供文件管理自动化的<a href="http://nginx.org/en/docs/http/ngx_http_dav_module.html">ngx_http_dav_module模块。</a>默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_flv_module</code></p>
<p>启用构建 <a href="http://nginx.org/en/docs/http/ngx_http_flv_module.html">ngx_http_flv_module</a> 模块，该模块为 Flash 视频 (FLV) 文件提供伪流服务器端支持。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_mp4_module</code></p>
<p>启用构建 <a href="http://nginx.org/en/docs/http/ngx_http_mp4_module.html">ngx_http_mp4_module</a> 模块，该模块为 MP4 文件提供伪流服务器端支持。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_gunzip_module</code></p>
<p>启用构建 <a href="http://nginx.org/en/docs/http/ngx_http_gunzip_module.html">ngx_http_gunzip_module</a><code>Content-Encoding: gzip</code>模块，该模块使用“ ”为不支持“gzip”编码方法的客户端 解压缩响应。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_gzip_static_module</code></p>
<p>启用构建 <a href="http://nginx.org/en/docs/http/ngx_http_gzip_static_module.html">ngx_http_gzip_static_module</a> 模块，该模块可以发送带有“ <code>.gz</code>”文件扩展名的预压缩文件而不是常规文件。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_auth_request_module</code></p>
<p>允许构建 基于子请求结果实现客户端授权的<a href="http://nginx.org/en/docs/http/ngx_http_auth_request_module.html">ngx_http_auth_request_module模块。</a>默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_random_index_module</code></p>
<p>启用构建 <a href="http://nginx.org/en/docs/http/ngx_http_random_index_module.html">ngx_http_random_index_module</a> 模块，该模块处理以斜杠字符（’ <code>/</code>‘）结尾的请求并在目录中选择一个随机文件作为索引文件。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_secure_link_module</code></p>
<p>启用构建 <a href="http://nginx.org/en/docs/http/ngx_http_secure_link_module.html">ngx_http_secure_link_module</a> 模块。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_degradation_module</code></p>
<p>启用构建 <code>ngx_http_degradation_module</code>模块。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_slice_module</code></p>
<p>启用构建 <a href="http://nginx.org/en/docs/http/ngx_http_slice_module.html">ngx_http_slice_module</a> 模块，该模块将请求拆分为子请求，每个子请求都返回一定范围的响应。该模块提供更有效的大响应缓存。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-http_stub_status_module</code></p>
<p>启用构建 <a href="http://nginx.org/en/docs/http/ngx_http_stub_status_module.html">ngx_http_stub_status_module</a> 模块，该模块提供对基本状态信息的访问。默认情况下不构建此模块。</p>
</li>
</ul>
<h3 id="禁止模块"><a href="#禁止模块" class="headerlink" title="禁止模块"></a>禁止模块</h3><ul>
<li><p><code>--without-http_charset_module</code></p>
<p>禁止构建 <a href="http://nginx.org/en/docs/http/ngx_http_charset_module.html">ngx_http_charset_module</a> 模块，该模块将指定的字符集添加到“Content-Type”响应头字段，并且可以另外将数据从一个字符集转换为另一个字符集。</p>
</li>
<li><p><code>--without-http_gzip_module</code></p>
<p>禁用构建压缩 HTTP 服务器<a href="http://nginx.org/en/docs/http/ngx_http_gzip_module.html">响应的模块。</a>zlib 库是构建和运行此模块所必需的。</p>
</li>
<li><p><code>--without-http_ssi_module</code></p>
<p>禁用构建 <a href="http://nginx.org/en/docs/http/ngx_http_ssi_module.html">ngx_http_ssi_module</a> 模块，该模块在通过它的响应中处理 SSI（服务器端包含）命令。</p>
</li>
<li><p><code>--without-http_userid_module</code></p>
<p>禁用构建 <a href="http://nginx.org/en/docs/http/ngx_http_userid_module.html">ngx_http_userid_module</a> 模块，该模块设置适合客户端识别的 cookie。</p>
</li>
<li><p><code>--without-http_access_module</code></p>
<p>禁用构建 允许限制对某些客户端地址的访问 的<a href="http://nginx.org/en/docs/http/ngx_http_access_module.html">ngx_http_access_module模块。</a></p>
</li>
<li><p><code>--without-http_auth_basic_module</code></p>
<p>禁用构建 <a href="http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html">ngx_http_auth_basic_module</a> 模块，该模块允许通过使用“HTTP 基本身份验证”协议验证用户名和密码来限制对资源的访问。</p>
</li>
<li><p><code>--without-http_mirror_module</code></p>
<p>禁止构建 <a href="http://nginx.org/en/docs/http/ngx_http_mirror_module.html">ngx_http_mirror_module</a> 模块，该模块通过创建后台镜像子请求来实现原始请求的镜像。</p>
</li>
<li><p><code>--without-http_autoindex_module</code></p>
<p>禁用构建 处理以斜杠字符（’’）结尾的请求的<a href="http://nginx.org/en/docs/http/ngx_http_autoindex_module.html">ngx_http_autoindex_module模块，并在</a><a href="http://nginx.org/en/docs/http/ngx_http_index_module.html">ngx_http_index_module</a>模块找不到索引文件 <code>/</code>的情况下生成目录列表 。</p>
</li>
<li><p><code>--without-http_geo_module</code></p>
<p>禁用构建 <a href="http://nginx.org/en/docs/http/ngx_http_geo_module.html">ngx_http_geo_module</a> 模块，该模块根据客户端 IP 地址创建具有值的变量。</p>
</li>
<li><p><code>--without-http_map_module</code></p>
<p>禁用构建 <a href="http://nginx.org/en/docs/http/ngx_http_map_module.html">ngx_http_map_module</a> 模块，该模块根据其他变量的值创建具有值的变量。</p>
</li>
<li><p><code>--without-http_split_clients_module</code></p>
<p>禁止构建 为 A&#x2F;B 测试创建变量 的<a href="http://nginx.org/en/docs/http/ngx_http_split_clients_module.html">ngx_http_split_clients_module模块。</a></p>
</li>
<li><p><code>--without-http_referer_module</code></p>
<p>禁用构建 <a href="http://nginx.org/en/docs/http/ngx_http_referer_module.html">ngx_http_referer_module</a> 模块，该模块可以阻止对“Referer”标头字段中具有无效值的请求的站点访问。</p>
</li>
<li><p><code>--without-http_rewrite_module</code></p>
<p>禁用构建允许 HTTP 服务器 <a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html">重定向请求和更改请求的 URI 的</a>模块。构建和运行此模块需要 PCRE 库。</p>
</li>
<li><p><code>--without-http_proxy_module</code></p>
<p>禁用构建 HTTP 服务器 <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html">代理模块</a>。</p>
</li>
<li><p><code>--without-http_fastcgi_module</code></p>
<p>禁止构建 将请求传递给 FastCGI 服务器 的<a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html">ngx_http_fastcgi_module模块。</a></p>
</li>
<li><p><code>--without-http_uwsgi_module</code></p>
<p>禁止构建 将请求传递给 uwsgi 服务器 的<a href="http://nginx.org/en/docs/http/ngx_http_uwsgi_module.html">ngx_http_uwsgi_module模块。</a></p>
</li>
<li><p><code>--without-http_scgi_module</code></p>
<p>禁止构建将请求传递给 SCGI 服务器的 <a href="http://nginx.org/en/docs/http/ngx_http_scgi_module.html">ngx_http_scgi_module</a> 模块。</p>
</li>
<li><p><code>--without-http_grpc_module</code></p>
<p>禁止构建 将请求传递给 gRPC 服务器 的<a href="http://nginx.org/en/docs/http/ngx_http_grpc_module.html">ngx_http_grpc_module模块。</a></p>
</li>
<li><p><code>--without-http_memcached_module</code></p>
<p>禁用构建 从 memcached 服务器获取响应 的<a href="http://nginx.org/en/docs/http/ngx_http_memcached_module.html">ngx_http_memcached_module模块。</a></p>
</li>
<li><p><code>--without-http_limit_conn_module</code></p>
<p>禁用构建限制每个键的连接数的 <a href="http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html">ngx_http_limit_conn_module</a> 模块，例如，来自单个 IP 地址的连接数。</p>
</li>
<li><p><code>--without-http_limit_req_module</code></p>
<p>禁用构建限制每个键的请求处理速率的 <a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html">ngx_http_limit_req_module</a> 模块，例如，来自单个 IP 地址的请求的处理速率。</p>
</li>
<li><p><code>--without-http_empty_gif_module</code></p>
<p>禁止构建 <a href="http://nginx.org/en/docs/http/ngx_http_empty_gif_module.html">发出单像素透明 GIF</a>的模块。</p>
</li>
<li><p><code>--without-http_browser_module</code></p>
<p>禁止构建 <a href="http://nginx.org/en/docs/http/ngx_http_browser_module.html">ngx_http_browser_module</a> 模块，该模块创建的变量的值取决于“User-Agent”请求标头字段的值。</p>
</li>
<li><p><code>--without-http_upstream_hash_module</code></p>
<p>禁用构建实现 <a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html#hash">散列</a> 负载平衡方法的模块。</p>
</li>
<li><p><code>--without-http_upstream_ip_hash_module</code></p>
<p>禁用构建实现 <a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html#ip_hash">ip_hash</a> 负载平衡方法的模块。</p>
</li>
<li><p><code>--without-http_upstream_least_conn_module</code></p>
<p>禁用构建实现了 <a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html#least_conn">minimum_conn</a> 负载平衡方法的模块。</p>
</li>
<li><p><code>--without-http_upstream_random_module</code></p>
<p>禁用构建实现 <a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html#random">随机</a> 负载平衡方法的模块。</p>
</li>
<li><p><code>--without-http_upstream_keepalive_module</code></p>
<p>禁用构建提供 与上游服务器 <a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive">的连接缓存的模块。</a></p>
</li>
<li><p><code>--without-http_upstream_zone_module</code></p>
<p>禁用构建一个可以将上游组的运行时状态存储在共享内存 <a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html#zone">区域</a>中的模块。</p>
</li>
<li><p><code>--with-http_perl_module</code> <code>--with-http_perl_module=dynamic</code></p>
<p>能够构建 <a href="http://nginx.org/en/docs/http/ngx_http_perl_module.html">嵌入式 Perl 模块</a>。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-perl_modules_path=*path*</code></p>
<p>定义了一个保存 Perl 模块的目录。</p>
</li>
<li><p><code>--with-perl=*path*</code></p>
<p>设置 Perl 二进制文件的名称。</p>
</li>
</ul>
<h3 id="HTTP相关"><a href="#HTTP相关" class="headerlink" title="HTTP相关"></a>HTTP相关</h3><ul>
<li><p><code>--http-log-path=*path*</code></p>
<p>设置 HTTP 服务器的主要请求日志文件的名称。安装后，始终可以 使用<a href="http://nginx.org/en/docs/http/ngx_http_log_module.html#access_log">access_log</a>指令在<code>nginx.conf</code>配置文件 中更改文件名。默认情况下，文件名为 . <code>*prefix*/logs/access.log</code></p>
</li>
<li><p><code>--http-client-body-temp-path=*path*</code></p>
<p>定义一个目录，用于存储保存客户端请求正文的临时文件。安装后，始终可以 使用<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_temp_path">client_body_temp_path</a> 指令在<code>nginx.conf</code>配置文件 中更改目录。默认情况下，该目录名为 . <code>*prefix*/client_body_temp</code></p>
</li>
<li><p><code>--http-proxy-temp-path=*path*</code></p>
<p>定义一个用于存储临时文件的目录，其中包含从代理服务器接收到的数据。安装后，始终可以 使用<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_temp_path">proxy_temp_path</a> 指令在<code>nginx.conf</code>配置文件 中更改目录。默认情况下，该目录名为 . <code>*prefix*/proxy_temp</code></p>
</li>
<li><p><code>--http-fastcgi-temp-path=*path*</code></p>
<p>定义了一个目录，用于存储带有从 FastCGI 服务器接收到的数据的临时文件。安装后，始终可以 使用<a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_temp_path">fastcgi_temp_path</a> 指令在<code>nginx.conf</code>配置文件 中更改目录。默认情况下，该目录名为 . <code>*prefix*/fastcgi_temp</code></p>
</li>
<li><p><code>--http-uwsgi-temp-path=*path*</code></p>
<p>定义一个目录，用于存储从 uwsgi 服务器接收到的数据的临时文件。安装后，始终可以 使用<a href="http://nginx.org/en/docs/http/ngx_http_uwsgi_module.html#uwsgi_temp_path">uwsgi_temp_path</a> 指令在<code>nginx.conf</code>配置文件 中更改目录。默认情况下，该目录名为 . <code>*prefix*/uwsgi_temp</code></p>
</li>
<li><p><code>--http-scgi-temp-path=*path*</code></p>
<p>定义一个目录，用于存储从 SCGI 服务器接收到的数据的临时文件。安装后，始终可以 使用<a href="http://nginx.org/en/docs/http/ngx_http_scgi_module.html#scgi_temp_path">scgi_temp_path</a> 指令在<code>nginx.conf</code>配置文件 中更改目录。默认情况下，该目录名为 . <code>*prefix*/scgi_temp</code></p>
</li>
<li><p><code>--without-http</code></p>
<p>禁用<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html">HTTP</a>服务器。</p>
</li>
<li><p><code>--without-http-cache</code></p>
<p>禁用 HTTP 缓存。</p>
</li>
</ul>
<h3 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h3><ul>
<li><p><code>--with-mail</code> <code>--with-mail=dynamic</code></p>
<p>启用 POP3&#x2F;IMAP4&#x2F;SMTP <a href="http://nginx.org/en/docs/mail/ngx_mail_core_module.html">邮件代理</a>服务器。</p>
</li>
<li><p><code>--with-mail_ssl_module</code></p>
<p>允许构建一个模块，将 <a href="http://nginx.org/en/docs/mail/ngx_mail_ssl_module.html">SSL&#x2F;TLS 协议支持</a>添加 到邮件代理服务器。默认情况下不构建此模块。构建和运行此模块需要 OpenSSL 库。</p>
</li>
<li><p><code>--without-mail_pop3_module</code></p>
<p>禁用邮件代理服务器中的<a href="http://nginx.org/en/docs/mail/ngx_mail_pop3_module.html">POP3</a>协议。</p>
</li>
<li><p><code>--without-mail_imap_module</code></p>
<p>禁用邮件代理服务器中的<a href="http://nginx.org/en/docs/mail/ngx_mail_imap_module.html">IMAP</a>协议。</p>
</li>
<li><p><code>--without-mail_smtp_module</code></p>
<p>禁用邮件代理服务器中的<a href="http://nginx.org/en/docs/mail/ngx_mail_smtp_module.html">SMTP</a>协议。</p>
</li>
<li><p><code>--with-stream</code> <code>--with-stream=dynamic</code></p>
<p>支持为通用 TCP&#x2F;UDP 代理和负载平衡 构建 <a href="http://nginx.org/en/docs/stream/ngx_stream_core_module.html">流模块。</a>默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-stream_ssl_module</code></p>
<p>允许构建一个将 <a href="http://nginx.org/en/docs/stream/ngx_stream_ssl_module.html">SSL&#x2F;TLS 协议支持</a>添加 到流模块的模块。默认情况下不构建此模块。构建和运行此模块需要 OpenSSL 库。</p>
</li>
<li><p><code>--with-stream_realip_module</code></p>
<p>启用构建 <a href="http://nginx.org/en/docs/http/ngx_stream_realip_module.html">ngx_stream_realip_module</a> 模块，该模块将客户端地址更改为在 PROXY 协议头中发送的地址。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-stream_geoip_module</code> <code>--with-stream_geoip_module=dynamic</code></p>
<p>允许构建 <a href="http://nginx.org/en/docs/stream/ngx_stream_geoip_module.html">ngx_stream_geoip_module</a> 模块，该模块根据客户端 IP 地址和预编译的 <a href="http://www.maxmind.com/">MaxMind</a>数据库创建变量。默认情况下不构建此模块。</p>
</li>
<li><p><code>--with-stream_ssl_preread_module</code></p>
<p>启用构建 <a href="http://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html">ngx_stream_ssl_preread_module</a> 模块，该模块允许从 <a href="https://datatracker.ietf.org/doc/html/rfc5246#section-7.4.1.2">ClientHello</a> 消息中提取信息而无需终止 SSL&#x2F;TLS。默认情况下不构建此模块。</p>
</li>
<li><p><code>--without-stream_limit_conn_module</code></p>
<p>禁用构建限制每个键的连接数的 <a href="http://nginx.org/en/docs/stream/ngx_stream_limit_conn_module.html">ngx_stream_limit_conn_module</a> 模块，例如，来自单个 IP 地址的连接数。</p>
</li>
<li><p><code>--without-stream_access_module</code></p>
<p>禁用构建 允许限制对某些客户端地址 的访问的<a href="http://nginx.org/en/docs/stream/ngx_stream_access_module.html">ngx_stream_access_module模块。</a></p>
</li>
<li><p><code>--without-stream_geo_module</code></p>
<p>禁用构建 <a href="http://nginx.org/en/docs/stream/ngx_stream_geo_module.html">ngx_stream_geo_module</a> 模块，该模块根据客户端 IP 地址创建具有值的变量。</p>
</li>
<li><p><code>--without-stream_map_module</code></p>
<p>禁用构建 <a href="http://nginx.org/en/docs/stream/ngx_stream_map_module.html">ngx_stream_map_module</a> 模块，该模块根据其他变量的值创建具有值的变量。</p>
</li>
<li><p><code>--without-stream_split_clients_module</code></p>
<p>禁止构建 为 A&#x2F;B 测试创建变量 的<a href="http://nginx.org/en/docs/stream/ngx_stream_split_clients_module.html">ngx_stream_split_clients_module模块。</a></p>
</li>
<li><p><code>--without-stream_return_module</code></p>
<p>禁用构建 <a href="http://nginx.org/en/docs/stream/ngx_stream_return_module.html">ngx_stream_return_module</a> 模块，该模块将一些指定的值发送到客户端，然后关闭连接。</p>
</li>
<li><p><code>--without-stream_set_module</code></p>
<p>禁止构建为变量设置值的 <a href="http://nginx.org/en/docs/stream/ngx_stream_set_module.html">ngx_stream_set_module</a> 模块。</p>
</li>
<li><p><code>--without-stream_upstream_hash_module</code></p>
<p>禁用构建实现 <a href="http://nginx.org/en/docs/stream/ngx_stream_upstream_module.html#hash">散列</a> 负载平衡方法的模块。</p>
</li>
<li><p><code>--without-stream_upstream_least_conn_module</code></p>
<p>禁用构建实现了 <a href="http://nginx.org/en/docs/stream/ngx_stream_upstream_module.html#least_conn">minimum_conn</a> 负载平衡方法的模块。</p>
</li>
<li><p><code>--without-stream_upstream_random_module</code></p>
<p>禁用构建实现 <a href="http://nginx.org/en/docs/stream/ngx_stream_upstream_module.html#random">随机</a> 负载平衡方法的模块。</p>
</li>
<li><p><code>--without-stream_upstream_zone_module</code></p>
<p>禁用构建一个可以将上游组的运行时状态存储在共享内存 <a href="http://nginx.org/en/docs/stream/ngx_stream_upstream_module.html#zone">区域</a>中的模块。</p>
</li>
<li><p><code>--with-google_perftools_module</code></p>
<p>允许构建 <a href="http://nginx.org/en/docs/ngx_google_perftools_module.html">ngx_google_perftools_module模块，该模块可以使用</a><a href="https://github.com/gperftools/gperftools">Google Performance Tools</a> 对 nginx 工作进程进行分析 。该模块适用于 nginx 开发人员，默认情况下不构建。</p>
</li>
<li><p><code>--with-cpp_test_module</code></p>
<p>启用构建 <code>ngx_cpp_test_module</code>模块。</p>
</li>
<li><p><code>--add-module=*path*</code></p>
<p>启用外部模块。</p>
</li>
<li><p><code>--add-dynamic-module=*path*</code></p>
<p>启用外部动态模块。</p>
</li>
<li><p><code>--with-compat</code></p>
<p>启用动态模块兼容性。</p>
</li>
</ul>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ul>
<li><p><code>--with-debug</code></p>
<p>启用<a href="http://nginx.org/en/docs/debugging_log.html">调试日志</a>。</p>
</li>
</ul>
<h2 id="make-amp-amp-make-install"><a href="#make-amp-amp-make-install" class="headerlink" title="make &amp;&amp; make install"></a>make &amp;&amp; make install</h2><p>执行命令将源码包打包成二进制文件并进行安装</p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>上述命令执行完毕后,–prefix指定的路径下就会多出sbin目录 ,里面存放着nginx可执行文件,执行即可启动nginx。</p>
<p><img src="https://s2.loli.net/2022/04/12/Lyw9DKOzQYsH2F6.png" alt="image-20220412232432678"></p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
        <tag>nginx安装</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置文件中location配置</title>
    <url>/2022/04/20/nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B9%8Blocation%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="关于Nginx的location路径映射"><a href="#关于Nginx的location路径映射" class="headerlink" title="关于Nginx的location路径映射"></a>关于Nginx的location路径映射</h4><blockquote>
<p>优先级关系如下：</p>
<ul>
<li>location &#x3D; &#x2F;路径：优先级最高，精准匹配，一旦匹配， 不再去找其他匹配项。</li>
<li>location ^~ &#x2F;路径：优先级次之，前缀字符串匹配，一旦匹配， 不再去找其他匹配项。</li>
<li>location ~ 正则表达式：如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。  正则匹配时proxy_pass只能是ip:port，不能带URI</li>
<li>location ~* 正则表达式：和location ~ 正则表达式相同，不过当前方式不区分大小写。</li>
<li>location &#x2F;路径：常规方式，匹配前缀，优先级最低。</li>
</ul>
<p>举个栗子：</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 直接匹配</span><br><span class="line">location = / <span class="punctuation">&#123;</span></span><br><span class="line">  # 精准匹配</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># 匹配开头路径</span><br><span class="line">location ^~ /images/ <span class="punctuation">&#123;</span></span><br><span class="line">  # 匹配所有以/images开头的路径，匹配后，不再删选其他选项</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"> </span><br><span class="line"># 正则匹配  </span><br><span class="line">location ~ /xxx <span class="punctuation">&#123;</span></span><br><span class="line">  # 匹配所有以/xxx开头的路径</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"># 正则匹配后缀</span><br><span class="line">location ~* \.(gif|jpg|png)$ <span class="punctuation">&#123;</span></span><br><span class="line">  # 匹配以gif或者jpg或者png为结尾的路径</span><br><span class="line"><span class="punctuation">&#125;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 常规匹配</span><br><span class="line">location /xxx <span class="punctuation">&#123;</span></span><br><span class="line">  # 匹配所有以/xxx开头的路径</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># 全部通配</span><br><span class="line">location / <span class="punctuation">&#123;</span></span><br><span class="line">  # 匹配全部路径  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
        <tag>location</tag>
      </tags>
  </entry>
  <entry>
    <title>linux通过压缩包安装Mysql</title>
    <url>/2022/04/26/linux%E9%80%9A%E8%BF%87%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%AE%89%E8%A3%85Mysql/</url>
    <content><![CDATA[<h1 id="卸载原来"><a href="#卸载原来" class="headerlink" title="卸载原来"></a>卸载原来</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep mariadb</span><br><span class="line"><span class="comment">#查看是否存在，mariadb是一个分支，也是数据库，和mysql类似</span></span><br><span class="line"><span class="comment">#如果上面输出有结果的话，记得卸载掉</span></span><br><span class="line">rpm -e --nodeps mariadb-libs</span><br></pre></td></tr></table></figure>



<h1 id="Mysql用户准备"><a href="#Mysql用户准备" class="headerlink" title="Mysql用户准备"></a>Mysql用户准备</h1><p>添加用户组和用户</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加用户组</span></span><br><span class="line">groupadd mysql</span><br><span class="line"><span class="comment">#添加用户mysql 到用户组mysql</span></span><br><span class="line">useradd -g mysql mysql</span><br></pre></td></tr></table></figure>

<h1 id="压缩包下载"><a href="#压缩包下载" class="headerlink" title="压缩包下载"></a>压缩包下载</h1><p>首先去官网下载对应版本的压缩包，这里我的版本是<a href="https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz">5.7.30</a>。</p>
<h1 id="解压压缩包"><a href="#解压压缩包" class="headerlink" title="解压压缩包"></a>解压压缩包</h1><p>在对应目录下解压Mysql压缩包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line">tar -zxvf mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure>

<h1 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h1><p>对解压后的文件夹重新命名</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> mysql-5.7.30-linux-glibc2.12-x86_64 mysql</span><br></pre></td></tr></table></figure>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>创建data目录存放数据,将目录授权给mysql用户, 进行mysql初始化。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> mysql</span><br><span class="line"><span class="built_in">mkdir</span> /opt/database/mysql_data</span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql /opt/database/mysql_data/</span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql ./</span><br><span class="line"><span class="built_in">chmod</span> 755 /opt/database/mysql_data/ -R</span><br><span class="line"><span class="built_in">chmod</span> 755 /usr/local/mysql/ -R</span><br><span class="line">./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql/ --datadir=/opt/database/mysql_data/</span><br><span class="line"><span class="comment">#初始化完成记得记下来最后的初始密码</span></span><br></pre></td></tr></table></figure>

<h1 id="修改配置文件my-cnf"><a href="#修改配置文件my-cnf" class="headerlink" title="修改配置文件my.cnf"></a>修改配置文件my.cnf</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>配置文件参考如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">datadir</span>=<span class="string">/opt/database/mysql_data</span></span><br><span class="line"><span class="attr">port</span>=<span class="string">3306</span></span><br><span class="line"><span class="attr">sql_mode</span>=<span class="string">NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER</span></span><br><span class="line"><span class="attr">symbolic-links</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="string">600</span></span><br><span class="line"><span class="attr">slow_query_log</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">slow_query_log_file</span>=<span class="string">/opt/database/mysql_data/slow_query_log.log</span></span><br><span class="line"><span class="attr">long_query_time</span>=<span class="string">2</span></span><br><span class="line"><span class="attr">lower_case_table_names</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">character_set_server</span>=<span class="string">utf8mb4</span></span><br><span class="line"><span class="attr">log-error</span>=<span class="string">/opt/database/mysql_data/mysql_error.log</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#max_allowed_packet = 40m</span></span><br><span class="line"></span><br><span class="line"><span class="attr">innodb_data_home_dir</span> = <span class="string">/opt/database/mysql_data</span></span><br><span class="line"><span class="comment">#innodb_data_file_path = ibdata1:200M;ibdata2:100M:autoextend</span></span><br><span class="line"><span class="attr">innodb_log_group_home_dir</span> = <span class="string">/opt/database/mysql_data</span></span><br><span class="line"><span class="attr">innodb_buffer_pool_size</span> = <span class="string">128M</span></span><br><span class="line"><span class="attr">innodb_log_file_size</span> = <span class="string">48M</span></span><br><span class="line"><span class="attr">innodb_log_buffer_size</span> = <span class="string">8M</span></span><br><span class="line"><span class="attr">innodb_flush_log_at_trx_commit</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">innodb_lock_wait_timeout</span> = <span class="string">50</span></span><br><span class="line"><span class="attr">innodb_autoinc_lock_mode</span> = <span class="string">2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">innodb_file_per_table</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">innodb_large_prefix</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">innodb_file_per_table</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<h1 id="配置启动文件"><a href="#配置启动文件" class="headerlink" title="配置启动文件"></a>配置启动文件</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -f -s /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"><span class="built_in">ln</span> -f -s /bin/my_print_defaults /usr/bin/</span><br></pre></td></tr></table></figure>

<h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><p>设置环境变量来使任何地方都可以使用mysql命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"><span class="comment">#在文件中Path增加上mysql的bin目录</span></span><br><span class="line"><span class="comment">#最后source 使改变生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>

<h1 id="连接并修改密码"><a href="#连接并修改密码" class="headerlink" title="连接并修改密码"></a>连接并修改密码</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment">#输入初始密码连接,连接成功后，需要修改密码才可以进行下一步操作</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#修改当前用户密码</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="keyword">USER</span>() IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">#修改指定用户</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h1 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>主机连接虚拟机，记得开放端口</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --reload   <span class="comment"># 配置立即生效</span></span><br></pre></td></tr></table></figure>


</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql索引</title>
    <url>/2022/05/06/mysql%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p>
<p>优缺点：</p>
<p>优点：</p>
<ul>
<li>提高数据检索效率，降低数据库的IO成本</li>
<li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li>
</ul>
<p>缺点：</p>
<ul>
<li>索引列也是要占用空间的</li>
<li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li>
</ul>
<h1 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h1><table>
<thead>
<tr>
<th>索引结构</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>B+Tree</td>
<td>最常见的索引类型，大部分引擎都支持B+树索引</td>
</tr>
<tr>
<td>Hash</td>
<td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td>
</tr>
<tr>
<td>R-Tree(空间索引)</td>
<td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td>
</tr>
<tr>
<td>Full-Text(全文索引)</td>
<td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>索引</th>
<th>InnoDB</th>
<th>MyISAM</th>
<th>Memory</th>
</tr>
</thead>
<tbody><tr>
<td>B+Tree索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>Hash索引</td>
<td>不支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>R-Tree索引</td>
<td>不支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>Full-text</td>
<td>5.6版本后支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p>
<p><img src="https://s2.loli.net/2022/05/06/fBW3lQ6hUyZNImz.png" alt="image-20220506133001456"></p>
<h2 id="为什么-InnoDB-存储引擎选择使用-B-Tree-索引结构？"><a href="#为什么-InnoDB-存储引擎选择使用-B-Tree-索引结构？" class="headerlink" title="为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？"></a>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</h2><ul>
<li>相对于二叉树，层级更少，搜索效率高</li>
<li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li>
<li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li>
</ul>
<h1 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h1><table>
<thead>
<tr>
<th>分类</th>
<th>含义</th>
<th>特点</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>主键索引</td>
<td>针对于表中主键创建的索引</td>
<td>默认自动创建，只能有一个</td>
<td>PRIMARY</td>
</tr>
<tr>
<td>唯一索引</td>
<td>避免同一个表中某数据列中的值重复</td>
<td>可以有多个</td>
<td>UNIQUE</td>
</tr>
<tr>
<td>常规索引</td>
<td>快速定位特定数据</td>
<td>可以有多个</td>
<td></td>
</tr>
<tr>
<td>全文索引</td>
<td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td>
<td>可以有多个</td>
<td>FULLTEXT</td>
</tr>
</tbody></table>
<p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>含义</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>聚集索引(Clustered Index)</td>
<td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td>
<td>必须有，而且只有一个</td>
</tr>
<tr>
<td>二级索引(Secondary Index)</td>
<td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td>
<td>可以存在多个</td>
</tr>
</tbody></table>
<p>聚集索引选取规则：</p>
<ul>
<li>如果存在主键，主键索引就是聚集索引</li>
<li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li>
<li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li>
</ul>
<h1 id="索引失效及优化"><a href="#索引失效及优化" class="headerlink" title="索引失效及优化"></a>索引失效及优化</h1><ol>
<li>联合索引使用要遵循最左前缀原则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</li>
<li>联合索引中，出现范围查询（&lt;, &gt;），范围查询时联合索引创建时右侧的列索引失效。可以用&gt;&#x3D;或者&lt;&#x3D;来规避索引失效问题。</li>
<li>在索引列上进行运算操作，索引将失效。</li>
<li>字符串类型字段使用时，不加引号，触发隐式类型转换索引将失效。</li>
<li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。</li>
<li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li>
<li>根据数据存储分布评估，如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li>
<li>select条件尽量查询使用了索引，并且需要返回的列，在该索引中已经全部能找到，避免回表。</li>
</ol>
<h1 id="覆盖索引-amp-回表查询"><a href="#覆盖索引-amp-回表查询" class="headerlink" title="覆盖索引&amp;回表查询"></a>覆盖索引&amp;回表查询</h1><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p>
<p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p>
<p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p>
<p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p>
<p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p>
<p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p>
<h1 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h1><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p>
<p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(distinct email) / count(*) from tb_user;</span><br><span class="line">select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure>

<p>show index 里面的sub_part可以看到接取的长度</p>
<h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><ol>
<li>针对于数据量较大，且查询比较频繁的表建立索引</li>
<li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li>
<li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li>
<li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li>
<li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li>
<li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li>
<li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li>
</ol>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql之sql优化</title>
    <url>/2022/05/06/mysql%E4%B9%8Bsql%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>普通插入：</p>
<ol>
<li>采用批量插入（一次插入的数据不建议超过1000条）</li>
<li>手动提交事务</li>
<li>主键顺序插入</li>
</ol>
<p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile = 1;</span><br><span class="line">select @@local_infile;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data local infile &#x27;/root/sql1.log&#x27; into table &#x27;tb_user&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p>
<p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p>
<p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p>
<blockquote>
<p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p>
</blockquote>
<p>主键设计原则：</p>
<ul>
<li>满足业务需求的情况下，尽量降低主键的长度</li>
<li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li>
<li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li>
<li>业务操作时，避免对主键的修改</li>
</ul>
<h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><ol>
<li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li>
<li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li>
</ol>
<p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p>
<p>总结：</p>
<ul>
<li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li>
<li>尽量使用覆盖索引</li>
<li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC&#x2F;DESC）</li>
<li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li>
</ul>
<h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3><ul>
<li>在分组操作时，可以通过索引来提高效率</li>
<li>分组操作时，索引的使用也是满足最左前缀法则的</li>
</ul>
<p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p>
<h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 此语句耗时很长</span><br><span class="line">select * from tb_sku limit 9000000, 10;</span><br><span class="line">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span><br><span class="line">select id from tb_sku order by id limit 9000000, 10;</span><br><span class="line">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span><br><span class="line">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span><br><span class="line">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span><br><span class="line">select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;</span><br></pre></td></tr></table></figure>

<h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p>
<p>count的几种用法：</p>
<ul>
<li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li>
<li>用法：count(*)、count(主键)、count(字段)、count(1)</li>
<li>count(主键)跟count(*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样；count(null)返回0</li>
</ul>
<p>各种用法的性能：</p>
<ul>
<li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li>
<li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li>
<li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li>
<li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li>
</ul>
<p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p>
<h3 id="update优化（避免行锁升级为表锁）"><a href="#update优化（避免行锁升级为表锁）" class="headerlink" title="update优化（避免行锁升级为表锁）"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p>
<p>如以下两条语句：<br><code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<br><code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql视图--检查选项</title>
    <url>/2022/05/06/mysql%E8%A7%86%E5%9B%BE-%E6%A3%80%E6%9F%A5%E9%80%89%E9%A1%B9/</url>
    <content><![CDATA[<p>视图的检查选项：当使用WITH CHECK OPTION子句创建视图时，MySQL会通过视图检查正在更改的每个行，例如 插入，更新，删除，以使其符合视图的定义。 MySQL允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。为了确定检查的范围，mysql提供了两个选项：CASCADED 和 LOCAL ，默认值为 CASCADED 。</p>
<h1 id="cascaded"><a href="#cascaded" class="headerlink" title="cascaded"></a>cascaded</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#case1</span><br><span class="line">#创建一个基于students表的视图</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> v1 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> students <span class="keyword">where</span> id<span class="operator">&lt;=</span><span class="number">20</span>;</span><br><span class="line">#由于没有检查选项，所以插入id<span class="operator">&gt;</span><span class="number">20</span>的数据也会插入成功</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> v1 <span class="keyword">values</span>(<span class="number">21</span>,<span class="string">&#x27;john&#x27;</span>);#插入成功</span><br><span class="line"></span><br><span class="line">#case2</span><br><span class="line">#创建一个基于v1的视图，并添加<span class="keyword">cascaded</span>检查选项</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> v2 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> v1 <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">10</span> <span class="keyword">with</span> <span class="keyword">cascaded</span> <span class="keyword">check</span> option;</span><br><span class="line"></span><br><span class="line">#添加检查选项后，再插入数据，MySQL就会判断插入数据是否满足条件，</span><br><span class="line">#由于此视图是基于v1的，所以现在可以插入的id值为 <span class="number">10</span><span class="operator">&lt;</span>id<span class="operator">&lt;=</span><span class="number">20</span>。</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> v2 <span class="keyword">values</span>（<span class="number">22</span>，<span class="string">&#x27;lucy&#x27;</span>);#插入失败</span><br><span class="line"></span><br><span class="line">#case3</span><br><span class="line">#创建一个基于v2的视图</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace v3 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> v2 <span class="keyword">where</span> id<span class="operator">&lt;=</span><span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">#由于v3没有添加检查选项，但v3是基于v2的，所以现在可以插入的id值依然为 <span class="number">10</span><span class="operator">&lt;</span>id<span class="operator">&lt;=</span><span class="number">20</span>。</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> v3 <span class="keyword">values</span>(<span class="number">18</span>,<span class="string">&#x27;Tom&#x27;</span>);#插入成功</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> v3 <span class="keyword">values</span>(<span class="number">24</span>,<span class="string">&#x27;kobe&#x27;</span>);#插入失败</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当我们操作当前视图时，cascaded检查选项是，如果当前视图有检查选项，则插入数据要满足包括当前视图条件以及满足当前视图所依赖的视图的条件。如果当前视图没有检查选项，则插入数据要满足当时视图所依赖视图有检查选项及其依赖的视图的条件。</p>
</blockquote>
<h1 id="local"><a href="#local" class="headerlink" title="local"></a>local</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#case1</span><br><span class="line">#创建一个基于students表的视图</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> v1 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> students <span class="keyword">where</span> id<span class="operator">&lt;=</span><span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> v1 <span class="keyword">values</span>(<span class="number">21</span>,<span class="string">&#x27;john&#x27;</span>);#插入成功</span><br><span class="line"></span><br><span class="line">#case2</span><br><span class="line">#创建一个基于v1的视图，并添加<span class="keyword">local</span>检查选项</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> v2 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> v1 <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">10</span> <span class="keyword">with</span> <span class="keyword">local</span> <span class="keyword">check</span> option;</span><br><span class="line"></span><br><span class="line">#添加检查选项后，再插入数据，MySQL就会判断插入数据是否满足条件，</span><br><span class="line">#由于此视图是基于v1的，v1没有检查选项，所以现在可以插入的id值为 id<span class="operator">&gt;</span><span class="number">10</span>。</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> v2 <span class="keyword">values</span>（<span class="number">22</span>，<span class="string">&#x27;lucy&#x27;</span>);#插入成功</span><br><span class="line"></span><br><span class="line">#case3</span><br><span class="line">#创建一个基于v2的视图</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace v3 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> v2 <span class="keyword">where</span> id<span class="operator">&lt;=</span><span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">#由于v3没有添加检查选项，但v3是基于v2的，所以现在可以插入的id值依然为 id<span class="operator">&gt;</span><span class="number">10</span>。</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> v3 <span class="keyword">values</span>(<span class="number">18</span>,<span class="string">&#x27;Tom&#x27;</span>);#插入成功</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当我们在操作当前视图时，local检查选项是递归的查找当前视图所依赖的视图是否有检查选项，如果有，则检查；如果没有，就不做检查。</p>
</blockquote>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>视图</tag>
      </tags>
  </entry>
  <entry>
    <title>pdf资料整理</title>
    <url>/2022/05/06/pdf%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><p><a href="https://www.ahui.site/pdf/MySQL-%E5%9F%BA%E7%A1%80%E7%AF%87.pdf">MySQL基础篇</a></p>
<p><a href="https://www.ahui.site/pdf/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87.pdf">MySQL进阶篇</a></p>
<p><a href="https://www.ahui.site/pdf/MySQL-%E8%BF%90%E7%BB%B4%E7%AF%87.pdf">MySQL运维篇</a></p>
<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><p><a href="https://www.ahui.site/pdf/nginx%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BC%98%E5%8C%96.pdf">nginx配置与优化</a></p>
<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><p><a href="https://www.ahui.site/pdf/Redis%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C%E5%AE%8C%E6%95%B4%E7%89%88.pdf">Redis命令参考手册完整版</a></p>
]]></content>
      <categories>
        <category>资料</category>
      </categories>
  </entry>
  <entry>
    <title>mysql常用函数</title>
    <url>/2022/05/07/mysql%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>字符串函数</li>
<li>数值函数</li>
<li>日期函数</li>
<li>流程函数</li>
</ul>
<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>常用函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>CONCAT(s1, s2, …, sn)</td>
<td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td>
</tr>
<tr>
<td>LOWER(str)</td>
<td>将字符串全部转为小写</td>
</tr>
<tr>
<td>UPPER(str)</td>
<td>将字符串全部转为大写</td>
</tr>
<tr>
<td>LPAD(str, n, pad)</td>
<td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td>
</tr>
<tr>
<td>RPAD(str, n, pad)</td>
<td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td>
</tr>
<tr>
<td>TRIM(str)</td>
<td>去掉字符串头部和尾部的空格</td>
</tr>
<tr>
<td>SUBSTRING(str, start, len)</td>
<td>返回从字符串str从start位置起的len个长度的字符串</td>
</tr>
</tbody></table>
<p>使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 拼接</span><br><span class="line">SELECT CONCAT(&#x27;Hello&#x27;, &#x27;World&#x27;);</span><br><span class="line">-- 小写</span><br><span class="line">SELECT LOWER(&#x27;Hello&#x27;);</span><br><span class="line">-- 大写</span><br><span class="line">SELECT UPPER(&#x27;Hello&#x27;);</span><br><span class="line">-- 左填充</span><br><span class="line">SELECT LPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 右填充</span><br><span class="line">SELECT RPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 去除空格</span><br><span class="line">SELECT TRIM(&#x27; Hello World &#x27;);</span><br><span class="line">-- 切片（起始索引为1）</span><br><span class="line">SELECT SUBSTRING(&#x27;Hello World&#x27;, 1, 5);</span><br></pre></td></tr></table></figure>

<h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>CEIL(x)</td>
<td>向上取整</td>
</tr>
<tr>
<td>FLOOR(x)</td>
<td>向下取整</td>
</tr>
<tr>
<td>MOD(x, y)</td>
<td>返回x&#x2F;y的模</td>
</tr>
<tr>
<td>RAND()</td>
<td>返回0~1内的随机数</td>
</tr>
<tr>
<td>ROUND(x, y)</td>
<td>求参数x的四舍五入值，保留y位小数</td>
</tr>
</tbody></table>
<h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常用函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>CURDATE()</td>
<td>返回当前日期</td>
</tr>
<tr>
<td>CURTIME()</td>
<td>返回当前时间</td>
</tr>
<tr>
<td>NOW()</td>
<td>返回当前日期和时间</td>
</tr>
<tr>
<td>YEAR(date)</td>
<td>获取指定date的年份</td>
</tr>
<tr>
<td>MONTH(date)</td>
<td>获取指定date的月份</td>
</tr>
<tr>
<td>DAY(date)</td>
<td>获取指定date的日期</td>
</tr>
<tr>
<td>DATE_ADD(date, INTERVAL expr type)</td>
<td>返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td>
</tr>
<tr>
<td>DATEDIFF(date1, date2)</td>
<td>返回起始时间date1和结束时间date2之间的天数</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- DATE_ADD</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span><br></pre></td></tr></table></figure>

<h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>常用函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>IF(value, t, f)</td>
<td>如果value为true，则返回t，否则返回f</td>
</tr>
<tr>
<td>IFNULL(value1, value2)</td>
<td>如果value1不为空，返回value1，否则返回value2</td>
</tr>
<tr>
<td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td>
<td>如果val1为true，返回res1，… 否则返回default默认值</td>
</tr>
<tr>
<td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td>
<td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">	name,</span><br><span class="line">	(case when age &gt; 30 then &#x27;中年&#x27; else &#x27;青年&#x27; end)</span><br><span class="line">from employee;</span><br><span class="line">select</span><br><span class="line">	name,</span><br><span class="line">	(case workaddress when &#x27;北京市&#x27; then &#x27;一线城市&#x27; when &#x27;上海市&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end) as &#x27;工作地址&#x27;</span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql常用引擎</title>
    <url>/2022/05/07/mysql%E5%B8%B8%E7%94%A8%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h1 id="MySQL体系结构："><a href="#MySQL体系结构：" class="headerlink" title="MySQL体系结构："></a>MySQL体系结构：</h1><p><img src="https://s2.loli.net/2022/05/07/xSbOtfpEiHyLjQX.png" alt="image-20220507104933643"></p>
<p><img src="https://s2.loli.net/2022/05/07/KZwMXhHJoY7EtDx.png" alt="image-20220507105014351"></p>
<p>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。</p>
<p>相关操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询建表语句</span><br><span class="line">show create table account;</span><br><span class="line">-- 建表时指定存储引擎</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">	...</span><br><span class="line">) ENGINE=INNODB;</span><br><span class="line">-- 查看当前数据库支持的存储引擎</span><br><span class="line">show engines;</span><br></pre></td></tr></table></figure>

<h1 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h1><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p>
<p>特点：</p>
<ul>
<li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li>
<li><strong>行级锁</strong>，提高并发访问性能</li>
<li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li>
</ul>
<p>文件：</p>
<ul>
<li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li>
</ul>
<p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p>
<p>知识点：</p>
<p>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p>
<p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p>
<p>InnoDB 逻辑存储结构：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png" alt="InnoDB逻辑存储结构" title="InnoDB逻辑存储结构"></p>
<h1 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h1><p>MyISAM 是 MySQL 早期的默认存储引擎。</p>
<p>特点：</p>
<ul>
<li>不支持事务，不支持外键</li>
<li>支持表锁，不支持行锁</li>
<li>访问速度快</li>
</ul>
<p>文件：</p>
<ul>
<li>xxx.sdi: 存储表结构信息</li>
<li>xxx.MYD: 存储数据</li>
<li>xxx.MYI: 存储索引</li>
</ul>
<h1 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h1><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p>
<p>特点：</p>
<ul>
<li>存放在内存中，速度快</li>
<li>hash索引（默认）</li>
</ul>
<p>文件：</p>
<ul>
<li>xxx.sdi: 存储表结构信息</li>
</ul>
<h1 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h1><table>
<thead>
<tr>
<th>特点</th>
<th>InnoDB</th>
<th>MyISAM</th>
<th>Memory</th>
</tr>
</thead>
<tbody><tr>
<td>存储限制</td>
<td>64TB</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>事务安全</td>
<td>支持</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>锁机制</td>
<td>行锁</td>
<td>表锁</td>
<td>表锁</td>
</tr>
<tr>
<td>B+tree索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>Hash索引</td>
<td>-</td>
<td>-</td>
<td>支持</td>
</tr>
<tr>
<td>全文索引</td>
<td>支持（5.6版本之后）</td>
<td>支持</td>
<td>-</td>
</tr>
<tr>
<td>空间使用</td>
<td>高</td>
<td>低</td>
<td>N&#x2F;A</td>
</tr>
<tr>
<td>内存使用</td>
<td>高</td>
<td>低</td>
<td>中等</td>
</tr>
<tr>
<td>批量插入速度</td>
<td>低</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>支持外键</td>
<td>支持</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<h1 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h1><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p>
<ul>
<li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li>
<li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li>
<li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li>
</ul>
<p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>引擎</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql性能分析方法</title>
    <url>/2022/05/07/mysql%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h1><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code></p>
<h1 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h1><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（&#x2F;etc&#x2F;my.cnf）中配置如下信息：<br>    # 开启慢查询日志开关<br>    slow_query_log&#x3D;1<br>    # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>    long_query_time&#x3D;2<br>更改后记得重启MySQL服务，日志文件位置：&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p>
<p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code></p>
<h1 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h1><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session&#x2F;global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code></p>
<h1 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h1><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：<br>    # 直接在select语句之前加上关键字 explain &#x2F; desc<br>    EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p>
<p>EXPLAIN 各字段含义：</p>
<ul>
<li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li>
<li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT&#x2F;WHERE之后包含了子查询）等</li>
<li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li>
</ul>
<blockquote>
<p>NULL:查询不存在的表时一般为NULL</p>
<p>system:查询系统表数据时一般为system</p>
<p>const : 主键索引或唯一索引数据</p>
<p>eq_ref,ref:非唯一索引查询</p>
</blockquote>
<ul>
<li>possible_key：可能应用在这张表上的索引，一个或多个</li>
<li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li>
<li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li>
<li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li>
<li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>性能分析</tag>
        <tag>explain</tag>
      </tags>
  </entry>
  <entry>
    <title>sql通用语法及分类</title>
    <url>/2022/05/07/sql%E9%80%9A%E7%94%A8%E8%AF%AD%E6%B3%95%E5%8F%8A%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="通用语法及分类"><a href="#通用语法及分类" class="headerlink" title="通用语法及分类"></a>通用语法及分类</h2><ul>
<li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li>
<li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li>
<li>DQL: 数据查询语言，用来查询数据库中表的记录</li>
<li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li>
</ul>
<h3 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h3><p>数据定义语言</p>
<h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p>
<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li>
</ul>
<h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p>
<p>创建表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">	字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class="line">	字段2 字段2类型 [COMMENT 字段2注释],</span><br><span class="line">	字段3 字段3类型 [COMMENT 字段3注释],</span><br><span class="line">	...</span><br><span class="line">	字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure>

<p><strong>最后一个字段后面没有逗号</strong></p>
<p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code></p>
<p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code></p>
<p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p>
<p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p>
<p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p>
<h3 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p>
<p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p>
<h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>字符串和日期类型数据应该包含在引号中</li>
<li>插入的数据大小应该在字段的规定范围内</li>
</ul>
<h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p>
<p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p>
<h3 id="DQL（数据查询语言）"><a href="#DQL（数据查询语言）" class="headerlink" title="DQL（数据查询语言）"></a>DQL（数据查询语言）</h3><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	字段列表</span><br><span class="line">FROM</span><br><span class="line">	表名字段</span><br><span class="line">WHERE</span><br><span class="line">	条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">	分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">	分组后的条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">	排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">	分页参数</span><br></pre></td></tr></table></figure>

<h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p>
<p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p>
<p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p>
<p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>&#x2F; 之后的_不作为通配符</p>
<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p>
<p>条件：</p>
<table>
<thead>
<tr>
<th>比较运算符</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>小于等于</td>
</tr>
<tr>
<td>&#x3D;</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt; 或 !&#x3D;</td>
<td>不等于</td>
</tr>
<tr>
<td>BETWEEN … AND …</td>
<td>在某个范围内（含最小、最大值）</td>
</tr>
<tr>
<td>IN(…)</td>
<td>在in之后的列表中的值，多选一</td>
</tr>
<tr>
<td>LIKE 占位符</td>
<td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td>
</tr>
<tr>
<td>IS NULL</td>
<td>是NULL</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>AND 或 &amp;&amp;</td>
<td>并且（多个条件同时成立）</td>
</tr>
<tr>
<td>OR 或 &amp;#124;&amp;#124;</td>
<td>或者（多个条件任意一个成立）</td>
</tr>
<tr>
<td>NOT 或 !</td>
<td>非，不是</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 年龄等于30</span><br><span class="line">select * from employee where age = 30;</span><br><span class="line">-- 年龄小于30</span><br><span class="line">select * from employee where age &lt; 30;</span><br><span class="line">-- 小于等于</span><br><span class="line">select * from employee where age &lt;= 30;</span><br><span class="line">-- 没有身份证</span><br><span class="line">select * from employee where idcard is null or idcard = &#x27;&#x27;;</span><br><span class="line">-- 有身份证</span><br><span class="line">select * from employee where idcard;</span><br><span class="line">select * from employee where idcard is not null;</span><br><span class="line">-- 不等于</span><br><span class="line">select * from employee where age != 30;</span><br><span class="line">-- 年龄在20到30之间</span><br><span class="line">select * from employee where age between 20 and 30;</span><br><span class="line">select * from employee where age &gt;= 20 and age &lt;= 30;</span><br><span class="line">-- 下面语句不报错，但查不到任何信息</span><br><span class="line">select * from employee where age between 30 and 20;</span><br><span class="line">-- 性别为女且年龄小于30</span><br><span class="line">select * from employee where age &lt; 30 and gender = &#x27;女&#x27;;</span><br><span class="line">-- 年龄等于25或30或35</span><br><span class="line">select * from employee where age = 25 or age = 30 or age = 35;</span><br><span class="line">select * from employee where age in (25, 30, 35);</span><br><span class="line">-- 姓名为两个字</span><br><span class="line">select * from employee where name like &#x27;__&#x27;;</span><br><span class="line">-- 身份证最后为X</span><br><span class="line">select * from employee where idcard like &#x27;%X&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="聚合查询（聚合函数）"><a href="#聚合查询（聚合函数）" class="headerlink" title="聚合查询（聚合函数）"></a>聚合查询（聚合函数）</h4><p>常见聚合函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>count</td>
<td>统计数量</td>
</tr>
<tr>
<td>max</td>
<td>最大值</td>
</tr>
<tr>
<td>min</td>
<td>最小值</td>
</tr>
<tr>
<td>avg</td>
<td>平均值</td>
</tr>
<tr>
<td>sum</td>
<td>求和</td>
</tr>
</tbody></table>
<p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p>
<h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p>
<p>where 和 having 的区别：</p>
<ul>
<li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li>
<li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><br><span class="line">select count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性数量</span><br><span class="line">select gender, count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性的平均年龄</span><br><span class="line">select gender, avg(age) from employee group by gender;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组</span><br><span class="line">select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class="line">select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure>

<h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>执行顺序：where &gt; 聚合函数 &gt; having</li>
<li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li>
</ul>
<h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p>
<p>排序方式：</p>
<ul>
<li>ASC: 升序（默认）</li>
<li>DESC: 降序</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 根据年龄升序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC;</span><br><span class="line">SELECT * FROM employee ORDER BY age;</span><br><span class="line">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span><br></pre></td></tr></table></figure>

<h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p>
<h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询第一页数据，展示10条</span><br><span class="line">SELECT * FROM employee LIMIT 0, 10;</span><br><span class="line">-- 查询第二页</span><br><span class="line">SELECT * FROM employee LIMIT 10, 10;</span><br></pre></td></tr></table></figure>

<h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>起始索引从0开始，起始索引 &#x3D; （查询页码 - 1） * 每页显示记录数</li>
<li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li>
<li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li>
</ul>
<h4 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p>
<h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER mysql;</span><br><span class="line">SELECT * FROM user;</span><br></pre></td></tr></table></figure>

<p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p>
<p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p>
<p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建用户test，只能在当前主机localhost访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 创建用户test，能在任意主机访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">create user &#x27;test&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 修改密码</span><br><span class="line">alter user &#x27;test&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;1234&#x27;;</span><br><span class="line">-- 删除用户</span><br><span class="line">drop user &#x27;test&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<h5 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>主机名可以使用 % 通配</li>
</ul>
<h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>常用权限：</p>
<table>
<thead>
<tr>
<th>权限</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ALL, ALL PRIVILEGES</td>
<td>所有权限</td>
</tr>
<tr>
<td>SELECT</td>
<td>查询数据</td>
</tr>
<tr>
<td>INSERT</td>
<td>插入数据</td>
</tr>
<tr>
<td>UPDATE</td>
<td>修改数据</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除数据</td>
</tr>
<tr>
<td>ALTER</td>
<td>修改表</td>
</tr>
<tr>
<td>DROP</td>
<td>删除数据库&#x2F;表&#x2F;视图</td>
</tr>
<tr>
<td>CREATE</td>
<td>创建数据库&#x2F;表</td>
</tr>
</tbody></table>
<p>更多权限请看<a href="#%E6%9D%83%E9%99%90%E4%B8%80%E8%A7%88%E8%A1%A8" title="权限一览表">权限一览表</a></p>
<p>查询权限：<br><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p>
<p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p>
<p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p>
<h5 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>多个权限用逗号分隔</li>
<li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li>
</ul>
<h1 id="权限一览表"><a href="#权限一览表" class="headerlink" title="权限一览表"></a>权限一览表</h1><blockquote>
<p>具体权限的作用详见<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html" title="官方文档">官方文档</a></p>
</blockquote>
<p>GRANT 和 REVOKE 允许的静态权限</p>
<table>
<thead>
<tr>
<th align="left">Privilege</th>
<th align="left">Grant Table Column</th>
<th align="left">Context</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all"><code>ALL [PRIVILEGES]</code></a></td>
<td align="left">Synonym for “all privileges”</td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter"><code>ALTER</code></a></td>
<td align="left"><code>Alter_priv</code></td>
<td align="left">Tables</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine"><code>ALTER ROUTINE</code></a></td>
<td align="left"><code>Alter_routine_priv</code></td>
<td align="left">Stored routines</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create"><code>CREATE</code></a></td>
<td align="left"><code>Create_priv</code></td>
<td align="left">Databases, tables, or indexes</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role"><code>CREATE ROLE</code></a></td>
<td align="left"><code>Create_role_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine"><code>CREATE ROUTINE</code></a></td>
<td align="left"><code>Create_routine_priv</code></td>
<td align="left">Stored routines</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace"><code>CREATE TABLESPACE</code></a></td>
<td align="left"><code>Create_tablespace_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables"><code>CREATE TEMPORARY TABLES</code></a></td>
<td align="left"><code>Create_tmp_table_priv</code></td>
<td align="left">Tables</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user"><code>CREATE USER</code></a></td>
<td align="left"><code>Create_user_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view"><code>CREATE VIEW</code></a></td>
<td align="left"><code>Create_view_priv</code></td>
<td align="left">Views</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete"><code>DELETE</code></a></td>
<td align="left"><code>Delete_priv</code></td>
<td align="left">Tables</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop"><code>DROP</code></a></td>
<td align="left"><code>Drop_priv</code></td>
<td align="left">Databases, tables, or views</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role"><code>DROP ROLE</code></a></td>
<td align="left"><code>Drop_role_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event"><code>EVENT</code></a></td>
<td align="left"><code>Event_priv</code></td>
<td align="left">Databases</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute"><code>EXECUTE</code></a></td>
<td align="left"><code>Execute_priv</code></td>
<td align="left">Stored routines</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file"><code>FILE</code></a></td>
<td align="left"><code>File_priv</code></td>
<td align="left">File access on server host</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option"><code>GRANT OPTION</code></a></td>
<td align="left"><code>Grant_priv</code></td>
<td align="left">Databases, tables, or stored routines</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index"><code>INDEX</code></a></td>
<td align="left"><code>Index_priv</code></td>
<td align="left">Tables</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert"><code>INSERT</code></a></td>
<td align="left"><code>Insert_priv</code></td>
<td align="left">Tables or columns</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables"><code>LOCK TABLES</code></a></td>
<td align="left"><code>Lock_tables_priv</code></td>
<td align="left">Databases</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process"><code>PROCESS</code></a></td>
<td align="left"><code>Process_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy"><code>PROXY</code></a></td>
<td align="left">See <code>proxies_priv</code> table</td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references"><code>REFERENCES</code></a></td>
<td align="left"><code>References_priv</code></td>
<td align="left">Databases or tables</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload"><code>RELOAD</code></a></td>
<td align="left"><code>Reload_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client"><code>REPLICATION CLIENT</code></a></td>
<td align="left"><code>Repl_client_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave"><code>REPLICATION SLAVE</code></a></td>
<td align="left"><code>Repl_slave_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select"><code>SELECT</code></a></td>
<td align="left"><code>Select_priv</code></td>
<td align="left">Tables or columns</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases"><code>SHOW DATABASES</code></a></td>
<td align="left"><code>Show_db_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view"><code>SHOW VIEW</code></a></td>
<td align="left"><code>Show_view_priv</code></td>
<td align="left">Views</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown"><code>SHUTDOWN</code></a></td>
<td align="left"><code>Shutdown_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super"><code>SUPER</code></a></td>
<td align="left"><code>Super_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger"><code>TRIGGER</code></a></td>
<td align="left"><code>Trigger_priv</code></td>
<td align="left">Tables</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update"><code>UPDATE</code></a></td>
<td align="left"><code>Update_priv</code></td>
<td align="left">Tables or columns</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage"><code>USAGE</code></a></td>
<td align="left">Synonym for “no privileges”</td>
<td align="left">Server administration</td>
</tr>
</tbody></table>
<p>GRANT 和 REVOKE 允许的动态权限</p>
<table>
<thead>
<tr>
<th align="left">Privilege</th>
<th align="left">Context</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin"><code>APPLICATION_PASSWORD_ADMIN</code></a></td>
<td align="left">Dual password administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt"><code>AUDIT_ABORT_EXEMPT</code></a></td>
<td align="left">Allow queries blocked by audit log filter</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin"><code>AUDIT_ADMIN</code></a></td>
<td align="left">Audit log administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td>
<td align="left">Authentication administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin"><code>BACKUP_ADMIN</code></a></td>
<td align="left">Backup administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin"><code>BINLOG_ADMIN</code></a></td>
<td align="left">Backup and Replication administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td>
<td align="left">Backup and Replication administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin"><code>CLONE_ADMIN</code></a></td>
<td align="left">Clone administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin"><code>CONNECTION_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin"><code>ENCRYPTION_KEY_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin"><code>FIREWALL_ADMIN</code></a></td>
<td align="left">Firewall administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt"><code>FIREWALL_EXEMPT</code></a></td>
<td align="left">Firewall administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user"><code>FIREWALL_USER</code></a></td>
<td align="left">Firewall administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs"><code>FLUSH_OPTIMIZER_COSTS</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status"><code>FLUSH_STATUS</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables"><code>FLUSH_TABLES</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources"><code>FLUSH_USER_RESOURCES</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin"><code>GROUP_REPLICATION_ADMIN</code></a></td>
<td align="left">Replication administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream"><code>GROUP_REPLICATION_STREAM</code></a></td>
<td align="left">Replication administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td>
<td align="left">Redo log archiving administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user"><code>NDB_STORED_USER</code></a></td>
<td align="left">NDB Cluster</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin"><code>PASSWORDLESS_USER_ADMIN</code></a></td>
<td align="left">Authentication administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier"><code>REPLICATION_APPLIER</code></a></td>
<td align="left"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin"><code>REPLICATION_SLAVE_ADMIN</code></a></td>
<td align="left">Replication administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin"><code>RESOURCE_GROUP_ADMIN</code></a></td>
<td align="left">Resource group administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user"><code>RESOURCE_GROUP_USER</code></a></td>
<td align="left">Resource group administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin"><code>ROLE_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin"><code>SESSION_VARIABLES_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id"><code>SET_USER_ID</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine"><code>SHOW_ROUTINE</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user"><code>SYSTEM_USER</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin"><code>SYSTEM_VARIABLES_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin"><code>TABLE_ENCRYPTION_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin"><code>VERSION_TOKEN_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin"><code>XA_RECOVER_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql存储过程</title>
    <url>/2022/05/07/mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>存储过程</strong>是事先经过编译并存储在数据库中的一段 SQL 语句的集合，调用存储过程可以简化应用开发 人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。 存储过程思想上很简单，就是数据库 SQL 语言层面的代码封装与重用。 </p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>封装，复用 ———————–&gt; 可以把某一业务SQL封装在存储过程中，需要用到 的时候直接调用即可。</li>
<li>可以接收参数，也可以返回数据 ——–&gt; 再存储过程中，可以传递参数，也可以接收返回 值。 </li>
<li>减少网络交互，效率提升 ————-&gt; 如果涉及到多条SQL，每执行一次都是一次网络传 输。 而如果封装在存储过程中，我们只需要网络交互一次可能就可以了。</li>
</ul>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名称 ([ 参数列表 ]) </span><br><span class="line"><span class="keyword">BEGIN</span> <span class="comment">-- SQL语句 </span></span><br><span class="line"><span class="keyword">END</span> ;</span><br></pre></td></tr></table></figure>

<h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> 名称 ([ 参数 ]);</span><br></pre></td></tr></table></figure>

<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> INFORMATION_SCHEMA.ROUTINES <span class="keyword">WHERE</span> ROUTINE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>; <span class="comment">-- 查询指</span></span><br><span class="line">定数据库的存储过程及状态信息</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名称 ; <span class="comment">-- 查询某个存储过程的定义</span></span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> [ IF <span class="keyword">EXISTS</span> ] 存储过程名称 </span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: 在命令行中，执行创建存储过程的SQL时，需要通过关键字 delimiter 指定SQL语句的 结束符。</p>
</blockquote>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>在MySQL中变量分为三种类型: 系统变量、用户定义变量、局部变量。</p>
<h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><p> <strong>系统变量</strong> 是MySQL服务器提供，不是用户定义的，属于服务器层面。分为全局变量（GLOBAL）、会话 变量（SESSION）。</p>
<p> 1). 查看系统变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> [ SESSION <span class="operator">|</span> <span class="keyword">GLOBAL</span> ] VARIABLES ; <span class="comment">-- 查看所有系统变量</span></span><br><span class="line"><span class="keyword">SHOW</span> [ SESSION <span class="operator">|</span> <span class="keyword">GLOBAL</span> ] VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;......&#x27;</span>; <span class="comment">-- 可以通过LIKE模糊匹配方</span></span><br><span class="line">式查找变量</span><br><span class="line"><span class="keyword">SELECT</span> @@[SESSION <span class="operator">|</span> <span class="keyword">GLOBAL</span>] 系统变量名; <span class="comment">-- 查看指定变量的值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2). 设置系统变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> [ SESSION <span class="operator">|</span> <span class="keyword">GLOBAL</span> ] 系统变量名 <span class="operator">=</span> 值 ;</span><br><span class="line"><span class="keyword">SET</span> @@[SESSION <span class="operator">|</span> <span class="keyword">GLOBAL</span>]系统变量名 <span class="operator">=</span> 值 ;</span><br></pre></td></tr></table></figure>

<h2 id="用户自定义变量"><a href="#用户自定义变量" class="headerlink" title="用户自定义变量"></a>用户自定义变量</h2><p>**用户定义变量 **是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用 “@变量 名” 使用就可以。其作用域为当前连接。</p>
<h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>方法一:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@var</span>_name <span class="operator">=</span> expr [, <span class="variable">@var</span>_name <span class="operator">=</span> expr] ... ;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@var</span>_name :<span class="operator">=</span> expr [, <span class="variable">@var</span>_name :<span class="operator">=</span> expr] ... ;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>赋值时，可以使用 &#x3D; ，也可以使用 :&#x3D; 。</p>
</blockquote>
<p>方法二:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="variable">@var</span>_name :<span class="operator">=</span> expr [, <span class="variable">@var</span>_name :<span class="operator">=</span> expr] ... ;</span><br><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">INTO</span> <span class="variable">@var</span>_name <span class="keyword">FROM</span> 表名</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="variable">@var</span>_name ;</span><br></pre></td></tr></table></figure>

<h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p><strong>局部变量</strong> 是根据需要定义的在局部生效的变量，访问之前，需要DECLARE声明。可用作存储过程内的 局部变量和输入参数，局部变量的范围是在其内声明的BEGIN … END块。</p>
<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 变量名 变量类型 [<span class="keyword">DEFAULT</span> ... ] ;</span><br></pre></td></tr></table></figure>

<h3 id="赋值-1"><a href="#赋值-1" class="headerlink" title="赋值"></a>赋值</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> 变量名 <span class="operator">=</span> 值 ;</span><br><span class="line"><span class="keyword">SET</span> 变量名 :<span class="operator">=</span> 值 ;</span><br><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">INTO</span> 变量名 <span class="keyword">FROM</span> 表名 ... ;</span><br></pre></td></tr></table></figure>

<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>参数的类型，主要分为以下三种：IN、OUT、INOUT。 具体的含义如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>IN</td>
<td>该类参数作为输入，也就是需要调用时传入值</td>
<td>默认</td>
</tr>
<tr>
<td>OUT</td>
<td>该类参数作为输出，也就是该参数可以作为返回值</td>
<td></td>
</tr>
<tr>
<td>INOUT</td>
<td>既可以作为输入参数，也可以作为输出参数</td>
<td></td>
</tr>
</tbody></table>
<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>if 用于做条件判断，具体的语法结构为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF 条件<span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">.....</span><br><span class="line">ELSEIF 条件<span class="number">2</span> <span class="keyword">THEN</span> <span class="comment">-- 可选</span></span><br><span class="line">.....</span><br><span class="line"><span class="keyword">ELSE</span> <span class="comment">-- 可选</span></span><br><span class="line">.....</span><br><span class="line"><span class="keyword">END</span> IF;</span><br></pre></td></tr></table></figure>

<h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><p>case结构及作用，和我们在基础篇中所讲解的流程控制函数很类似。有两种语法格式：</p>
<p>语法一:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 含义： 当case_value的值为 when_value1时，执行statement_list1，当值为 when_value2时，执行statement_list2， 否则就执行 statement_list</span></span><br><span class="line"><span class="keyword">CASE</span> case_value</span><br><span class="line"><span class="keyword">WHEN</span> when_value1 <span class="keyword">THEN</span> statement_list1</span><br><span class="line">[ <span class="keyword">WHEN</span> when_value2 <span class="keyword">THEN</span> statement_list2] ...</span><br><span class="line">[ <span class="keyword">ELSE</span> statement_list ]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure>

<p>语法2：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 含义： 当条件search_condition1成立时，执行statement_list1，当条件search_condition2成立时，执行statement_list2， 否则就执行 statement_list</span></span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> search_condition1 <span class="keyword">THEN</span> statement_list1</span><br><span class="line">[<span class="keyword">WHEN</span> search_condition2 <span class="keyword">THEN</span> statement_list2] ...</span><br><span class="line">[<span class="keyword">ELSE</span> statement_list]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果判定条件有多个，多个条件之间，可以使用 and 或 or 进行连接。</p>
</blockquote>
<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>while 循环是有条件的循环控制语句。满足条件后，再执行循环体中的SQL语句。具体语法为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先判定条件，如果条件为true，则执行逻辑，否则，不执行逻辑</span></span><br><span class="line">WHILE 条件 DO</span><br><span class="line"><span class="keyword">SQL</span>逻辑...</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br></pre></td></tr></table></figure>

<h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h2><p>repeat是有条件的循环控制语句, 当满足until声明的条件的时候，则退出循环 。具体语法为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先执行一次逻辑，然后判定UNTIL条件是否满足，如果满足，则退出。如果不满足，则继续下一次循环</span></span><br><span class="line">REPEAT</span><br><span class="line"><span class="keyword">SQL</span>逻辑...</span><br><span class="line">UNTIL 条件</span><br><span class="line"><span class="keyword">END</span> REPEAT;</span><br></pre></td></tr></table></figure>

<h2 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h2><p>LOOP 实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用其来实现简单的死循环。 LOOP可以配合一下两个语句使用： </p>
<ul>
<li>LEAVE ：配合循环使用，退出循环。 </li>
<li>ITERATE：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[begin_label:] LOOP</span><br><span class="line"><span class="keyword">SQL</span>逻辑...</span><br><span class="line"><span class="keyword">END</span> LOOP [end_label];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LEAVE label; <span class="comment">-- 退出指定标记的循环体</span></span><br><span class="line">ITERATE label; <span class="comment">-- 直接进入下一次循环</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述语法中出现的 begin_label，end_label，label 指的都是我们所自定义的标记。</p>
</blockquote>
<p>案例:</p>
<p>计算从1到n之间的偶数累加的值，n为传入的参数值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- A. 定义局部变量, 记录累加之后的值;</span></span><br><span class="line"><span class="comment">-- B. 每循环一次, 就会对n进行-1 , 如果n减到0, 则退出循环 ----&gt; leave xx</span></span><br><span class="line"><span class="comment">-- C. 如果当次累加的数据是奇数, 则直接进入下一次循环. --------&gt; iterate xx</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p10(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">sum:loop</span><br><span class="line">if n<span class="operator">&lt;=</span><span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">leave sum;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line">if n<span class="operator">%</span><span class="number">2</span> <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">set</span> n :<span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">iterate sum;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">set</span> total :<span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line"><span class="keyword">set</span> n :<span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> loop sum;</span><br><span class="line"><span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">call</span> p10(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>存储过程</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql触发器</title>
    <url>/2022/05/08/mysql%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>触发器是与表有关的数据库对象，指在<strong>insert&#x2F;update&#x2F;delete</strong>之前(<strong>BEFORE</strong>)或之后(<strong>AFTER</strong>)，触 发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性 , 日志记录 , 数据校验等操作 。 使用别名<strong>OLD</strong>和<strong>NEW</strong>来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还 只支持行级触发，不支持语句级触发</p>
<table>
<thead>
<tr>
<th>触发器类型</th>
<th>NEW和OLD</th>
</tr>
</thead>
<tbody><tr>
<td>INSERT 型触发器</td>
<td>NEW 表示将要或者已经新增的数据</td>
</tr>
<tr>
<td>UPDATE 型触发器</td>
<td>OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据</td>
</tr>
<tr>
<td>DELETE 型触发器</td>
<td>OLD 表示将要或者已经删除的数据</td>
</tr>
</tbody></table>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">BEFORE<span class="operator">/</span>AFTER <span class="keyword">INSERT</span><span class="operator">/</span><span class="keyword">UPDATE</span><span class="operator">/</span><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> tbl_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="comment">-- 行级触发器</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">trigger_stmt ;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS ;</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [schema_name.]trigger_name ; <span class="comment">-- 如果没有指定 schema_name，默认为当前数</span></span><br><span class="line">据库 。</span><br></pre></td></tr></table></figure>

<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>通过触发器记录 tb_user 表的数据变更日志，将变更日志插入到日志表user_logs中, 包含增加, 修改 , 删除 ;</p>
<h2 id="表结构准备"><a href="#表结构准备" class="headerlink" title="表结构准备:"></a>表结构准备:</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 准备工作 : 日志表 user_logs</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_logs(</span><br><span class="line">id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">operation <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;操作类型, insert/update/delete&#x27;</span>,</span><br><span class="line">operate_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">operate_id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;操作的ID&#x27;</span>,</span><br><span class="line">operate_params <span class="type">varchar</span>(<span class="number">500</span>) comment <span class="string">&#x27;操作参数&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> key(`id`)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<h2 id="插入触发器"><a href="#插入触发器" class="headerlink" title="插入触发器"></a>插入触发器</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tb_user_insert_trigger</span><br><span class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> tb_user <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_logs(id, operation, operate_time, operate_id, operate_params)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="keyword">null</span>, <span class="string">&#x27;insert&#x27;</span>, now(), new.id, concat(<span class="string">&#x27;插入的数据内容为:</span></span><br><span class="line"><span class="string">id=&#x27;</span>,new.id,<span class="string">&#x27;,name=&#x27;</span>,new.name, <span class="string">&#x27;, phone=&#x27;</span>, NEW.phone, <span class="string">&#x27;, email=&#x27;</span>, NEW.email, <span class="string">&#x27;,</span></span><br><span class="line"><span class="string">profession=&#x27;</span>, NEW.profession));</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>触发器</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql游标</title>
    <url>/2022/05/08/mysql%E6%B8%B8%E6%A0%87/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>游标（CURSOR）是用来存储查询结果集的数据类型 , 在存储过程和函数中可以使用游标对结果集进 行循环的处理。游标的使用包括游标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下。</p>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 游标名称 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> 查询语句 </span><br></pre></td></tr></table></figure>

<h2 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> 游标名称 ;</span><br></pre></td></tr></table></figure>



<h2 id="获取游标记录"><a href="#获取游标记录" class="headerlink" title="获取游标记录"></a>获取游标记录</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FETCH</span> 游标名称 <span class="keyword">INTO</span> 变量 [, 变量 ] ;</span><br></pre></td></tr></table></figure>

<h2 id="关闭游标"><a href="#关闭游标" class="headerlink" title="关闭游标"></a>关闭游标</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span> 游标名称 ;</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 逻辑:</span></span><br><span class="line"><span class="comment">-- A. 声明游标, 存储查询结果集</span></span><br><span class="line"><span class="comment">-- B. 准备: 创建表结构</span></span><br><span class="line"><span class="comment">-- C. 开启游标</span></span><br><span class="line"><span class="comment">-- D. 获取游标中的记录</span></span><br><span class="line"><span class="comment">-- E. 插入数据到新表中</span></span><br><span class="line"><span class="comment">-- F. 关闭游标</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p11(<span class="keyword">in</span> uage <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> uname <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">declare</span> upro <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">declare</span> u_cursor <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> name,profession <span class="keyword">from</span> tb_user <span class="keyword">where</span> age <span class="operator">&lt;=</span></span><br><span class="line">uage;</span><br><span class="line"><span class="comment">-- 声明条件处理程序 ： 当SQL语句执行抛出的状态码为02000时，将关闭游标u_cursor，并退出</span></span><br><span class="line"><span class="keyword">declare</span> exit handler <span class="keyword">for</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">close</span> u_cursor;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user_pro;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> tb_user_pro(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">profession <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">open</span> u_cursor;</span><br><span class="line">while <span class="literal">true</span> do</span><br><span class="line"><span class="keyword">fetch</span> u_cursor <span class="keyword">into</span> uname,upro;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user_pro <span class="keyword">values</span> (<span class="keyword">null</span>, uname, upro);</span><br><span class="line"><span class="keyword">end</span> while;</span><br><span class="line"><span class="keyword">close</span> u_cursor;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">call</span> p11(<span class="number">30</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>游标</tag>
      </tags>
  </entry>
</search>
